{"version":3,"file":"senna.js","sources":["src/globals/globals.js","node_modules/metal/src/coreNamed.js","node_modules/metal/src/core.js","node_modules/metal/src/array/array.js","node_modules/metal/src/async/async.js","node_modules/metal/src/disposable/Disposable.js","node_modules/metal/src/object/object.js","node_modules/metal/src/string/string.js","node_modules/metal-uri/src/parseFromAnchor.js","node_modules/metal-uri/src/parse.js","node_modules/metal-structs/src/MultiMap.js","node_modules/metal-structs/src/TreeNode.js","node_modules/metal-uri/src/Uri.js","src/utils/utils.js","src/app/dataAttributes.js","node_modules/metal-dom/src/domData.js","node_modules/metal-events/src/EventHandle.js","node_modules/metal-events/src/EventEmitter.js","node_modules/metal-events/src/EventEmitterProxy.js","node_modules/metal-events/src/EventHandler.js","node_modules/metal-dom/src/DomDelegatedEventHandle.js","node_modules/metal-dom/src/DomEventHandle.js","node_modules/metal-dom/src/domNamed.js","node_modules/metal-dom/src/dom.js","node_modules/metal-dom/src/DomEventEmitterProxy.js","node_modules/metal-dom/src/features.js","node_modules/metal-dom/src/globalEval.js","node_modules/metal-dom/src/globalEvalStyles.js","node_modules/metal-dom/src/events.js","node_modules/metal-promise/src/promise/Promise.js","node_modules/metal-debounce/src/debounce.js","node_modules/metal-path-parser/src/pathParser.js","src/route/Route.js","src/cacheable/Cacheable.js","src/screen/Screen.js","src/surface/Surface.js","src/app/App.js","node_modules/metal-ajax/src/Ajax.js","src/errors/errors.js","node_modules/metal-useragent/src/UA.js","src/screen/RequestScreen.js","src/screen/HtmlScreen.js","src/app/AppDataAttributeHandler.js","src/app/dataAttributeHandler.js"],"sourcesContent":["var globals = globals || {};\n\nif (typeof window !== 'undefined') {\n\tglobals.window = window;\n}\n\nif (typeof document !== 'undefined') {\n\tglobals.document = document;\n}\n\nexport default globals;\n","'use strict';\n\n/**\n * A collection of core utility functions.\n * @const\n */\n\nlet compatibilityModeData_;\n\n/**\n * Counter for unique id.\n * @type {Number}\n * @private\n */\nlet uniqueIdCounter_ = 1;\n\n/**\n * Unique id property prefix.\n * @type {String}\n * @protected\n */\nexport const UID_PROPERTY = `core_${((Math.random() * 1e9) >>> 0)}`;\n\n/**\n * When defining a class Foo with an abstract method bar(), you can do:\n * Foo.prototype.bar = abstractMethod\n *\n * Now if a subclass of Foo fails to override bar(), an error will be thrown\n * when bar() is invoked.\n *\n * @type {!Function}\n * @throws {Error} when invoked to indicate the method should be overridden.\n */\nexport function abstractMethod() {\n\tthrow Error('Unimplemented abstract method');\n}\n\n/**\n * Disables Metal.js's compatibility mode.\n */\nexport function disableCompatibilityMode() {\n\tcompatibilityModeData_ = undefined;\n}\n\n/**\n * Enables Metal.js's compatibility mode with the following features from rc\n * and 1.x versions:\n *     - Using \"key\" to reference component instances. In the current version\n *       this should be done via \"ref\" instead. This allows old code still\n *       using \"key\" to keep working like before. NOTE: this may cause\n *       problems, since \"key\" is meant to be used differently. Only use this\n *       if it's not possible to upgrade the code to use \"ref\" instead.\n * @param {Object=} opt_data Optional object with data to specify more\n *     details, such as:\n *         - renderers {Array} the template renderers that should be in\n *           compatibility mode, either their constructors or strings\n *           representing them (e.g. 'soy' or 'jsx'). By default, all the ones\n *           that extend from IncrementalDomRenderer.\n * @type {Object}\n */\nexport function enableCompatibilityMode(opt_data = {}) {\n\tcompatibilityModeData_ = opt_data;\n}\n\n/**\n * Returns the data used for compatibility mode, or nothing if it hasn't been\n * enabled.\n * @return {Object}\n */\nexport function getCompatibilityModeData() {\n\t// Compatibility mode can be set via the __METAL_COMPATIBILITY__ global var.\n\tif (compatibilityModeData_ === undefined) {\n\t\tif (typeof window !== 'undefined' && window.__METAL_COMPATIBILITY__) {\n\t\t\tenableCompatibilityMode(window.__METAL_COMPATIBILITY__);\n\t\t}\n\t}\n\treturn compatibilityModeData_;\n}\n\n/**\n * Returns the first argument if it's truthy, or the second otherwise.\n * @param {*} a\n * @param {*} b\n * @return {*}\n * @protected\n */\nfunction getFirstTruthy_(a, b) {\n\treturn a || b;\n}\n\n/**\n * Gets the name of the given function. If the current browser doesn't\n * support the `name` property, this will calculate it from the function's\n * content string.\n * @param {!function()} fn\n * @return {string}\n */\nexport function getFunctionName(fn) {\n\tif (!fn.name) {\n\t\tconst str = fn.toString();\n\t\tfn.name = str.substring(9, str.indexOf('('));\n\t}\n\treturn fn.name;\n}\n\n/**\n * Gets the value of a static property in the given class. The value will be\n * inherited from ancestors as expected, unless a custom merge function is given,\n * which can change how the super classes' value for that property will be merged\n * together.\n * The final merged value will be stored in another property, so that it won't\n * be recalculated even if this function is called multiple times.\n * @param {!function()} ctor Class constructor.\n * @param {string} propertyName Property name to be merged.\n * @param {function(*, *):*=} opt_mergeFn Function that receives the merged\n *     value of the property so far and the next value to be merged to it.\n *     Should return these two merged together. If not passed the final property\n *     will be the first truthy value among ancestors.\n */\nexport function getStaticProperty(ctor, propertyName, opt_mergeFn) {\n\tconst mergedName = propertyName + '_MERGED';\n\tif (!ctor.hasOwnProperty(mergedName)) {\n\t\tlet merged = ctor.hasOwnProperty(propertyName) ? ctor[propertyName] : null;\n\t\tif (ctor.__proto__ && !ctor.__proto__.isPrototypeOf(Function)) {\n\t\t\tconst mergeFn = opt_mergeFn || getFirstTruthy_;\n\t\t\tmerged = mergeFn(\n\t\t\t\tmerged,\n\t\t\t\tgetStaticProperty(ctor.__proto__, propertyName, mergeFn)\n\t\t\t);\n\t\t}\n\t\tctor[mergedName] = merged;\n\t}\n\treturn ctor[mergedName];\n}\n\n/**\n * Gets an unique id. If `opt_object` argument is passed, the object is\n * mutated with an unique id. Consecutive calls with the same object\n * reference won't mutate the object again, instead the current object uid\n * returns. See {@link UID_PROPERTY}.\n * @param {Object=} opt_object Optional object to be mutated with the uid. If\n *     not specified this method only returns the uid.\n * @param {boolean=} opt_noInheritance Optional flag indicating if this\n *     object's uid property can be inherited from parents or not.\n * @throws {Error} when invoked to indicate the method should be overridden.\n */\nexport function getUid(opt_object, opt_noInheritance) {\n\tif (opt_object) {\n\t\tlet id = opt_object[UID_PROPERTY];\n\t\tif (opt_noInheritance && !opt_object.hasOwnProperty(UID_PROPERTY)) {\n\t\t\tid = null;\n\t\t}\n\t\treturn id || (opt_object[UID_PROPERTY] = uniqueIdCounter_++);\n\t}\n\treturn uniqueIdCounter_++;\n}\n\n/**\n * The identity function. Returns its first argument.\n * @param {*=} opt_returnValue The single value that will be returned.\n * @return {?} The first argument.\n */\nexport function identityFunction(opt_returnValue) {\n\treturn opt_returnValue;\n}\n\n/**\n * Returns true if the specified value is a boolean.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is boolean.\n */\nexport function isBoolean(val) {\n\treturn typeof val === 'boolean';\n}\n\n/**\n * Returns true if the specified value is not undefined.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is defined.\n */\nexport function isDef(val) {\n\treturn val !== undefined;\n}\n\n/**\n * Returns true if value is not undefined or null.\n * @param {*} val\n * @return {boolean}\n */\nexport function isDefAndNotNull(val) {\n\treturn isDef(val) && !isNull(val);\n}\n\n/**\n * Returns true if value is a document.\n * @param {*} val\n * @return {boolean}\n */\nexport function isDocument(val) {\n\treturn val && typeof val === 'object' && val.nodeType === 9;\n}\n\n/**\n * Returns true if value is a document-fragment.\n * @param {*} val\n * @return {boolean}\n */\nexport function isDocumentFragment(val) {\n\treturn val && typeof val === 'object' && val.nodeType === 11;\n}\n\n/**\n * Returns true if value is a dom element.\n * @param {*} val\n * @return {boolean}\n */\nexport function isElement(val) {\n\treturn val && typeof val === 'object' && val.nodeType === 1;\n}\n\n/**\n * Returns true if the specified value is a function.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is a function.\n */\nexport function isFunction(val) {\n\treturn typeof val === 'function';\n}\n\n/**\n * Returns true if value is null.\n * @param {*} val\n * @return {boolean}\n */\nexport function isNull(val) {\n\treturn val === null;\n}\n\n/**\n * Returns true if the specified value is a number.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is a number.\n */\nexport function isNumber(val) {\n\treturn typeof val === 'number';\n}\n\n/**\n * Returns true if value is a window.\n * @param {*} val\n * @return {boolean}\n */\nexport function isWindow(val) {\n\treturn val !== null && val === val.window;\n}\n\n/**\n * Returns true if the specified value is an object. This includes arrays\n * and functions.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is an object.\n */\nexport function isObject(val) {\n\tconst type = typeof val;\n\treturn type === 'object' && val !== null || type === 'function';\n}\n\n/**\n * Returns true if value is a Promise.\n * @param {*} val\n * @return {boolean}\n */\nexport function isPromise(val) {\n\treturn val && typeof val === 'object' && typeof val.then === 'function';\n}\n\n/**\n * Returns true if value is a string.\n * @param {*} val\n * @return {boolean}\n */\nexport function isString(val) {\n\treturn typeof val === 'string' || val instanceof String;\n}\n\n/**\n * Null function used for default values of callbacks, etc.\n * @return {void} Nothing.\n */\nexport function nullFunction() {\n}\n","'use strict';\n\n// This file exists just for backwards compatibility, making sure that old\n// default imports for this file still work. It's best to use the named exports\n// for each function instead though, since that allows bundlers like Rollup to\n// reduce the bundle size by removing unused code.\nimport * as core from './coreNamed';\n\nexport default core;\nexport { core };\nexport * from './coreNamed';\n","'use strict';\n\nimport { isDef } from '../core';\n\nclass array {\n\t/**\n\t * Checks if the given arrays have the same content.\n\t * @param {!Array<*>} arr1\n\t * @param {!Array<*>} arr2\n\t * @return {boolean}\n\t */\n\tstatic equal(arr1, arr2) {\n\t\tif (arr1 === arr2) {\n\t\t\treturn true;\n\t\t}\n\t\tif (arr1.length !== arr2.length) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (let i = 0; i < arr1.length; i++) {\n\t\t\tif (arr1[i] !== arr2[i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Returns the first value in the given array that isn't undefined.\n\t * @param {!Array} arr\n\t * @return {*}\n\t */\n\tstatic firstDefinedValue(arr) {\n\t\tfor (let i = 0; i < arr.length; i++) {\n\t\t\tif (arr[i] !== undefined) {\n\t\t\t\treturn arr[i];\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Transforms the input nested array to become flat.\n\t * @param {Array.<*|Array.<*>>} arr Nested array to flatten.\n\t * @param {Array.<*>} opt_output Optional output array.\n\t * @return {Array.<*>} Flat array.\n\t */\n\tstatic flatten(arr, opt_output) {\n\t\tvar output = opt_output || [];\n\t\tfor (let i = 0; i < arr.length; i++) {\n\t\t\tif (Array.isArray(arr[i])) {\n\t\t\t\tarray.flatten(arr[i], output);\n\t\t\t} else {\n\t\t\t\toutput.push(arr[i]);\n\t\t\t}\n\t\t}\n\t\treturn output;\n\t}\n\n\t/**\n\t * Removes the first occurrence of a particular value from an array.\n\t * @param {Array.<T>} arr Array from which to remove value.\n\t * @param {T} obj Object to remove.\n\t * @return {boolean} True if an element was removed.\n\t * @template T\n\t */\n\tstatic remove(arr, obj) {\n\t\tconst i = arr.indexOf(obj);\n\t\tlet rv;\n\t\tif ( (rv = i >= 0) ) {\n\t\t\tarray.removeAt(arr, i);\n\t\t}\n\t\treturn rv;\n\t}\n\n\t/**\n\t * Removes from an array the element at index i\n\t * @param {Array} arr Array or array like object from which to remove value.\n\t * @param {number} i The index to remove.\n\t * @return {boolean} True if an element was removed.\n\t */\n\tstatic removeAt(arr, i) {\n\t\treturn Array.prototype.splice.call(arr, i, 1).length === 1;\n\t}\n\n\t/**\n\t * Slices the given array, just like Array.prototype.slice, but this\n\t * is faster and working on all array-like objects (like arguments).\n\t * @param {!Object} arr Array-like object to slice.\n\t * @param {number} start The index that should start the slice.\n\t * @param {number=} opt_end The index where the slice should end, not\n\t *   included in the final array. If not given, all elements after the\n\t *   start index will be included.\n\t * @return {!Array}\n\t */\n\tstatic slice(arr, start, opt_end) {\n\t\tconst sliced = [];\n\t\tconst end = isDef(opt_end) ? opt_end : arr.length;\n\t\tfor (let i = start; i < end; i++) {\n\t\t\tsliced.push(arr[i]);\n\t\t}\n\t\treturn sliced;\n\t}\n}\n\nexport default array;\n","/*!\n * Polyfill from Google's Closure Library.\n * Copyright 2013 The Closure Library Authors. All Rights Reserved.\n */\n\n'use strict';\n\nconst async = {};\n\n\n/**\n * Throw an item without interrupting the current execution context.  For\n * example, if processing a group of items in a loop, sometimes it is useful\n * to report an error while still allowing the rest of the batch to be\n * processed.\n * @param {*} exception\n */\nasync.throwException = function(exception) {\n\t// Each throw needs to be in its own context.\n\tasync.nextTick(function() {\n\t\tthrow exception;\n\t});\n};\n\n\n/**\n * Fires the provided callback just before the current callstack unwinds, or as\n * soon as possible after the current JS execution context.\n * @param {function(this:THIS)} callback\n * @param {THIS=} opt_context Object to use as the \"this value\" when calling\n *     the provided function.\n * @template THIS\n */\nasync.run = function(callback, opt_context) {\n\tif (!async.run.workQueueScheduled_) {\n\t\t// Nothing is currently scheduled, schedule it now.\n\t\tasync.nextTick(async.run.processWorkQueue);\n\t\tasync.run.workQueueScheduled_ = true;\n\t}\n\n\tasync.run.workQueue_.push(\n\t\tnew async.run.WorkItem_(callback, opt_context));\n};\n\n\n/** @private {boolean} */\nasync.run.workQueueScheduled_ = false;\n\n\n/** @private {!Array.<!async.run.WorkItem_>} */\nasync.run.workQueue_ = [];\n\n/**\n * Run any pending async.run work items. This function is not intended\n * for general use, but for use by entry point handlers to run items ahead of\n * async.nextTick.\n */\nasync.run.processWorkQueue = function() {\n\t// NOTE: additional work queue items may be pushed while processing.\n\twhile (async.run.workQueue_.length) {\n\t\t// Don't let the work queue grow indefinitely.\n\t\tconst workItems = async.run.workQueue_;\n\t\tasync.run.workQueue_ = [];\n\t\tfor (let i = 0; i < workItems.length; i++) {\n\t\t\tconst workItem = workItems[i];\n\t\t\ttry {\n\t\t\t\tworkItem.fn.call(workItem.scope);\n\t\t\t} catch (e) {\n\t\t\t\tasync.throwException(e);\n\t\t\t}\n\t\t}\n\t}\n\n\t// There are no more work items, reset the work queue.\n\tasync.run.workQueueScheduled_ = false;\n};\n\n\n/**\n * @constructor\n * @final\n * @struct\n * @private\n *\n * @param {function()} fn\n * @param {Object|null|undefined} scope\n */\nasync.run.WorkItem_ = function(fn, scope) {\n\t/** @const */\n\tthis.fn = fn;\n\t/** @const */\n\tthis.scope = scope;\n};\n\n\n/**\n * Fires the provided callbacks as soon as possible after the current JS\n * execution context. setTimeout(…, 0) always takes at least 5ms for legacy\n * reasons.\n * @param {function(this:SCOPE)} callback Callback function to fire as soon as\n *     possible.\n * @param {SCOPE=} opt_context Object in whose scope to call the listener.\n * @template SCOPE\n */\nasync.nextTick = function(callback, opt_context) {\n\tlet cb = callback;\n\tif (opt_context) {\n\t\tcb = callback.bind(opt_context);\n\t}\n\tcb = async.nextTick.wrapCallback_(cb);\n\t// Introduced and currently only supported by IE10.\n\t// Verify if variable is defined on the current runtime (i.e., node, browser).\n\t// Can't use typeof enclosed in a function (such as core.isFunction) or an\n\t// exception will be thrown when the function is called on an environment\n\t// where the variable is undefined.\n\tif (typeof setImmediate === 'function') {\n\t\tsetImmediate(cb);\n\t\treturn;\n\t}\n\t// Look for and cache the custom fallback version of setImmediate.\n\tif (!async.nextTick.setImmediate_) {\n\t\tasync.nextTick.setImmediate_ = async.nextTick.getSetImmediateEmulator_();\n\t}\n\tasync.nextTick.setImmediate_(cb);\n};\n\n\n/**\n * Cache for the setImmediate implementation.\n * @type {function(function())}\n * @private\n */\nasync.nextTick.setImmediate_ = null;\n\n\n/**\n * Determines the best possible implementation to run a function as soon as\n * the JS event loop is idle.\n * @return {function(function())} The \"setImmediate\" implementation.\n * @private\n */\nasync.nextTick.getSetImmediateEmulator_ = function() {\n\t// Create a private message channel and use it to postMessage empty messages\n\t// to ourselves.\n\tlet Channel;\n\n\t// Verify if variable is defined on the current runtime (i.e., node, browser).\n\t// Can't use typeof enclosed in a function (such as core.isFunction) or an\n\t// exception will be thrown when the function is called on an environment\n\t// where the variable is undefined.\n\tif (typeof MessageChannel === 'function') {\n\t\tChannel = MessageChannel;\n\t}\n\n\t// If MessageChannel is not available and we are in a browser, implement\n\t// an iframe based polyfill in browsers that have postMessage and\n\t// document.addEventListener. The latter excludes IE8 because it has a\n\t// synchronous postMessage implementation.\n\tif (typeof Channel === 'undefined' && typeof window !== 'undefined' &&\n\t\twindow.postMessage && window.addEventListener) {\n\t\t/** @constructor */\n\t\tChannel = function() {\n\t\t\t// Make an empty, invisible iframe.\n\t\t\tconst iframe = document.createElement('iframe');\n\t\t\tiframe.style.display = 'none';\n\t\t\tiframe.src = '';\n\t\t\tdocument.documentElement.appendChild(iframe);\n\t\t\tconst win = iframe.contentWindow;\n\t\t\tconst doc = win.document;\n\t\t\tdoc.open();\n\t\t\tdoc.write('');\n\t\t\tdoc.close();\n\t\t\tconst message = 'callImmediate' + Math.random();\n\t\t\tconst origin = win.location.protocol + '//' + win.location.host;\n\t\t\tconst onmessage = function(e) {\n\t\t\t\t// Validate origin and message to make sure that this message was\n\t\t\t\t// intended for us.\n\t\t\t\tif (e.origin !== origin && e.data !== message) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis.port1.onmessage();\n\t\t\t}.bind(this);\n\t\t\twin.addEventListener('message', onmessage, false);\n\t\t\tthis.port1 = {};\n\t\t\tthis.port2 = {\n\t\t\t\tpostMessage: function() {\n\t\t\t\t\twin.postMessage(message, origin);\n\t\t\t\t}\n\t\t\t};\n\t\t};\n\t}\n\tif (typeof Channel !== 'undefined') {\n\t\tconst channel = new Channel();\n\t\t// Use a fifo linked list to call callbacks in the right order.\n\t\tlet head = {};\n\t\tlet tail = head;\n\t\tchannel.port1.onmessage = function() {\n\t\t\thead = head.next;\n\t\t\tconst cb = head.cb;\n\t\t\thead.cb = null;\n\t\t\tcb();\n\t\t};\n\t\treturn function(cb) {\n\t\t\ttail.next = {\n\t\t\t\tcb: cb\n\t\t\t};\n\t\t\ttail = tail.next;\n\t\t\tchannel.port2.postMessage(0);\n\t\t};\n\t}\n\t// Implementation for IE6-8: Script elements fire an asynchronous\n\t// onreadystatechange event when inserted into the DOM.\n\tif (typeof document !== 'undefined' && 'onreadystatechange' in\n\t\tdocument.createElement('script')) {\n\t\treturn function(cb) {\n\t\t\tlet script = document.createElement('script');\n\t\t\tscript.onreadystatechange = function() {\n\t\t\t\t// Clean up and call the callback.\n\t\t\t\tscript.onreadystatechange = null;\n\t\t\t\tscript.parentNode.removeChild(script);\n\t\t\t\tscript = null;\n\t\t\t\tcb();\n\t\t\t\tcb = null;\n\t\t\t};\n\t\t\tdocument.documentElement.appendChild(script);\n\t\t};\n\t}\n\t// Fall back to setTimeout with 0. In browsers this creates a delay of 5ms\n\t// or more.\n\treturn function(cb) {\n\t\tsetTimeout(cb, 0);\n\t};\n};\n\n\n/**\n * Helper function that is overrided to protect callbacks with entry point\n * monitor if the application monitors entry points.\n * @param {function()} callback Callback function to fire as soon as possible.\n * @return {function()} The wrapped callback.\n * @private\n */\nasync.nextTick.wrapCallback_ = function(opt_returnValue) {\n\treturn opt_returnValue;\n};\n\nexport default async;\n","'use strict';\n\n/**\n * Disposable utility. When inherited provides the `dispose` function to its\n * subclass, which is responsible for disposing of any object references\n * when an instance won't be used anymore. Subclasses should override\n * `disposeInternal` to implement any specific disposing logic.\n * @constructor\n */\nclass Disposable {\n\tconstructor() {\n\t\t/**\n\t\t * Flag indicating if this instance has already been disposed.\n\t\t * @type {boolean}\n\t\t * @protected\n\t\t */\n\t\tthis.disposed_ = false;\n\t}\n\n\t/**\n\t * Disposes of this instance's object references. Calls `disposeInternal`.\n\t */\n\tdispose() {\n\t\tif (!this.disposed_) {\n\t\t\tthis.disposeInternal();\n\t\t\tthis.disposed_ = true;\n\t\t}\n\t}\n\n\t/**\n\t * Subclasses should override this method to implement any specific\n\t * disposing logic (like clearing references and calling `dispose` on other\n\t * disposables).\n\t */\n\tdisposeInternal() {}\n\n\t/**\n\t * Checks if this instance has already been disposed.\n\t * @return {boolean}\n\t */\n\tisDisposed() {\n\t\treturn this.disposed_;\n\t}\n}\n\nexport default Disposable;\n","'use strict';\n\nclass object {\n\t/**\n\t * Copies all the members of a source object to a target object.\n\t * @param {Object} target Target object.\n\t * @param {...Object} var_args The objects from which values will be copied.\n\t * @return {Object} Returns the target object reference.\n\t */\n\tstatic mixin(target) {\n\t\tlet key, source;\n\t\tfor (let i = 1; i < arguments.length; i++) {\n\t\t\tsource = arguments[i];\n\t\t\tfor (key in source) {\n\t\t\t\ttarget[key] = source[key];\n\t\t\t}\n\t\t}\n\t\treturn target;\n\t}\n\n\t/**\n\t * Returns an object based on its fully qualified external name.\n\t * @param {string} name The fully qualified name.\n\t * @param {object=} opt_obj The object within which to look; default is\n\t *     <code>window</code>.\n\t * @return {?} The value (object or primitive) or, if not found, undefined.\n\t */\n\tstatic getObjectByName(name, opt_obj) {\n\t\tconst scope = opt_obj || window;\n\t\tconst parts = name.split('.');\n\t\treturn parts.reduce((part, key) => part[key], scope);\n\t}\n\n\t/**\n\t * Returns a new object with the same keys as the given one, but with\n\t * their values set to the return values of the specified function.\n\t * @param {!Object} obj\n\t * @param {!function(string, *)} fn\n\t * @return {!Object}\n\t */\n\tstatic map(obj, fn) {\n\t\tconst mappedObj = {};\n\t\tconst keys = Object.keys(obj);\n\t\tfor (let i = 0; i < keys.length; i++) {\n\t\t\tmappedObj[keys[i]] = fn(keys[i], obj[keys[i]]);\n\t\t}\n\t\treturn mappedObj;\n\t}\n\n\t/**\n\t * Checks if the two given objects are equal. This is done via a shallow\n\t * check, including only the keys directly contained by the 2 objects.\n\t * @return {boolean}\n\t */\n\tstatic shallowEqual(obj1, obj2) {\n\t\tif (obj1 === obj2) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst keys1 = Object.keys(obj1);\n\t\tconst keys2 = Object.keys(obj2);\n\t\tif (keys1.length !== keys2.length) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor (let i = 0; i < keys1.length; i++) {\n\t\t\tif (obj1[keys1[i]] !== obj2[keys1[i]]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n\nexport default object;\n","'use strict';\n\nclass string {\n\t/**\n\t * Compares the given strings without taking the case into account.\n\t * @param {string|number} str1\n\t * @param {string|number} str2\n\t * @return {number} Either -1, 0 or 1, according to if the first string is\n\t *     \"smaller\", equal or \"bigger\" than the second given string.\n\t */\n\tstatic caseInsensitiveCompare(str1, str2) {\n\t\tconst test1 = String(str1).toLowerCase();\n\t\tconst test2 = String(str2).toLowerCase();\n\n\t\tif (test1 < test2) {\n\t\t\treturn -1;\n\t\t} else if (test1 === test2) {\n\t\t\treturn 0;\n\t\t} else {\n\t\t\treturn 1;\n\t\t}\n\t}\n\n\t/**\n\t * Removes the breaking spaces from the left and right of the string and\n\t * collapses the sequences of breaking spaces in the middle into single spaces.\n\t * The original and the result strings render the same way in HTML.\n\t * @param {string} str A string in which to collapse spaces.\n\t * @return {string} Copy of the string with normalized breaking spaces.\n\t */\n\tstatic collapseBreakingSpaces(str) {\n\t\treturn str.replace(/[\\t\\r\\n ]+/g, ' ').replace(/^[\\t\\r\\n ]+|[\\t\\r\\n ]+$/g, '');\n\t}\n\n\t/**\n\t* Escapes characters in the string that are not safe to use in a RegExp.\n\t* @param {*} str The string to escape. If not a string, it will be casted\n\t*     to one.\n\t* @return {string} A RegExp safe, escaped copy of {@code s}.\n\t*/\n\tstatic escapeRegex(str) {\n\t\treturn String(str)\n\t\t\t.replace(/([-()\\[\\]{}+?*.$\\^|,:#<!\\\\])/g, '\\\\$1')\n\t\t\t.replace(/\\x08/g, '\\\\x08');\n\t}\n\n\t/**\n\t* Returns a string with at least 64-bits of randomness.\n\t* @return {string} A random string, e.g. sn1s7vb4gcic.\n\t*/\n\tstatic getRandomString() {\n\t\tconst x = 2147483648;\n\t\treturn Math.floor(Math.random() * x).toString(36) +\n\t\t\tMath.abs(Math.floor(Math.random() * x) ^ Date.now()).toString(36);\n\t}\n\n\t/**\n\t * Calculates the hashcode for a string. The hashcode value is computed by\n\t * the sum algorithm: s[0]*31^(n-1) + s[1]*31^(n-2) + ... + s[n-1]. A nice\n\t * property of using 31 prime is that the multiplication can be replaced by\n\t * a shift and a subtraction for better performance: 31*i == (i<<5)-i.\n\t * Modern VMs do this sort of optimization automatically.\n\t * @param {String} val Target string.\n\t * @return {Number} Returns the string hashcode.\n\t */\n\tstatic hashCode(val) {\n\t\tlet hash = 0;\n\t\tfor (let i = 0, len = val.length; i < len; i++) {\n\t\t\thash = 31 * hash + val.charCodeAt(i);\n\t\t\thash %= 0x100000000;\n\t\t}\n\t\treturn hash;\n\t}\n\n\t/**\n\t * Replaces interval into the string with specified value, e.g.\n\t * `replaceInterval(\"abcde\", 1, 4, \"\")` returns \"ae\".\n\t * @param {string} str The input string.\n\t * @param {Number} start Start interval position to be replaced.\n\t * @param {Number} end End interval position to be replaced.\n\t * @param {string} value The value that replaces the specified interval.\n\t * @return {string}\n\t */\n\tstatic replaceInterval(str, start, end, value) {\n\t\treturn str.substring(0, start) + value + str.substring(end);\n\t}\n}\n\nexport default string;\n","'use strict';\n\n/**\n * Parses the given uri string into an object.\n * @param {*=} opt_uri Optional string URI to parse\n */\nfunction parseFromAnchor(opt_uri) {\n\tvar link = document.createElement('a');\n\tlink.href = opt_uri;\n\treturn {\n\t\thash: link.hash,\n\t\thostname: link.hostname,\n\t\tpassword: link.password,\n\t\tpathname: link.pathname[0] === '/' ? link.pathname : '/' + link.pathname,\n\t\tport: link.port,\n\t\tprotocol: link.protocol,\n\t\tsearch: link.search,\n\t\tusername: link.username\n\t};\n}\n\nexport default parseFromAnchor;\n","'use strict';\n\nimport { isFunction } from 'metal';\nimport parseFromAnchor from './parseFromAnchor';\n\n/**\n * Parses the given uri string into an object. The URL function will be used\n * when present, otherwise we'll fall back to the anchor node element.\n * @param {*=} opt_uri Optional string URI to parse\n */\nfunction parse(opt_uri) {\n\tif (isFunction(URL) && URL.length) {\n\t\treturn new URL(opt_uri);\n\t} else {\n\t\treturn parseFromAnchor(opt_uri);\n\t}\n}\n\nexport default parse;\n","'use strict';\n\nimport { Disposable } from 'metal';\n\n/**\n * A cached reference to the create function.\n */\nvar create = Object.create;\n\n/**\n * Case insensitive string Multimap implementation. Allows multiple values for\n * the same key name.\n * @extends {Disposable}\n */\nclass MultiMap extends Disposable {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.keys = create(null);\n\t\tthis.values = create(null);\n\t}\n\n\t/**\n\t * Adds value to a key name.\n\t * @param {string} name\n\t * @param {*} value\n\t * @chainable\n\t */\n\tadd(name, value) {\n\t\tthis.keys[name.toLowerCase()] = name;\n\t\tthis.values[name.toLowerCase()] = this.values[name.toLowerCase()] || [];\n\t\tthis.values[name.toLowerCase()].push(value);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Clears map names and values.\n\t * @chainable\n\t */\n\tclear() {\n\t\tthis.keys = create(null);\n\t\tthis.values = create(null);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Checks if map contains a value to the key name.\n\t * @param {string} name\n\t * @return {boolean}\n\t * @chainable\n\t */\n\tcontains(name) {\n\t\treturn name.toLowerCase() in this.values;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdisposeInternal() {\n\t\tthis.values = null;\n\t}\n\n\t/**\n\t * Creates a `MultiMap` instance from the given object.\n\t * @param {!Object} obj\n\t * @return {!MultiMap}\n\t */\n\tstatic fromObject(obj) {\n\t\tvar map = new MultiMap();\n\t\tvar keys = Object.keys(obj);\n\t\tfor (var i = 0; i < keys.length; i++) {\n\t\t\tmap.set(keys[i], obj[keys[i]]);\n\t\t}\n\t\treturn map;\n\t}\n\n\t/**\n\t * Gets the first added value from a key name.\n\t * @param {string} name\n\t * @return {*}\n\t * @chainable\n\t */\n\tget(name) {\n\t\tvar values = this.values[name.toLowerCase()];\n\t\tif (values) {\n\t\t\treturn values[0];\n\t\t}\n\t}\n\n\t/**\n\t * Gets all values from a key name.\n\t * @param {string} name\n\t * @return {Array.<*>}\n\t */\n\tgetAll(name) {\n\t\treturn this.values[name.toLowerCase()];\n\t}\n\n\t/**\n\t * Returns true if the map is empty, false otherwise.\n\t * @return {boolean}\n\t */\n\tisEmpty() {\n\t\treturn this.size() === 0;\n\t}\n\n\t/**\n\t * Gets array of key names.\n\t * @return {Array.<string>}\n\t */\n\tnames() {\n\t\treturn Object.keys(this.values).map((key) => this.keys[key]);\n\t}\n\n\t/**\n\t * Removes all values from a key name.\n\t * @param {string} name\n\t * @chainable\n\t */\n\tremove(name) {\n\t\tdelete this.keys[name.toLowerCase()];\n\t\tdelete this.values[name.toLowerCase()];\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the value of a key name. Relevant to replace the current values with\n\t * a new one.\n\t * @param {string} name\n\t * @param {*} value\n\t * @chainable\n\t */\n\tset(name, value) {\n\t\tthis.keys[name.toLowerCase()] = name;\n\t\tthis.values[name.toLowerCase()] = [value];\n\t\treturn this;\n\t}\n\n\t/**\n\t * Gets the size of the map key names.\n\t * @return {number}\n\t */\n\tsize() {\n\t\treturn this.names().length;\n\t}\n\n\t/**\n\t * Returns the parsed values as a string.\n\t * @return {string}\n\t */\n\ttoString() {\n\t\treturn JSON.stringify(this.values);\n\t}\n}\n\nexport default MultiMap;\n","'use strict';\n\nimport { array } from 'metal';\n\n/**\n * Generic tree node data structure with arbitrary number of child nodes.\n * @param {V} value Value.\n * @constructor\n */\nclass TreeNode {\n\n\tconstructor(value) {\n\t\t/**\n\t\t * The value.\n\t\t * @private {V}\n\t\t */\n\t\tthis.value_ = value;\n\n\t\t/**\n\t\t * Reference to the parent node or null if it has no parent.\n\t\t * @private {TreeNode}\n\t\t */\n\t\tthis.parent_ = null;\n\n\t\t/**\n\t\t * Child nodes or null in case of leaf node.\n\t\t * @private {Array<!TreeNode>}\n\t\t */\n\t\tthis.children_ = null;\n\t}\n\n\t/**\n\t * Appends a child node to this node.\n\t * @param {!TreeNode} child Orphan child node.\n\t */\n\taddChild(child) {\n\t\tassertChildHasNoParent(child);\n\t\tchild.setParent(this);\n\t\tthis.children_ = this.children_ || [];\n\t\tthis.children_.push(child);\n\t}\n\n\t/**\n\t * Tells whether this node is the ancestor of the given node.\n\t * @param {!TreeNode} node A node.\n\t * @return {boolean} Whether this node is the ancestor of {@code node}.\n\t */\n\tcontains(node) {\n\t\tlet current = node.getParent();\n\t\twhile (current) {\n\t\t\tif (current === this) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tcurrent = current.getParent();\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * @return {!Array<TreeNode>} All ancestor nodes in bottom-up order.\n\t */\n\tgetAncestors() {\n\t\tlet ancestors = [];\n\t\tlet node = this.getParent();\n\t\twhile (node) {\n\t\t\tancestors.push(node);\n\t\t\tnode = node.getParent();\n\t\t}\n\t\treturn ancestors;\n\t}\n\n\t/**\n\t * Gets the child node of this node at the given index.\n\t * @param {number} index Child index.\n\t * @return {?TreeNode} The node at the given index\n\t * or null if not found.\n\t */\n\tgetChildAt(index) {\n\t\treturn this.getChildren()[index] || null;\n\t}\n\n\t/**\n\t * @return {?Array<!TreeNode>} Child nodes or null in case of leaf node.\n\t */\n\tgetChildren() {\n\t\treturn this.children_ || TreeNode.EMPTY_ARRAY;\n\t}\n\n\t/**\n\t * @return {number} The number of children.\n\t */\n\tgetChildCount() {\n\t\treturn this.getChildren().length;\n\t}\n\n\t/**\n\t * @return {number} The number of ancestors of the node.\n\t */\n\tgetDepth() {\n\t\tlet depth = 0;\n\t\tlet node = this;\n\t\twhile (node.getParent()) {\n\t\t\tdepth++;\n\t\t\tnode = node.getParent();\n\t\t}\n\t\treturn depth;\n\t}\n\n\t/**\n\t * @return {?TreeNode} Parent node or null if it has no parent.\n\t */\n\tgetParent() {\n\t\treturn this.parent_;\n\t}\n\n\t/**\n\t * @return {!TreeNode} The root of the tree structure, i.e. the farthest\n\t * ancestor of the node or the node itself if it has no parents.\n\t */\n\tgetRoot() {\n\t\tlet root = this;\n\t\twhile (root.getParent()) {\n\t\t\troot = root.getParent();\n\t\t}\n\t\treturn root;\n\t}\n\n\t/**\n\t * Gets the value.\n\t * @return {V} The value.\n\t */\n\tgetValue() {\n\t\treturn this.value_;\n\t}\n\n\t/**\n\t * @return {boolean} Whether the node is a leaf node.\n\t */\n\tisLeaf() {\n\t\treturn !this.getChildCount();\n\t}\n\n\t/**\n\t * Removes the given child node of this node.\n\t * @param {TreeNode} child The node to remove.\n\t * @return {TreeNode} The removed node if any, null otherwise.\n\t */\n\tremoveChild(child) {\n\t\tif (array.remove(this.getChildren(), child)) {\n\t\t\treturn child;\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * Sets the parent node of this node. The callers must ensure that the\n\t * parent node and only that has this node among its children.\n\t * @param {TreeNode} parent The parent to set. If null, the node will be\n\t * detached from the tree.\n\t * @protected\n\t */\n\tsetParent(parent) {\n\t\tthis.parent_ = parent;\n\t}\n\n\t/**\n\t * Traverses the subtree. The first callback starts with this node,\n\t * and visits the descendant nodes depth-first, in preorder.\n\t * The second callback, starts with deepest child then visits\n\t * the ancestor nodes depth-first, in postorder. E.g.\n\t *\n\t *  \t A\n\t *    / \\\n\t *   B   C\n\t *  /   / \\\n\t * D   E   F\n\t *\n\t * preorder -> ['A', 'B', 'D', 'C', 'E', 'F']\n\t * postorder -> ['D', 'B', 'E', 'F', 'C', 'A']\n\t *\n\t * @param {function=} opt_preorderFn The callback to execute when visiting a node.\n\t * @param {function=} opt_postorderFn The callback to execute before leaving a node.\n\t */\n\ttraverse(opt_preorderFn, opt_postorderFn) {\n\t\tif (opt_preorderFn) {\n\t\t\topt_preorderFn(this);\n\t\t}\n\t\tthis.getChildren().forEach((child) => child.traverse(opt_preorderFn, opt_postorderFn));\n\t\tif (opt_postorderFn) {\n\t\t\topt_postorderFn(this);\n\t\t}\n\t}\n\n}\n\n/**\n * Constant for empty array to avoid unnecessary allocations.\n * @private\n */\nTreeNode.EMPTY_ARRAY = [];\n\n/**\n * Asserts that child has no parent.\n * @param {TreeNode} child A child.\n * @private\n */\nconst assertChildHasNoParent = function(child) {\n\tif (child.getParent()) {\n\t\tthrow new Error('Cannot add child with parent.');\n\t}\n};\n\nexport default TreeNode;\n","'use strict';\n\nimport { isDef, string } from 'metal';\nimport parse from './parse';\nimport { MultiMap } from 'metal-structs';\n\nvar parseFn_ = parse;\n\nclass Uri {\n\n\t/**\n\t * This class contains setters and getters for the parts of the URI.\n\t * The following figure displays an example URIs and their component parts.\n\t *\n\t *                                  path\n\t *\t                             ┌───┴────┐\n\t *\t  abc://example.com:123/path/data?key=value#fragid1\n\t *\t  └┬┘   └────┬────┘ └┬┘           └───┬───┘ └──┬──┘\n\t * protocol  hostname  port            search    hash\n\t *          └──────┬───────┘\n\t *                host\n\t *\n\t * @param {*=} opt_uri Optional string URI to parse\n\t * @constructor\n\t */\n\tconstructor(opt_uri = '') {\n\t\tthis.url = Uri.parse(this.maybeAddProtocolAndHostname_(opt_uri));\n\t}\n\n\t/**\n\t * Adds parameters to uri from a <code>MultiMap</code> as source.\n\t * @param {MultiMap} multimap The <code>MultiMap</code> containing the\n\t *   parameters.\n\t * @protected\n\t * @chainable\n\t */\n\taddParametersFromMultiMap(multimap) {\n\t\tmultimap.names().forEach((name) => {\n\t\t\tmultimap.getAll(name).forEach((value) => {\n\t\t\t\tthis.addParameterValue(name, value);\n\t\t\t});\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds the value of the named query parameters.\n\t * @param {string} key The parameter to set.\n\t * @param {*} value The new value. Will be explicitly casted to String.\n\t * @chainable\n\t */\n\taddParameterValue(name, value) {\n\t\tthis.ensureQueryInitialized_();\n\t\tif (isDef(value)) {\n\t\t\tvalue = String(value);\n\t\t}\n\t\tthis.query.add(name, value);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds the values of the named query parameter.\n\t * @param {string} key The parameter to set.\n\t * @param {*} value The new value.\n\t * @chainable\n\t */\n\taddParameterValues(name, values) {\n\t\tvalues.forEach((value) => this.addParameterValue(name, value));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Ensures query internal map is initialized and synced with initial value\n\t * extracted from URI search part.\n\t * @protected\n\t */\n\tensureQueryInitialized_() {\n\t\tif (this.query) {\n\t\t\treturn;\n\t\t}\n\t\tthis.query = new MultiMap();\n\t\tvar search = this.url.search;\n\t\tif (search) {\n\t\t\tsearch.substring(1).split('&').forEach((param) => {\n\t\t\t\tvar [key, value] = param.split('=');\n\t\t\t\tif (isDef(value)) {\n\t\t\t\t\tvalue = Uri.urlDecode(value);\n\t\t\t\t}\n\t\t\t\tthis.addParameterValue(key, value);\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Gets the hash part of uri.\n\t * @return {string}\n\t */\n\tgetHash() {\n\t\treturn this.url.hash || '';\n\t}\n\n\t/**\n\t * Gets the host part of uri. E.g. <code>[hostname]:[port]</code>.\n\t * @return {string}\n\t */\n\tgetHost() {\n\t\tvar host = this.getHostname();\n\t\tif (host) {\n\t\t\tvar port = this.getPort();\n\t\t\tif (port && port !== '80') {\n\t\t\t\thost += ':' + port;\n\t\t\t}\n\t\t}\n\t\treturn host;\n\t}\n\n\t/**\n\t * Gets the hostname part of uri without protocol and port.\n\t * @return {string}\n\t */\n\tgetHostname() {\n\t\tvar hostname = this.url.hostname;\n\t\tif (hostname === Uri.HOSTNAME_PLACEHOLDER) {\n\t\t\treturn '';\n\t\t}\n\t\treturn hostname;\n\t}\n\n\t/**\n\t * Gets the origin part of uri. E.g. <code>http://[hostname]:[port]</code>.\n\t * @return {string}\n\t */\n\tgetOrigin() {\n\t\tvar host = this.getHost();\n\t\tif (host) {\n\t\t\treturn this.getProtocol() + '//' + host;\n\t\t}\n\t\treturn '';\n\t}\n\n\t/**\n\t * Returns the first value for a given parameter or undefined if the given\n\t * parameter name does not appear in the query string.\n\t * @param {string} paramName Unescaped parameter name.\n\t * @return {string|undefined} The first value for a given parameter or\n\t *   undefined if the given parameter name does not appear in the query\n\t *   string.\n\t */\n\tgetParameterValue(name) {\n\t\tthis.ensureQueryInitialized_();\n\t\treturn this.query.get(name);\n\t}\n\n\t/**\n\t * Returns the value<b>s</b> for a given parameter as a list of decoded\n\t * query parameter values.\n\t * @param {string} name The parameter to get values for.\n\t * @return {!Array<?>} The values for a given parameter as a list of decoded\n\t *   query parameter values.\n\t */\n\tgetParameterValues(name) {\n\t\tthis.ensureQueryInitialized_();\n\t\treturn this.query.getAll(name);\n\t}\n\n\t/**\n\t * Returns the name<b>s</b> of the parameters.\n\t * @return {!Array<string>} The names for the parameters as a list of\n\t *   strings.\n\t */\n\tgetParameterNames() {\n\t\tthis.ensureQueryInitialized_();\n\t\treturn this.query.names();\n\t}\n\n\t/**\n\t * Gets the function currently being used to parse URIs.\n\t * @return {!function()}\n\t */\n\tstatic getParseFn() {\n\t\treturn parseFn_;\n\t}\n\n\t/**\n\t * Gets the pathname part of uri.\n\t * @return {string}\n\t */\n\tgetPathname() {\n\t\treturn this.url.pathname;\n\t}\n\n\t/**\n\t * Gets the port number part of uri as string.\n\t * @return {string}\n\t */\n\tgetPort() {\n\t\treturn this.url.port;\n\t}\n\n\t/**\n\t * Gets the protocol part of uri. E.g. <code>http:</code>.\n\t * @return {string}\n\t */\n\tgetProtocol() {\n\t\treturn this.url.protocol;\n\t}\n\n\t/**\n\t * Gets the search part of uri. Search value is retrieved from query\n\t * parameters.\n\t * @return {string}\n\t */\n\tgetSearch() {\n\t\tvar search = '';\n\t\tvar querystring = '';\n\t\tthis.getParameterNames().forEach((name) => {\n\t\t\tthis.getParameterValues(name).forEach((value) => {\n\t\t\t\tquerystring += name;\n\t\t\t\tif (isDef(value)) {\n\t\t\t\t\tquerystring += '=' + encodeURIComponent(value);\n\t\t\t\t}\n\t\t\t\tquerystring += '&';\n\t\t\t});\n\t\t});\n\t\tquerystring = querystring.slice(0, -1);\n\t\tif (querystring) {\n\t\t\tsearch += '?' + querystring;\n\t\t}\n\t\treturn search;\n\t}\n\n\t/**\n\t * Checks if uri contains the parameter.\n\t * @param {string} name\n\t * @return {boolean}\n\t */\n\thasParameter(name) {\n\t\tthis.ensureQueryInitialized_();\n\t\treturn this.query.contains(name);\n\t}\n\n\t/**\n\t * Makes this URL unique by adding a random param to it. Useful for avoiding\n\t * cache.\n\t */\n\tmakeUnique() {\n\t\tthis.setParameterValue(Uri.RANDOM_PARAM, string.getRandomString());\n\t\treturn this;\n\t}\n\n\t/**\n\t * Maybe adds protocol and a hostname placeholder on a parial URI if needed.\n\t * Relevent for compatibility with <code>URL</code> native object.\n\t * @param {string=} opt_uri\n\t * @return {string} URI with protocol and hostname placeholder.\n\t */\n\tmaybeAddProtocolAndHostname_(opt_uri) {\n\t\tvar url = opt_uri;\n\t\tif (opt_uri.indexOf('://') === -1 &&\n\t\t\topt_uri.indexOf('javascript:') !== 0) { // jshint ignore:line\n\n\t\t\turl = Uri.DEFAULT_PROTOCOL;\n\t\t\tif (opt_uri[0] !== '/' || opt_uri[1] !== '/') {\n\t\t\t\turl += '//';\n\t\t\t}\n\n\t\t\tswitch (opt_uri.charAt(0)) {\n\t\t\t\tcase '.':\n\t\t\t\tcase '?':\n\t\t\t\tcase '#':\n\t\t\t\t\turl += Uri.HOSTNAME_PLACEHOLDER;\n\t\t\t\t\turl += '/';\n\t\t\t\t\turl += opt_uri;\n\t\t\t\t\tbreak;\n\t\t\t\tcase '':\n\t\t\t\tcase '/':\n\t\t\t\t\tif (opt_uri[1] !== '/') {\n\t\t\t\t\t\turl += Uri.HOSTNAME_PLACEHOLDER;\n\t\t\t\t\t}\n\t\t\t\t\turl += opt_uri;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\turl += opt_uri;\n\t\t\t}\n\t\t}\n\t\treturn url;\n\t}\n\n\t/**\n\t * Normalizes the parsed object to be in the expected standard.\n\t * @param {!Object}\n\t */\n\tstatic normalizeObject(parsed) {\n\t\tvar length = parsed.pathname ? parsed.pathname.length : 0;\n\t\tif (length > 1 && parsed.pathname[length - 1] === '/') {\n\t\t\tparsed.pathname = parsed.pathname.substr(0, length - 1);\n\t\t}\n\t\treturn parsed;\n\t}\n\n\t/**\n\t * Parses the given uri string into an object.\n\t * @param {*=} opt_uri Optional string URI to parse\n\t */\n\tstatic parse(opt_uri) {\n\t\treturn Uri.normalizeObject(parseFn_(opt_uri));\n\t}\n\n\t/**\n\t * Removes the named query parameter.\n\t * @param {string} name The parameter to remove.\n\t * @chainable\n\t */\n\tremoveParameter(name) {\n\t\tthis.ensureQueryInitialized_();\n\t\tthis.query.remove(name);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Removes uniqueness parameter of the uri.\n\t * @chainable\n\t */\n\tremoveUnique() {\n\t\tthis.removeParameter(Uri.RANDOM_PARAM);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the hash.\n\t * @param {string} hash\n\t * @chainable\n\t */\n\tsetHash(hash) {\n\t\tthis.url.hash = hash;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the hostname.\n\t * @param {string} hostname\n\t * @chainable\n\t */\n\tsetHostname(hostname) {\n\t\tthis.url.hostname = hostname;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the value of the named query parameters, clearing previous values\n\t * for that key.\n\t * @param {string} key The parameter to set.\n\t * @param {*} value The new value.\n\t * @chainable\n\t */\n\tsetParameterValue(name, value) {\n\t\tthis.removeParameter(name);\n\t\tthis.addParameterValue(name, value);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the values of the named query parameters, clearing previous values\n\t * for that key.\n\t * @param {string} key The parameter to set.\n\t * @param {*} value The new value.\n\t * @chainable\n\t */\n\tsetParameterValues(name, values) {\n\t\tthis.removeParameter(name);\n\t\tvalues.forEach((value) => this.addParameterValue(name, value));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the pathname.\n\t * @param {string} pathname\n\t * @chainable\n\t */\n\tsetPathname(pathname) {\n\t\tthis.url.pathname = pathname;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the port number.\n\t * @param {*} port Port number.\n\t * @chainable\n\t */\n\tsetPort(port) {\n\t\tthis.url.port = port;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the function that will be used for parsing the original string uri\n\t * into an object.\n\t * @param {!function()} parseFn\n\t */\n\tstatic setParseFn(parseFn) {\n\t\tparseFn_ = parseFn;\n\t}\n\n\t/**\n\t * Sets the protocol. If missing <code>http:</code> is used as default.\n\t * @param {string} protocol\n\t * @chainable\n\t */\n\tsetProtocol(protocol) {\n\t\tthis.url.protocol = protocol;\n\t\tif (this.url.protocol[this.url.protocol.length - 1] !== ':') {\n\t\t\tthis.url.protocol += ':';\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * @return {string} The string form of the url.\n\t * @override\n\t */\n\ttoString() {\n\t\tvar href = '';\n\t\tvar host = this.getHost();\n\t\tif (host) {\n\t\t\thref += this.getProtocol() + '//';\n\t\t}\n\t\thref += host + this.getPathname() + this.getSearch() + this.getHash();\n\t\treturn href;\n\t}\n\n\t/**\n\t * Joins the given paths.\n\t * @param {string} basePath\n\t * @param {...string} ...paths Any number of paths to be joined with the base url.\n\t * @static\n\t */\n\tstatic joinPaths(basePath, ...paths) {\n\t\tif (basePath.charAt(basePath.length - 1) === '/') {\n\t\t\tbasePath = basePath.substring(0, basePath.length - 1);\n\t\t}\n\t\tpaths = paths.map(path => path.charAt(0) === '/' ? path.substring(1) : path);\n\t\treturn [basePath].concat(paths).join('/').replace(/\\/$/, '');\n\t}\n\n\t/**\n\t * URL-decodes the string. We need to specially handle '+'s because\n\t * the javascript library doesn't convert them to spaces.\n\t * @param {string} str The string to url decode.\n\t * @return {string} The decoded {@code str}.\n\t */\n\tstatic urlDecode(str) {\n\t\treturn decodeURIComponent(str.replace(/\\+/g, ' '));\n\t}\n\n}\n\n/**\n * Default protocol value.\n * @type {string}\n * @default http:\n * @static\n */\nUri.DEFAULT_PROTOCOL = 'http:';\n\n/**\n * Hostname placeholder. Relevant to internal usage only.\n * @type {string}\n * @static\n */\nUri.HOSTNAME_PLACEHOLDER = 'hostname' + Date.now();\n\n/**\n * Name used by the param generated by `makeUnique`.\n * @type {string}\n * @static\n */\nUri.RANDOM_PARAM = 'zx';\n\nexport default Uri;\n","'use strict';\n\nimport globals from '../globals/globals';\nimport Uri from 'metal-uri';\n\n/**\n * A collection of static utility functions.\n * @const\n */\nclass utils {\n\n\t/**\n\t * Copies attributes form source node to target node.\n\t * @return {void}\n\t * @static\n\t */\n\tstatic copyNodeAttributes(source, target) {\n\t\tArray.prototype.slice.call(source.attributes).forEach((attribute) => target.setAttribute(attribute.name, attribute.value));\n\t}\n\n\t/**\n\t * Gets the current browser path including hashbang.\n\t * @return {!string}\n\t * @static\n\t */\n\tstatic getCurrentBrowserPath() {\n\t\treturn this.getCurrentBrowserPathWithoutHash() + globals.window.location.hash;\n\t}\n\n\t/**\n\t * Gets the current browser path excluding hashbang.\n\t * @return {!string}\n\t * @static\n\t */\n\tstatic getCurrentBrowserPathWithoutHash() {\n\t\treturn globals.window.location.pathname + globals.window.location.search;\n\t}\n\n\t/**\n\t * Gets the given node offset coordinates.\n\t * @return {!object}\n\t * @static\n\t */\n\tstatic getNodeOffset(node) {\n\t\tlet [offsetLeft, offsetTop] = [0, 0];\n\t\tdo {\n\t\t\toffsetLeft += node.offsetLeft;\n\t\t\toffsetTop += node.offsetTop;\n\t\t\tnode = node.offsetParent;\n\t\t} while (node);\n\t\treturn {\n\t\t\toffsetLeft,\n\t\t\toffsetTop\n\t\t};\n\t}\n\n\t/**\n\t * Extracts the path part of an url.\n\t * @return {!string}\n\t * @static\n\t */\n\tstatic getUrlPath(url) {\n\t\tvar uri = new Uri(url);\n\t\treturn uri.getPathname() + uri.getSearch() + uri.getHash();\n\t}\n\n\t/**\n\t * Extracts the path part of an url without hashbang.\n\t * @return {!string}\n\t * @static\n\t */\n\tstatic getUrlPathWithoutHash(url) {\n\t\tvar uri = new Uri(url);\n\t\treturn uri.getPathname() + uri.getSearch();\n\t}\n\n\t/**\n\t * Extracts the path part of an url without hashbang and query search.\n\t * @return {!string}\n\t * @static\n\t */\n\tstatic getUrlPathWithoutHashAndSearch(url) {\n\t\tvar uri = new Uri(url);\n\t\treturn uri.getPathname();\n\t}\n\n\t/**\n\t * Checks if url is in the same browser current url excluding the hashbang.\n\t * @param  {!string} url\n\t * @return {boolean}\n\t * @static\n\t */\n\tstatic isCurrentBrowserPath(url) {\n\t\tif (url) {\n\t\t\tconst currentBrowserPath = this.getCurrentBrowserPathWithoutHash();\n\t\t\t// the getUrlPath will create a Uri and will normalize the path and\n\t\t\t// remove the trailling '/' for properly comparing paths.\n\t\t\treturn utils.getUrlPathWithoutHash(url) === this.getUrlPath(currentBrowserPath);\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Returns true if HTML5 History api is supported.\n\t * @return {boolean}\n\t * @static\n\t */\n\tstatic isHtml5HistorySupported() {\n\t\treturn !!(globals.window.history && globals.window.history.pushState);\n\t}\n\n\t/**\n\t * Checks if a given url is a valid http(s) uri and returns the formed Uri\n\t * or false if the parsing failed\n\t * @return {Uri|boolean}\n\t * @static\n\t */\n\tstatic isWebUri(url) {\n\t\ttry {\n\t\t\treturn new Uri(url);\n\t\t} catch (err) {\n\t\t\tconsole.error(`${err.message} ${url}`);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Removes all attributes form node.\n\t * @return {void}\n\t * @static\n\t */\n\tstatic clearNodeAttributes(node) {\n\t\tArray.prototype.slice.call(node.attributes).forEach((attribute) => node.removeAttribute(attribute.name));\n\t}\n\n\t/**\n\t* Removes trailing slash in path.\n\t* @param {!string}\n\t* @return {string}\n\t*/\n\tstatic removePathTrailingSlash(path) {\n\t\tvar length = path ? path.length : 0;\n\t\tif (length > 1 && path[length - 1] === '/') {\n\t\t\tpath = path.substr(0, length - 1);\n\t\t}\n\t\treturn path;\n\t}\n}\n\nexport default utils;\n","'use strict';\n\nexport default {\n\tbasePath: 'data-senna-base-path',\n\tlinkSelector: 'data-senna-link-selector',\n\tloadingCssClass: 'data-senna-loading-css-class',\n\tsenna: 'data-senna',\n\tdispatch: 'data-senna-dispatch',\n\tsurface: 'data-senna-surface',\n\tupdateScrollPosition: 'data-senna-update-scroll-position'\n};","'use strict';\n\nconst METAL_DATA = '__metal_data__';\n\nclass domData {\n\t/**\n\t * Gets Metal.js's data for the given element.\n\t * @param {!Element} element\n\t * @param {string=} opt_name Optional property from the data to be returned.\n\t * @param {*} opt_initialVal Optinal value to the set the requested property\n\t *     to if it doesn't exist yet in the data.\n\t * @return {!Object}\n\t */\n\tstatic get(element, opt_name, opt_initialVal) {\n\t\tif (!element[METAL_DATA]) {\n\t\t\telement[METAL_DATA] = {};\n\t\t}\n\t\tif (!opt_name) {\n\t\t\treturn element[METAL_DATA];\n\t\t}\n\t\tif (!element[METAL_DATA][opt_name] && opt_initialVal) {\n\t\t\telement[METAL_DATA][opt_name] = opt_initialVal;\n\t\t}\n\t\treturn element[METAL_DATA][opt_name];\n\t}\n\n\t/**\n\t * Checks if the given element has data stored in it.\n\t * @param {!Element} element\n\t * @return {boolean}\n\t */\n\tstatic has(element) {\n\t\treturn !!element[METAL_DATA];\n\t}\n}\n\nexport default domData;\n","'use strict';\n\nimport { Disposable } from 'metal';\n\n/**\n * EventHandle utility. Holds information about an event subscription, and\n * allows removing them easily.\n * EventHandle is a Disposable, but it's important to note that the\n * EventEmitter that created it is not the one responsible for disposing it.\n * That responsibility is for the code that holds a reference to it.\n * @param {!EventEmitter} emitter Emitter the event was subscribed to.\n * @param {string} event The name of the event that was subscribed to.\n * @param {!Function} listener The listener subscribed to the event.\n * @constructor\n * @extends {Disposable}\n */\nclass EventHandle extends Disposable {\n\tconstructor(emitter, event, listener) {\n\t\tsuper();\n\n\t\t/**\n\t\t * The EventEmitter instance that the event was subscribed to.\n\t\t * @type {EventEmitter}\n\t\t * @protected\n\t\t */\n\t\tthis.emitter_ = emitter;\n\n\t\t/**\n\t\t * The name of the event that was subscribed to.\n\t\t * @type {string}\n\t\t * @protected\n\t\t */\n\t\tthis.event_ = event;\n\n\t\t/**\n\t\t * The listener subscribed to the event.\n\t\t * @type {Function}\n\t\t * @protected\n\t\t */\n\t\tthis.listener_ = listener;\n\t}\n\n\t/**\n\t * Disposes of this instance's object references.\n\t * @override\n\t */\n\tdisposeInternal() {\n\t\tthis.removeListener();\n\t\tthis.emitter_ = null;\n\t\tthis.listener_ = null;\n\t}\n\n\t/**\n\t * Removes the listener subscription from the emitter.\n\t */\n\tremoveListener() {\n\t\tif (!this.emitter_.isDisposed()) {\n\t\t\tthis.emitter_.removeListener(this.event_, this.listener_);\n\t\t}\n\t}\n}\n\nexport default EventHandle;\n","'use strict';\n\nimport { array, Disposable, isFunction, isString } from 'metal';\nimport EventHandle from './EventHandle';\n\nconst singleArray_ = [0];\n\n/**\n * EventEmitter utility.\n * @constructor\n * @extends {Disposable}\n */\nclass EventEmitter extends Disposable {\n\tconstructor() {\n\t\tsuper();\n\n\t\t/**\n\t\t * Holds event listeners scoped by event type.\n\t\t * @type {Object<string, !Array<!function()>>}\n\t\t * @protected\n\t\t */\n\t\tthis.events_ = null;\n\n\t\t/**\n\t\t * Handlers that are triggered when an event is listened to.\n\t\t * @type {Array}\n\t\t */\n\t\tthis.listenerHandlers_ = null;\n\n\t\t/**\n\t\t * Configuration option which determines if an event facade should be sent\n\t\t * as a param of listeners when emitting events. If set to true, the facade\n\t\t * will be passed as the first argument of the listener.\n\t\t * @type {boolean}\n\t\t * @protected\n\t\t */\n\t\tthis.shouldUseFacade_ = false;\n\t}\n\n\t/**\n\t * Adds a handler to given holder variable. If the holder doesn't have a\n\t * value yet, it will receive the handler directly. If the holder is an array,\n\t * the value will just be added to it. Otherwise, the holder will be set to a\n\t * new array containing its previous value plus the new handler.\n\t * @param {*} holder\n\t * @param {!function()|Object} handler\n\t * @return {*} The holder's new value.\n\t * @protected\n\t */\n\taddHandler_(holder, handler) {\n\t\tif (!holder) {\n\t\t\tholder = handler;\n\t\t} else {\n\t\t\tif (!Array.isArray(holder)) {\n\t\t\t\tholder = [holder];\n\t\t\t}\n\t\t\tholder.push(handler);\n\t\t}\n\t\treturn holder;\n\t}\n\n\t/**\n\t * Adds a listener to the end of the listeners array for the specified events.\n\t * @param {!(Array|string)} event\n\t * @param {!Function} listener\n\t * @param {boolean} opt_default Flag indicating if this listener is a default\n\t *   action for this event. Default actions are run last, and only if no previous\n\t *   listener call `preventDefault()` on the received event facade.\n\t * @return {!EventHandle} Can be used to remove the listener.\n\t */\n\taddListener(event, listener, opt_default) {\n\t\tthis.validateListener_(listener);\n\n\t\tconst events = this.toEventsArray_(event);\n\t\tfor (let i = 0; i < events.length; i++) {\n\t\t\tthis.addSingleListener_(events[i], listener, opt_default);\n\t\t}\n\n\t\treturn new EventHandle(this, event, listener);\n\t}\n\n\t/**\n\t * Adds a listener to the end of the listeners array for a single event.\n\t * @param {string} event\n\t * @param {!Function} listener\n\t * @param {boolean} opt_default Flag indicating if this listener is a default\n\t *   action for this event. Default actions are run last, and only if no previous\n\t *   listener call `preventDefault()` on the received event facade.\n\t * @return {!EventHandle} Can be used to remove the listener.\n\t * @param {Function=} opt_origin The original function that was added as a\n\t *   listener, if there is any.\n\t * @protected\n\t */\n\taddSingleListener_(event, listener, opt_default, opt_origin) {\n\t\tthis.runListenerHandlers_(event);\n\t\tif (opt_default || opt_origin) {\n\t\t\tlistener = {\n\t\t\t\tdefault: opt_default,\n\t\t\t\tfn: listener,\n\t\t\t\torigin: opt_origin\n\t\t\t};\n\t\t}\n\t\tthis.events_ = this.events_ || {};\n\t\tthis.events_[event] = this.addHandler_(this.events_[event], listener);\n\t}\n\n\t/**\n\t * Builds facade for the given event.\n\t * @param {string} event\n\t * @return {Object}\n\t * @protected\n\t */\n\tbuildFacade_(event) {\n\t\tif (this.getShouldUseFacade()) {\n\t\t\tconst facade = {\n\t\t\t\tpreventDefault: function() {\n\t\t\t\t\tfacade.preventedDefault = true;\n\t\t\t\t},\n\t\t\t\ttarget: this,\n\t\t\t\ttype: event\n\t\t\t};\n\t\t\treturn facade;\n\t\t}\n\t}\n\n\t/**\n\t * Disposes of this instance's object references.\n\t * @override\n\t */\n\tdisposeInternal() {\n\t\tthis.events_ = null;\n\t}\n\n\t/**\n\t * Execute each of the listeners in order with the supplied arguments.\n\t * @param {string} event\n\t * @param {*} opt_args [arg1], [arg2], [...]\n\t * @return {boolean} Returns true if event had listeners, false otherwise.\n\t */\n\temit(event) {\n\t\tconst listeners = this.getRawListeners_(event);\n\t\tif (listeners.length === 0) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst args = array.slice(arguments, 1);\n\t\tthis.runListeners_(listeners, args, this.buildFacade_(event));\n\t\treturn true;\n\t}\n\n\t/**\n\t * Gets the listener objects for the given event, if there are any.\n\t * @param {string} event\n\t * @return {!Array}\n\t * @protected\n\t */\n\tgetRawListeners_(event) {\n\t\tconst directListeners = toArray(this.events_ && this.events_[event]);\n\t\treturn directListeners.concat(toArray(this.events_ && this.events_['*']));\n\t}\n\n\t/**\n\t * Gets the configuration option which determines if an event facade should\n\t * be sent as a param of listeners when emitting events. If set to true, the\n\t * facade will be passed as the first argument of the listener.\n\t * @return {boolean}\n\t */\n\tgetShouldUseFacade() {\n\t\treturn this.shouldUseFacade_;\n\t}\n\n\t/**\n\t * Returns an array of listeners for the specified event.\n\t * @param {string} event\n\t * @return {Array} Array of listeners.\n\t */\n\tlisteners(event) {\n\t\treturn this.getRawListeners_(event).map(\n\t\t\tlistener => listener.fn ? listener.fn : listener\n\t\t);\n\t}\n\n\t/**\n\t * Adds a listener that will be invoked a fixed number of times for the\n\t * events. After each event is triggered the specified amount of times, the\n\t * listener is removed for it.\n\t * @param {!(Array|string)} event\n\t * @param {number} amount The amount of times this event should be listened\n\t * to.\n\t * @param {!Function} listener\n\t * @return {!EventHandle} Can be used to remove the listener.\n\t */\n\tmany(event, amount, listener) {\n\t\tconst events = this.toEventsArray_(event);\n\t\tfor (let i = 0; i < events.length; i++) {\n\t\t\tthis.many_(events[i], amount, listener);\n\t\t}\n\n\t\treturn new EventHandle(this, event, listener);\n\t}\n\n\t/**\n\t * Adds a listener that will be invoked a fixed number of times for a single\n\t * event. After the event is triggered the specified amount of times, the\n\t * listener is removed.\n\t * @param {string} event\n\t * @param {number} amount The amount of times this event should be listened\n\t * to.\n\t * @param {!Function} listener\n\t * @protected\n\t */\n\tmany_(event, amount, listener) {\n\t\tconst self = this;\n\n\t\tif (amount <= 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tfunction handlerInternal() {\n\t\t\tif (--amount === 0) {\n\t\t\t\tself.removeListener(event, handlerInternal);\n\t\t\t}\n\t\t\tlistener.apply(self, arguments);\n\t\t}\n\n\t\tself.addSingleListener_(event, handlerInternal, false, listener);\n\t}\n\n\t/**\n\t * Checks if a listener object matches the given listener function. To match,\n\t * it needs to either point to that listener or have it as its origin.\n\t * @param {!Object} listenerObj\n\t * @param {!Function} listener\n\t * @return {boolean}\n\t * @protected\n\t */\n\tmatchesListener_(listenerObj, listener) {\n\t\tconst fn = listenerObj.fn || listenerObj;\n\t\treturn fn === listener ||\n\t\t\t(listenerObj.origin && listenerObj.origin === listener);\n\t}\n\n\t/**\n\t * Removes a listener for the specified events.\n\t * Caution: changes array indices in the listener array behind the listener.\n\t * @param {!(Array|string)} events\n\t * @param {!Function} listener\n\t * @return {!Object} Returns emitter, so calls can be chained.\n\t */\n\toff(event, listener) {\n\t\tthis.validateListener_(listener);\n\t\tif (!this.events_) {\n\t\t\treturn this;\n\t\t}\n\n\t\tconst events = this.toEventsArray_(event);\n\t\tfor (let i = 0; i < events.length; i++) {\n\t\t\tthis.events_[events[i]] = this.removeMatchingListenerObjs_(\n\t\t\t\ttoArray(this.events_[events[i]]),\n\t\t\t\tlistener\n\t\t\t);\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds a listener to the end of the listeners array for the specified events.\n\t * @param {!(Array|string)} events\n\t * @param {!Function} listener\n\t * @return {!EventHandle} Can be used to remove the listener.\n\t */\n\ton() {\n\t\treturn this.addListener.apply(this, arguments);\n\t}\n\n\t/**\n\t * Adds handler that gets triggered when an event is listened to on this\n\t * instance.\n\t * @param {!function()}\n\t */\n\tonListener(handler) {\n\t\tthis.listenerHandlers_ = this.addHandler_(this.listenerHandlers_, handler);\n\t}\n\n\t/**\n\t * Adds a one time listener for the events. This listener is invoked only the\n\t * next time each event is fired, after which it is removed.\n\t * @param {!(Array|string)} events\n\t * @param {!Function} listener\n\t * @return {!EventHandle} Can be used to remove the listener.\n\t */\n\tonce(events, listener) {\n\t\treturn this.many(events, 1, listener);\n\t}\n\n\t/**\n\t * Removes all listeners, or those of the specified events. It's not a good\n\t * idea to remove listeners that were added elsewhere in the code,\n\t * especially when it's on an emitter that you didn't create.\n\t * @param {(Array|string)=} opt_events\n\t * @return {!Object} Returns emitter, so calls can be chained.\n\t */\n\tremoveAllListeners(opt_events) {\n\t\tif (this.events_) {\n\t\t\tif (opt_events) {\n\t\t\t\tconst events = this.toEventsArray_(opt_events);\n\t\t\t\tfor (let i = 0; i < events.length; i++) {\n\t\t\t\t\tthis.events_[events[i]] = null;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.events_ = null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Removes all listener objects from the given array that match the given\n\t * listener function.\n\t * @param {Array.<Object>} listenerObjs\n\t * @param {!Function} listener\n\t * @return {Array.<Object>|Object} The new listeners array for this event.\n\t * @protected\n\t */\n\tremoveMatchingListenerObjs_(listenerObjs, listener) {\n\t\tconst finalListeners = [];\n\t\tfor (let i = 0; i < listenerObjs.length; i++) {\n\t\t\tif (!this.matchesListener_(listenerObjs[i], listener)) {\n\t\t\t\tfinalListeners.push(listenerObjs[i]);\n\t\t\t}\n\t\t}\n\t\treturn finalListeners.length > 0 ? finalListeners : null;\n\t}\n\n\t/**\n\t * Removes a listener for the specified events.\n\t * Caution: changes array indices in the listener array behind the listener.\n\t * @param {!(Array|string)} events\n\t * @param {!Function} listener\n\t * @return {!Object} Returns emitter, so calls can be chained.\n\t */\n\tremoveListener() {\n\t\treturn this.off.apply(this, arguments);\n\t}\n\n\t/**\n\t * Runs the handlers when an event is listened to.\n\t * @param {string} event\n\t * @protected\n\t */\n\trunListenerHandlers_(event) {\n\t\tlet handlers = this.listenerHandlers_;\n\t\tif (handlers) {\n\t\t\thandlers = toArray(handlers);\n\t\t\tfor (let i = 0; i < handlers.length; i++) {\n\t\t\t\thandlers[i](event);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Runs the given listeners.\n\t * @param {!Array} listeners\n\t * @param {!Array} args\n\t * @param (Object) facade\n\t * @protected\n\t */\n\trunListeners_(listeners, args, facade) {\n\t\tif (facade) {\n\t\t\targs.push(facade);\n\t\t}\n\n\t\tconst defaultListeners = [];\n\t\tfor (let i = 0; i < listeners.length; i++) {\n\t\t\tconst listener = listeners[i].fn || listeners[i];\n\t\t\tif (listeners[i].default) {\n\t\t\t\tdefaultListeners.push(listener);\n\t\t\t} else {\n\t\t\t\tlistener.apply(this, args);\n\t\t\t}\n\t\t}\n\t\tif (!facade || !facade.preventedDefault) {\n\t\t\tfor (let j = 0; j < defaultListeners.length; j++) {\n\t\t\t\tdefaultListeners[j].apply(this, args);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Sets the configuration option which determines if an event facade should\n\t * be sent as a param of listeners when emitting events. If set to true, the\n\t * facade will be passed as the first argument of the listener.\n\t * @param {boolean} shouldUseFacade\n\t * @return {!Object} Returns emitter, so calls can be chained.\n\t */\n\tsetShouldUseFacade(shouldUseFacade) {\n\t\tthis.shouldUseFacade_ = shouldUseFacade;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Converts the parameter to an array if only one event is given. Reuses the\n\t * same array each time this conversion is done, to avoid using more memory\n\t * than necessary.\n\t * @param  {!(Array|string)} events\n\t * @return {!Array}\n\t * @protected\n\t */\n\ttoEventsArray_(events) {\n\t\tif (isString(events)) {\n\t\t\tsingleArray_[0] = events;\n\t\t\tevents = singleArray_;\n\t\t}\n\t\treturn events;\n\t}\n\n\t/**\n\t * Checks if the given listener is valid, throwing an exception when it's not.\n\t * @param  {*} listener\n\t * @protected\n\t */\n\tvalidateListener_(listener) {\n\t\tif (!isFunction(listener)) {\n\t\t\tthrow new TypeError('Listener must be a function');\n\t\t}\n\t}\n}\n\nfunction toArray(val) {\n\tval = val || [];\n\treturn Array.isArray(val) ? val : [val];\n}\n\nexport default EventEmitter;\n","'use strict';\n\nimport { Disposable } from 'metal';\n\n/**\n * EventEmitterProxy utility. It's responsible for linking two EventEmitter\n * instances together, emitting events from the first emitter through the\n * second one. That means that listening to a supported event on the target\n * emitter will mean listening to it on the origin emitter as well.\n * @param {EventEmitter} originEmitter Events originated on this emitter\n *   will be fired for the target emitter's listeners as well.\n * @param {EventEmitter} targetEmitter Event listeners attached to this emitter\n *   will also be triggered when the event is fired by the origin emitter.\n * @param {Object} opt_blacklist Optional blacklist of events that should not be\n *   proxied.\n * @constructor\n * @extends {Disposable}\n */\nclass EventEmitterProxy extends Disposable {\n\tconstructor(originEmitter, targetEmitter, opt_blacklist, opt_whitelist) {\n\t\tsuper();\n\n\t\t/**\n\t\t * Map of events that should not be proxied.\n\t\t * @type {Object}\n\t\t * @protected\n\t\t */\n\t\tthis.blacklist_ = opt_blacklist;\n\n\t\t/**\n\t\t * The origin emitter. This emitter's events will be proxied through the\n\t\t * target emitter.\n\t\t * @type {EventEmitter}\n\t\t * @protected\n\t\t */\n\t\tthis.originEmitter_ = originEmitter;\n\n\t\t/**\n\t\t * A list of events that are pending to be listened by an actual origin\n\t\t * emitter. Events are stored here when the origin doesn't exist, so they\n\t\t * can be set on a new origin when one is set.\n\t\t * @type {Array}\n\t\t * @protected\n\t\t */\n\t\tthis.pendingEvents_ = null;\n\n\t\t/**\n\t\t * Holds a map of events from the origin emitter that are already being proxied.\n\t\t * @type {Object<string, !EventHandle>}\n\t\t * @protected\n\t\t */\n\t\tthis.proxiedEvents_ = null;\n\n\t\t/**\n\t\t * The target emitter. This emitter will emit all events that come from\n\t\t * the origin emitter.\n\t\t * @type {EventEmitter}\n\t\t * @protected\n\t\t */\n\t\tthis.targetEmitter_ = targetEmitter;\n\n\t\t/**\n\t\t * Map of events that should be proxied. If whitelist is set blacklist is ignored.\n\t\t * @type {Object}\n\t\t * @protected\n\t\t */\n\t\tthis.whitelist_ = opt_whitelist;\n\n\t\tthis.startProxy_();\n\t}\n\n\t/**\n\t * Adds the given listener for the given event.\n\t * @param {string} event\n\t * @param {!function()} listener\n\t * @return {!EventHandle} The listened event's handle.\n\t * @protected\n\t */\n\taddListener_(event, listener) {\n\t\treturn this.originEmitter_.on(event, listener);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdisposeInternal() {\n\t\tthis.removeListeners_();\n\t\tthis.proxiedEvents_ = null;\n\t\tthis.originEmitter_ = null;\n\t\tthis.targetEmitter_ = null;\n\t}\n\n\t/**\n\t * Emits the specified event type on the target emitter.\n\t * @protected\n\t */\n\temitOnTarget_() {\n\t\tthis.targetEmitter_.emit.apply(this.targetEmitter_, arguments);\n\t}\n\n\t/**\n\t * Proxies the given event from the origin to the target emitter.\n\t * @param {string} event\n\t */\n\tproxyEvent(event) {\n\t\tif (this.shouldProxyEvent_(event)) {\n\t\t\tthis.tryToAddListener_(event);\n\t\t}\n\t}\n\n\t/**\n\t * Removes the proxy listener for all events.\n\t * @protected\n\t */\n\tremoveListeners_() {\n\t\tif (this.proxiedEvents_) {\n\t\t\tconst events = Object.keys(this.proxiedEvents_);\n\t\t\tfor (let i = 0; i < events.length; i++) {\n\t\t\t\tthis.proxiedEvents_[events[i]].removeListener();\n\t\t\t}\n\t\t\tthis.proxiedEvents_ = null;\n\t\t}\n\t\tthis.pendingEvents_ = null;\n\t}\n\n\t/**\n\t * Changes the origin emitter. This automatically detaches any events that\n\t * were already being proxied from the previous emitter, and starts proxying\n\t * them on the new emitter instead.\n\t * @param {!EventEmitter} originEmitter\n\t */\n\tsetOriginEmitter(originEmitter) {\n\t\tconst events = this.originEmitter_ && this.proxiedEvents_ ?\n\t\t\tObject.keys(this.proxiedEvents_) :\n\t\t\tthis.pendingEvents_;\n\t\tthis.originEmitter_ = originEmitter;\n\t\tif (events) {\n\t\t\tthis.removeListeners_();\n\t\t\tevents.forEach(event => this.proxyEvent(event));\n\t\t}\n\t}\n\n\t/**\n\t * Checks if the given event should be proxied.\n\t * @param {string} event\n\t * @return {boolean}\n\t * @protected\n\t */\n\tshouldProxyEvent_(event) {\n\t\tif (this.whitelist_ && !this.whitelist_[event]) {\n\t\t\treturn false;\n\t\t}\n\t\tif (this.blacklist_ && this.blacklist_[event]) {\n\t\t\treturn false;\n\t\t}\n\t\treturn !this.proxiedEvents_ || !this.proxiedEvents_[event];\n\t}\n\n\t/**\n\t * Starts proxying all events from the origin to the target emitter.\n\t * @protected\n\t */\n\tstartProxy_() {\n\t\tthis.targetEmitter_.onListener(this.proxyEvent.bind(this));\n\t}\n\n\t/**\n\t * Adds a listener to the origin emitter, if it exists. Otherwise, stores\n\t * the pending listener so it can be used on a future origin emitter.\n\t * @param {string} event\n\t * @protected\n\t */\n\ttryToAddListener_(event) {\n\t\tif (this.originEmitter_) {\n\t\t\tthis.proxiedEvents_ = this.proxiedEvents_ || {};\n\t\t\tthis.proxiedEvents_[event] = this.addListener_(\n\t\t\t\tevent,\n\t\t\t\tthis.emitOnTarget_.bind(this, event)\n\t\t\t);\n\t\t} else {\n\t\t\tthis.pendingEvents_ = this.pendingEvents_ || [];\n\t\t\tthis.pendingEvents_.push(event);\n\t\t}\n\t}\n}\n\nexport default EventEmitterProxy;\n","'use strict';\n\nimport { Disposable } from 'metal';\n\n/**\n * EventHandler utility. It's useful for easily removing a group of\n * listeners from different EventEmitter instances.\n * @constructor\n * @extends {Disposable}\n */\nclass EventHandler extends Disposable {\n\tconstructor() {\n\t\tsuper();\n\n\t\t/**\n\t\t * An array that holds the added event handles, so the listeners can be\n\t\t * removed later.\n\t\t * @type {Array.<EventHandle>}\n\t\t * @protected\n\t\t */\n\t\tthis.eventHandles_ = [];\n\t}\n\n\t/**\n\t * Adds event handles to be removed later through the `removeAllListeners`\n\t * method.\n\t * @param {...(!EventHandle)} var_args\n\t */\n\tadd() {\n\t\tfor (let i = 0; i < arguments.length; i++) {\n\t\t\tthis.eventHandles_.push(arguments[i]);\n\t\t}\n\t}\n\n\t/**\n\t * Disposes of this instance's object references.\n\t * @override\n\t */\n\tdisposeInternal() {\n\t\tthis.eventHandles_ = null;\n\t}\n\n\t/**\n\t * Removes all listeners that have been added through the `add` method.\n\t */\n\tremoveAllListeners() {\n\t\tfor (let i = 0; i < this.eventHandles_.length; i++) {\n\t\t\tthis.eventHandles_[i].removeListener();\n\t\t}\n\n\t\tthis.eventHandles_ = [];\n\t}\n}\n\nexport default EventHandler;\n","'use strict';\n\nimport { array, isString } from 'metal';\nimport domData from './domData';\nimport { EventHandle } from 'metal-events';\n\n/**\n * This is a special EventHandle, that is responsible for dom delegated events\n * (only the ones that receive a target element, not a selector string).\n * @extends {EventHandle}\n */\nclass DomDelegatedEventHandle extends EventHandle {\n\t/**\n\t * The constructor for `DomDelegatedEventHandle`.\n\t * @param {!Event} emitter Element the event was subscribed to.\n\t * @param {string} event The name of the event that was subscribed to.\n\t * @param {!Function} listener The listener subscribed to the event.\n\t * @param {string=} opt_selector An optional selector used when delegating\n\t *     the event.\n\t * @constructor\n\t */\n\tconstructor(emitter, event, listener, opt_selector) {\n\t\tsuper(emitter, event, listener);\n\t\tthis.selector_ = opt_selector;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tremoveListener() {\n\t\tconst delegating = domData.get(this.emitter_, 'delegating', {});\n\t\tconst listeners = domData.get(this.emitter_, 'listeners', {});\n\t\tconst selector = this.selector_;\n\t\tconst arr = isString(selector) ? delegating[this.event_].selectors : listeners;\n\t\tconst key = isString(selector) ? selector : this.event_;\n\n\t\tarray.remove(arr[key] || [], this.listener_);\n\t\tif (arr[key] && arr[key].length === 0) {\n\t\t\tdelete arr[key];\n\t\t}\n\t}\n}\n\nexport default DomDelegatedEventHandle;\n","'use strict';\n\nimport { EventHandle } from 'metal-events';\n\n/**\n * This is a special EventHandle, that is responsible for dom events, instead\n * of EventEmitter events.\n * @extends {EventHandle}\n */\nclass DomEventHandle extends EventHandle {\n\t/**\n\t * The constructor for `DomEventHandle`.\n\t * @param {!EventEmitter} emitter Emitter the event was subscribed to.\n\t * @param {string} event The name of the event that was subscribed to.\n\t * @param {!Function} listener The listener subscribed to the event.\n\t * @param {boolean} opt_capture Flag indicating if listener should be triggered\n\t *   during capture phase, instead of during the bubbling phase. Defaults to false.\n\t * @constructor\n\t */\n\tconstructor(emitter, event, listener, opt_capture) {\n\t\tsuper(emitter, event, listener);\n\t\tthis.capture_ = opt_capture;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tremoveListener() {\n\t\tthis.emitter_.removeEventListener(this.event_, this.listener_, this.capture_);\n\t}\n}\n\nexport default DomEventHandle;\n","'use strict';\n\nimport { isDef, isDocument, isDocumentFragment, isElement, isObject, isString, object } from 'metal';\nimport domData from './domData';\nimport DomDelegatedEventHandle from './DomDelegatedEventHandle';\nimport DomEventHandle from './DomEventHandle';\n\nconst elementsByTag_ = {};\nconst supportCache_ = {};\nexport const customEvents = {};\n\nconst LAST_CONTAINER = '__metal_last_container__';\nconst USE_CAPTURE = {\n\tblur: true,\n\terror: true,\n\tfocus: true,\n\tinvalid: true,\n\tload: true,\n\tscroll: true\n};\n\n/**\n * Adds the requested CSS classes to an element.\n * @param {!Element|!Nodelist} elements The element or elements to add CSS classes to.\n * @param {string} classes CSS classes to add.\n */\nexport function addClasses(elements, classes) {\n\tif (!isObject(elements) || !isString(classes)) {\n\t\treturn;\n\t}\n\n\tif (!elements.length) {\n\t\telements = [elements];\n\t}\n\n\tfor (let i = 0; i < elements.length; i++) {\n\t\tif ('classList' in elements[i]) {\n\t\t\taddClassesWithNative_(elements[i], classes);\n\t\t} else {\n\t\t\taddClassesWithoutNative_(elements[i], classes);\n\t\t}\n\t}\n}\n\n/**\n * Adds the requested CSS classes to an element using classList.\n * @param {!Element} element The element to add CSS classes to.\n * @param {string} classes CSS classes to add.\n * @private\n */\nfunction addClassesWithNative_(element, classes) {\n\tclasses.split(' ').forEach(function(className) {\n\t\tif (className) {\n\t\t\telement.classList.add(className);\n\t\t}\n\t});\n}\n\n/**\n * Adds the requested CSS classes to an element without using classList.\n * @param {!Element} element The element to add CSS classes to.\n * @param {string} classes CSS classes to add.\n * @private\n */\nfunction addClassesWithoutNative_(element, classes) {\n\tconst elementClassName = ` ${element.className} `;\n\tlet classesToAppend = '';\n\n\tclasses = classes.split(' ');\n\n\tfor (let i = 0; i < classes.length; i++) {\n\t\tconst className = classes[i];\n\n\t\tif (elementClassName.indexOf(` ${className} `) === -1) {\n\t\t\tclassesToAppend += ` ${className}`;\n\t\t}\n\t}\n\n\tif (classesToAppend) {\n\t\telement.className = element.className + classesToAppend;\n\t}\n}\n\n/**\n * Adds an event listener to the given element, to be triggered via delegate.\n * @param {!Element} element\n * @param {string} eventName\n * @param {!function()} listener\n * @private\n */\nfunction addElementListener_(element, eventName, listener) {\n\taddToArr_(domData.get(element, 'listeners', {}), eventName, listener);\n}\n\n/**\n * Adds an event listener to the given element, to be triggered via delegate\n * selectors.\n * @param {!Element} element\n * @param {string} eventName\n * @param {string} selector\n * @param {!function()} listener\n * @private\n */\nfunction addSelectorListener_(element, eventName, selector, listener) {\n\tconst delegatingData = domData.get(element, 'delegating', {});\n\taddToArr_(delegatingData[eventName].selectors, selector, listener);\n}\n\n/**\n * Adds a value to an array inside an object, creating it first if it doesn't\n * yet exist.\n * @param {!Array} arr\n * @param {string} key\n * @param {*} value\n * @private\n */\nfunction addToArr_(arr, key, value) {\n\tif (!arr[key]) {\n\t\tarr[key] = [];\n\t}\n\tarr[key].push(value);\n}\n\n/**\n * Attaches a delegate listener, unless there's already one attached.\n * @param {!Element} element\n * @param {string} eventName\n * @private\n */\nfunction attachDelegateEvent_(element, eventName) {\n\tlet delegatingData = domData.get(element, 'delegating', {});\n\tif (!delegatingData[eventName]) {\n\t\tdelegatingData[eventName] = {\n\t\t\thandle: on(\n\t\t\t\telement,\n\t\t\t\teventName,\n\t\t\t\thandleDelegateEvent_,\n\t\t\t\t!!USE_CAPTURE[eventName]\n\t\t\t),\n\t\t\tselectors: {}\n\t\t};\n\t}\n}\n\n/**\n * Gets the closest element up the tree from the given element (including\n * itself) that matches the specified selector, or null if none match.\n * @param {Element} element\n * @param {string} selector\n * @return {Element}\n */\nexport function closest(element, selector) {\n\twhile (element && !match(element, selector)) {\n\t\telement = element.parentNode;\n\t}\n\treturn element;\n}\n\n/**\n * Appends a child node with text or other nodes to a parent node. If\n * child is a HTML string it will be automatically converted to a document\n * fragment before appending it to the parent.\n * @param {!Element} parent The node to append nodes to.\n * @param {!(Element|NodeList|string)} child The thing to append to the parent.\n * @return {!Element} The appended child.\n */\nexport function append(parent, child) {\n\tif (isString(child)) {\n\t\tchild = buildFragment(child);\n\t}\n\tif (child instanceof NodeList) {\n\t\tconst childArr = Array.prototype.slice.call(child);\n\t\tfor (let i = 0; i < childArr.length; i++) {\n\t\t\tparent.appendChild(childArr[i]);\n\t\t}\n\t} else {\n\t\tparent.appendChild(child);\n\t}\n\treturn child;\n}\n\n/**\n * Helper for converting a HTML string into a document fragment.\n * @param {string} htmlString The HTML string to convert.\n * @return {!Element} The resulting document fragment.\n */\nexport function buildFragment(htmlString) {\n\tconst tempDiv = document.createElement('div');\n\ttempDiv.innerHTML = `<br>${htmlString}`;\n\ttempDiv.removeChild(tempDiv.firstChild);\n\n\tconst fragment = document.createDocumentFragment();\n\twhile (tempDiv.firstChild) {\n\t\tfragment.appendChild(tempDiv.firstChild);\n\t}\n\treturn fragment;\n}\n\n/**\n * Checks if the first element contains the second one.\n * @param {!Element} element1\n * @param {!Element} element2\n * @return {boolean}\n */\nexport function contains(element1, element2) {\n\tif (isDocument(element1)) {\n\t\t// document.contains is not defined on IE9, so call it on documentElement instead.\n\t\treturn element1.documentElement.contains(element2);\n\t} else {\n\t\treturn element1.contains(element2);\n\t}\n}\n\n/**\n * Listens to the specified event on the given DOM element, but only calls the\n * given callback listener when it's triggered by elements that match the\n * given selector or target element.\n * @param {!Element} element The DOM element the event should be listened on.\n * @param {string} eventName The name of the event to listen to.\n * @param {!Element|string} selectorOrTarget Either an element or css selector\n *     that should match the event for the listener to be triggered.\n * @param {!function(!Object)} callback Function to be called when the event\n *     is triggered. It will receive the normalized event object.\n * @param {boolean=} opt_default Optional flag indicating if this is a default\n *     listener. That means that it would only be executed after all non\n *     default listeners, and only if the event isn't prevented via\n *     `preventDefault`.\n * @return {!EventHandle} Can be used to remove the listener.\n */\nexport function delegate(element, eventName, selectorOrTarget, callback, opt_default) {\n\tconst customConfig = customEvents[eventName];\n\tif (customConfig && customConfig.delegate) {\n\t\teventName = customConfig.originalEvent;\n\t\tcallback = customConfig.handler.bind(customConfig, callback);\n\t}\n\n\tif (opt_default) {\n\t\t// Wrap callback so we don't set property directly on it.\n\t\tcallback = callback.bind();\n\t\tcallback.defaultListener_ = true;\n\t}\n\n\tattachDelegateEvent_(element, eventName);\n\tif (isString(selectorOrTarget)) {\n\t\taddSelectorListener_(element, eventName, selectorOrTarget, callback);\n\t} else {\n\t\taddElementListener_(selectorOrTarget, eventName, callback);\n\t}\n\n\treturn new DomDelegatedEventHandle(\n\t\tisString(selectorOrTarget) ? element : selectorOrTarget,\n\t\teventName,\n\t\tcallback,\n\t\tisString(selectorOrTarget) ? selectorOrTarget : null\n\t);\n}\n\n/**\n * Verifies if the element is able to trigger the Click event,\n * simulating browsers behaviour, avoiding event listeners to be called by triggerEvent method.\n * @param {Element} node Element to be checked.\n * @param {string} eventName The event name.\n * @private\n */\nfunction isAbleToInteractWith_(node, eventName, opt_eventObj) {\n\tif (opt_eventObj && eventName === 'click' && opt_eventObj.button === 2) {\n\t\t// Firefox triggers \"click\" events on the document for right clicks. This\n\t\t// causes our delegate logic to trigger it for regular elements too, which\n\t\t// shouldn't happen. Ignoring them here.\n\t\treturn false;\n\t}\n\n\tconst matchesSelector = ['BUTTON', 'INPUT', 'SELECT', 'TEXTAREA', 'FIELDSET'];\n\tif (eventName === 'click' && matchesSelector.indexOf(node.tagName) > -1) {\n\t\treturn !(node.disabled || parent(node, 'fieldset[disabled]'));\n\t}\n\treturn true;\n}\n\n/**\n * Inserts node in document as last element.\n * @param {Element} node Element to remove children from.\n */\nexport function enterDocument(node) {\n\tnode && append(document.body, node);\n}\n\n/**\n * Removes node from document.\n * @param {Element} node Element to remove children from.\n */\nexport function exitDocument(node) {\n\tif (node && node.parentNode) {\n\t\tnode.parentNode.removeChild(node);\n\t}\n}\n\n/**\n * This is called when an event is triggered by a delegate listener. All\n * matching listeners of this event type from `target` to `currentTarget` will\n * be triggered.\n * @param {!Event} event The event payload.\n * @return {boolean} False if at least one of the triggered callbacks returns\n *     false, or true otherwise.\n * @private\n */\nfunction handleDelegateEvent_(event) {\n\tnormalizeDelegateEvent_(event);\n\tlet ret = true;\n\tconst container = event.currentTarget;\n\tconst defFns = [];\n\n\tret &= triggerDelegatedListeners_(container, event, defFns);\n\tret &= triggerDefaultDelegatedListeners_(defFns, event);\n\n\tevent.delegateTarget = null;\n\tevent[LAST_CONTAINER] = container;\n\treturn ret;\n}\n\n/**\n * Checks if the given element has the requested css class.\n * @param {!Element} element\n * @param {string} className\n * @return {boolean}\n */\nexport function hasClass(element, className) {\n\tif ('classList' in element) {\n\t\treturn hasClassWithNative_(element, className);\n\t} else {\n\t\treturn hasClassWithoutNative_(element, className);\n\t}\n}\n\n/**\n * Checks if the given element has the requested css class using classList.\n * @param {!Element} element\n * @param {string} className\n * @return {boolean}\n * @private\n */\nfunction hasClassWithNative_(element, className) {\n\treturn element.classList.contains(className);\n}\n\n/**\n * Checks if the given element has the requested css class without using classList.\n * @param {!Element} element\n * @param {string} className\n * @return {boolean}\n * @private\n */\nfunction hasClassWithoutNative_(element, className) {\n\treturn (` ${element.className} `).indexOf(` ${className} `) >= 0;\n}\n\n/**\n * Checks if the given element is empty or not.\n * @param {!Element} element\n * @return {boolean}\n */\nexport function isEmpty(element) {\n\treturn element.childNodes.length === 0;\n}\n\n/**\n * Check if an element matches a given selector.\n * @param {Element} element\n * @param {string} selector\n * @return {boolean}\n */\nexport function match(element, selector) {\n\tif (!element || element.nodeType !== 1) {\n\t\treturn false;\n\t}\n\n\tconst p = Element.prototype;\n\tconst m = p.matches || p.webkitMatchesSelector || p.mozMatchesSelector || p.msMatchesSelector || p.oMatchesSelector;\n\tif (m) {\n\t\treturn m.call(element, selector);\n\t}\n\n\treturn matchFallback_(element, selector);\n}\n\n/**\n * Check if an element matches a given selector, using an internal implementation\n * instead of calling existing javascript functions.\n * @param {Element} element\n * @param {string} selector\n * @return {boolean}\n * @private\n */\nfunction matchFallback_(element, selector) {\n\tconst nodes = document.querySelectorAll(selector, element.parentNode);\n\tfor (let i = 0; i < nodes.length; ++i) {\n\t\tif (nodes[i] === element) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\n/**\n * Returns the next sibling of the given element that matches the specified\n * selector, or null if there is none.\n * @param {!Element} element\n * @param {?string} selector\n */\nexport function next(element, selector) {\n\tdo {\n\t\telement = element.nextSibling;\n\t\tif (element && match(element, selector)) {\n\t\t\treturn element;\n\t\t}\n\t} while (element);\n\treturn null;\n}\n\n/**\n * Normalizes the event payload for delegate listeners.\n * @param {!Event} event\n * @private\n */\nfunction normalizeDelegateEvent_(event) {\n\tevent.stopPropagation = stopPropagation_;\n\tevent.stopImmediatePropagation = stopImmediatePropagation_;\n}\n\n/**\n * Listens to the specified event on the given DOM element. This function normalizes\n * DOM event payloads and functions so they'll work the same way on all supported\n * browsers.\n * @param {!Element|string} element The DOM element to listen to the event on, or\n *   a selector that should be delegated on the entire document.\n * @param {string} eventName The name of the event to listen to.\n * @param {!function(!Object)} callback Function to be called when the event is\n *   triggered. It will receive the normalized event object.\n * @param {boolean} opt_capture Flag indicating if listener should be triggered\n *   during capture phase, instead of during the bubbling phase. Defaults to false.\n * @return {!DomEventHandle} Can be used to remove the listener.\n */\nexport function on(element, eventName, callback, opt_capture) {\n\tif (isString(element)) {\n\t\treturn delegate(document, eventName, element, callback);\n\t}\n\tconst customConfig = customEvents[eventName];\n\tif (customConfig && customConfig.event) {\n\t\teventName = customConfig.originalEvent;\n\t\tcallback = customConfig.handler.bind(customConfig, callback);\n\t}\n\telement.addEventListener(eventName, callback, opt_capture);\n\treturn new DomEventHandle(element, eventName, callback, opt_capture);\n}\n\n/**\n * Listens to the specified event on the given DOM element once. This\n * function normalizes DOM event payloads and functions so they'll work the\n * same way on all supported browsers.\n * @param {!Element} element The DOM element to listen to the event on.\n * @param {string} eventName The name of the event to listen to.\n * @param {!function(!Object)} callback Function to be called when the event\n *   is triggered. It will receive the normalized event object.\n * @return {!DomEventHandle} Can be used to remove the listener.\n */\nexport function once(element, eventName, callback) {\n\tconst domEventHandle = on(element, eventName, function() {\n\t\tdomEventHandle.removeListener();\n\t\treturn callback.apply(this, arguments);\n\t});\n\treturn domEventHandle;\n}\n\n/**\n * Gets the first parent from the given element that matches the specified\n * selector, or null if none match.\n * @param {!Element} element\n * @param {string} selector\n * @return {Element}\n */\nexport function parent(element, selector) {\n\treturn closest(element.parentNode, selector);\n}\n\n/**\n * Registers a custom event.\n * @param {string} eventName The name of the custom event.\n * @param {!Object} customConfig An object with information about how the event\n *   should be handled.\n */\nexport function registerCustomEvent(eventName, customConfig) {\n\tcustomEvents[eventName] = customConfig;\n}\n\n/**\n * Removes all the child nodes on a DOM node.\n * @param {Element} node Element to remove children from.\n */\nexport function removeChildren(node) {\n\tlet child;\n\twhile ((child = node.firstChild)) {\n\t\tnode.removeChild(child);\n\t}\n}\n\n/**\n * Removes the requested CSS classes from an element.\n * @param {!Element|!NodeList} elements The element or elements to remove CSS classes from.\n * @param {string} classes CSS classes to remove.\n */\nexport function removeClasses(elements, classes) {\n\tif (!isObject(elements) || !isString(classes)) {\n\t\treturn;\n\t}\n\n\tif (!elements.length) {\n\t\telements = [elements];\n\t}\n\n\tfor (let i = 0; i < elements.length; i++) {\n\t\tif ('classList' in elements[i]) {\n\t\t\tremoveClassesWithNative_(elements[i], classes);\n\t\t} else {\n\t\t\tremoveClassesWithoutNative_(elements[i], classes);\n\t\t}\n\t}\n}\n\n/**\n * Removes the requested CSS classes from an element using classList.\n * @param {!Element} element The element to remove CSS classes from.\n * @param {string} classes CSS classes to remove.\n * @private\n */\nfunction removeClassesWithNative_(element, classes) {\n\tclasses.split(' ').forEach(function(className) {\n\t\tif (className) {\n\t\t\telement.classList.remove(className);\n\t\t}\n\t});\n}\n\n/**\n * Removes the requested CSS classes from an element without using classList.\n * @param {!Element} element The element to remove CSS classes from.\n * @param {string} classes CSS classes to remove.\n * @private\n */\nfunction removeClassesWithoutNative_(element, classes) {\n\tlet elementClassName = ` ${element.className} `;\n\n\tclasses = classes.split(' ');\n\n\tfor (let i = 0; i < classes.length; i++) {\n\t\telementClassName = elementClassName.replace(` ${classes[i]} `, ' ');\n\t}\n\n\telement.className = elementClassName.trim();\n}\n\n/**\n * Replaces the first element with the second.\n * @param {Element} element1\n * @param {Element} element2\n */\nexport function replace(element1, element2) {\n\tif (element1 && element2 && element1 !== element2 && element1.parentNode) {\n\t\telement1.parentNode.insertBefore(element2, element1);\n\t\telement1.parentNode.removeChild(element1);\n\t}\n}\n\n/**\n * The function that replaces `stopImmediatePropagation_` for events.\n * @private\n */\nfunction stopImmediatePropagation_() {\n\tconst event = this; // eslint-disable-line\n\tevent.stopped = true;\n\tevent.stoppedImmediate = true;\n\tEvent.prototype.stopImmediatePropagation.call(event);\n}\n\n/**\n * The function that replaces `stopPropagation` for events.\n * @private\n */\nfunction stopPropagation_() {\n\tconst event = this; // eslint-disable-line\n\tevent.stopped = true;\n\tEvent.prototype.stopPropagation.call(event);\n}\n\n/**\n * Checks if the given element supports the given event type.\n * @param {!Element|string} element The DOM element or element tag name to check.\n * @param {string} eventName The name of the event to check.\n * @return {boolean}\n */\nexport function supportsEvent(element, eventName) {\n\tif (customEvents[eventName]) {\n\t\treturn true;\n\t}\n\n\tif (isString(element)) {\n\t\tif (!elementsByTag_[element]) {\n\t\t\telementsByTag_[element] = document.createElement(element);\n\t\t}\n\t\telement = elementsByTag_[element];\n\t}\n\n\tconst tag = element.tagName;\n\tif (!supportCache_[tag] || !supportCache_[tag].hasOwnProperty(eventName)) {\n\t\tsupportCache_[tag] = supportCache_[tag] || {};\n\t\tsupportCache_[tag][eventName] = 'on' + eventName in element;\n\t}\n\treturn supportCache_[tag][eventName];\n}\n\n/**\n * This triggers all default matched delegated listeners of a given event type.\n * @param {!Array} defaultFns Array to collect default listeners in, instead\n * @param {!Event} event\n * @return {boolean} False if at least one of the triggered callbacks returns\n *     false, or true otherwise.\n * @private\n */\nfunction triggerDefaultDelegatedListeners_(defFns, event) {\n\tlet ret = true;\n\n\tfor (let i = 0; i < defFns.length && !event.defaultPrevented; i++) {\n\t\tevent.delegateTarget = defFns[i].element;\n\t\tret &= defFns[i].fn(event);\n\t}\n\n\treturn ret;\n}\n\n/**\n * This triggers all matched delegated listeners of a given event type when its\n * delegated target is able to interact.\n * @param {!Element} container\n * @param {!Event} event\n * @param {!Array} defaultFns Array to collect default listeners in, instead\n *     of running them.\n * @return {boolean} False if at least one of the triggered callbacks returns\n *     false, or true otherwise.\n * @private\n */\nfunction triggerDelegatedListeners_(container, event, defaultFns) {\n\tlet ret = true;\n\tlet currElement = event.target;\n\tconst limit = container.parentNode;\n\n\twhile (currElement && currElement !== limit && !event.stopped) {\n\t\tif (isAbleToInteractWith_(currElement, event.type, event)) {\n\t\t\tevent.delegateTarget = currElement;\n\t\t\tret &= triggerElementListeners_(currElement, event, defaultFns);\n\t\t\tret &= triggerSelectorListeners_(container, currElement, event, defaultFns);\n\t\t}\n\t\tcurrElement = currElement.parentNode;\n\t}\n\n\treturn ret;\n}\n\n/**\n * Converts the given argument to a DOM element. Strings are assumed to\n * be selectors, and so a matched element will be returned. If the arg\n * is already a DOM element it will be the return value.\n * @param {string|Element|Document} selectorOrElement\n * @return {Element} The converted element, or null if none was found.\n */\nexport function toElement(selectorOrElement) {\n\tif (isElement(selectorOrElement) || isDocument(selectorOrElement) || isDocumentFragment(selectorOrElement)) {\n\t\treturn selectorOrElement;\n\t} else if (isString(selectorOrElement)) {\n\t\tif (selectorOrElement[0] === '#' && selectorOrElement.indexOf(' ') === -1) {\n\t\t\treturn document.getElementById(selectorOrElement.substr(1));\n\t\t} else {\n\t\t\treturn document.querySelector(selectorOrElement);\n\t\t}\n\t} else {\n\t\treturn null;\n\t}\n}\n\n/**\n * Adds or removes one or more classes from an element. If any of the classes\n * is present, it will be removed from the element, or added otherwise.\n * @param {!Element} element The element which classes will be toggled.\n * @param {string} classes The classes which have to added or removed from the element.\n */\nexport function toggleClasses(element, classes) {\n\tif (!isObject(element) || !isString(classes)) {\n\t\treturn;\n\t}\n\n\tif ('classList' in element) {\n\t\ttoggleClassesWithNative_(element, classes);\n\t} else {\n\t\ttoggleClassesWithoutNative_(element, classes);\n\t}\n}\n\n/**\n * Adds or removes one or more classes from an element using classList.\n * If any of the classes is present, it will be removed from the element,\n * or added otherwise.\n * @param {!Element} element The element which classes will be toggled.\n * @param {string} classes The classes which have to added or removed from the element.\n * @private\n */\nfunction toggleClassesWithNative_(element, classes) {\n\tclasses.split(' ').forEach(function(className) {\n\t\telement.classList.toggle(className);\n\t});\n}\n\n/**\n * Adds or removes one or more classes from an element without using classList.\n * If any of the classes is present, it will be removed from the element,\n * or added otherwise.\n * @param {!Element} element The element which classes will be toggled.\n * @param {string} classes The classes which have to added or removed from the element.\n * @private\n */\nfunction toggleClassesWithoutNative_(element, classes) {\n\tlet elementClassName = ` ${element.className} `;\n\n\tclasses = classes.split(' ');\n\n\tfor (let i = 0; i < classes.length; i++) {\n\t\tconst className = ` ${classes[i]} `;\n\t\tconst classIndex = elementClassName.indexOf(className);\n\n\t\tif (classIndex === -1) {\n\t\t\telementClassName = `${elementClassName}${classes[i]} `;\n\t\t} else {\n\t\t\tconst before = elementClassName.substring(0, classIndex);\n\t\t\tconst after = elementClassName.substring(classIndex + className.length);\n\t\t\telementClassName = `${before} ${after}`;\n\t\t}\n\t}\n\n\telement.className = elementClassName.trim();\n}\n\n/**\n * Triggers all listeners for the given event type that are stored in the\n * specified element.\n * @param {!Element} element\n * @param {!Event} event\n * @param {!Array} defaultFns Array to collect default listeners in, instead\n *     of running them.\n * @return {boolean} False if at least one of the triggered callbacks returns\n *     false, or true otherwise.\n * @private\n */\nfunction triggerElementListeners_(element, event, defaultFns) {\n\tconst lastContainer = event[LAST_CONTAINER];\n\tif (!isDef(lastContainer) || !contains(lastContainer, element)) {\n\t\tconst listeners = domData.get(element, 'listeners', {})[event.type];\n\t\treturn triggerListeners_(listeners, event, element, defaultFns);\n\t}\n\treturn true;\n}\n\n/**\n * Triggers the specified event on the given element.\n * NOTE: This should mostly be used for testing, not on real code.\n * @param {!Element} element The node that should trigger the event.\n * @param {string} eventName The name of the event to be triggred.\n * @param {Object=} opt_eventObj An object with data that should be on the\n *   triggered event's payload.\n */\nexport function triggerEvent(element, eventName, opt_eventObj) {\n\tif (isAbleToInteractWith_(element, eventName, opt_eventObj)) {\n\t\tconst eventObj = document.createEvent('HTMLEvents');\n\t\teventObj.initEvent(eventName, true, true);\n\t\tobject.mixin(eventObj, opt_eventObj);\n\t\telement.dispatchEvent(eventObj);\n\t}\n}\n\n/**\n * Triggers the given listeners array.\n * @param {Array<!function()>} listeners\n * @param {!Event} event\n * @param {!Element} element\n * @param {!Array} defaultFns Array to collect default listeners in, instead\n *     of running them.\n * @return {boolean} False if at least one of the triggered callbacks returns\n *     false, or true otherwise.\n * @private\n */\nfunction triggerListeners_(listeners, event, element, defaultFns) {\n\tlet ret = true;\n\tlisteners = listeners || [];\n\tfor (let i = 0; i < listeners.length && !event.stoppedImmediate; i++) {\n\t\tif (listeners[i].defaultListener_) {\n\t\t\tdefaultFns.push({\n\t\t\t\telement,\n\t\t\t\tfn: listeners[i]\n\t\t\t});\n\t\t} else {\n\t\t\tret &= listeners[i](event);\n\t\t}\n\t}\n\treturn ret;\n}\n\n/**\n * Triggers all selector listeners for the given event.\n * @param {!Element} container\n * @param {!Element} element\n * @param {!Event} event\n * @param {!Array} defaultFns Array to collect default listeners in, instead\n *     of running them.\n * @return {boolean} False if at least one of the triggered callbacks returns\n *     false, or true otherwise.\n * @private\n */\nfunction triggerSelectorListeners_(container, element, event, defaultFns) {\n\tlet ret = true;\n\tconst data = domData.get(container, 'delegating', {});\n\tconst map = data[event.type].selectors;\n\tconst selectors = Object.keys(map);\n\tfor (let i = 0; i < selectors.length && !event.stoppedImmediate; i++) {\n\t\tif (match(element, selectors[i])) {\n\t\t\tconst listeners = map[selectors[i]];\n\t\t\tret &= triggerListeners_(listeners, event, element, defaultFns);\n\t\t}\n\t}\n\treturn ret;\n}\n","'use strict';\n\n// This file exists just for backwards compatibility, making sure that old\n// default imports for this file still work. It's best to use the named exports\n// for each function instead though, since that allows bundlers like Rollup to\n// reduce the bundle size by removing unused code.\nimport * as dom from './domNamed';\n\nexport default dom;\nexport { dom };\nexport * from './domNamed';\n","'use strict';\n\nimport { delegate, on, supportsEvent } from './dom';\nimport { EventEmitterProxy } from 'metal-events';\n\n/**\n * DomEventEmitterProxy utility. It extends `EventEmitterProxy` to also accept\n * dom elements as origin emitters.\n * @extends {EventEmitterProxy}\n */\nclass DomEventEmitterProxy extends EventEmitterProxy {\n\t/**\n\t * Adds the given listener for the given event.\n\t * @param {string} event\n\t * @param {!function()} listener\n\t * @return {!EventHandle} The listened event's handle.\n\t * @protected\n\t * @override\n\t */\n\taddListener_(event, listener) {\n\t\tif (this.originEmitter_.addEventListener) {\n\t\t\tif (this.isDelegateEvent_(event)) {\n\t\t\t\tconst index = event.indexOf(':', 9);\n\t\t\t\tconst eventName = event.substring(9, index);\n\t\t\t\tconst selector = event.substring(index + 1);\n\t\t\t\treturn delegate(this.originEmitter_, eventName, selector, listener);\n\t\t\t} else {\n\t\t\t\treturn on(this.originEmitter_, event, listener);\n\t\t\t}\n\t\t} else {\n\t\t\treturn super.addListener_(event, listener);\n\t\t}\n\t}\n\n\t/**\n\t * Checks if the given event is of the delegate type.\n\t * @param {string} event\n\t * @return {boolean}\n\t * @protected\n\t */\n\tisDelegateEvent_(event) {\n\t\treturn event.substr(0, 9) === 'delegate:';\n\t}\n\n\t/**\n\t * Checks if the given event is supported by the origin element.\n\t * @param {string} event\n\t * @protected\n\t */\n\tisSupportedDomEvent_(event) {\n\t\tif (!this.originEmitter_ || !this.originEmitter_.addEventListener) {\n\t\t\treturn true;\n\t\t}\n\t\treturn (this.isDelegateEvent_(event) && event.indexOf(':', 9) !== -1) ||\n\t\t\tsupportsEvent(this.originEmitter_, event);\n\t}\n\n\t/**\n\t * Checks if the given event should be proxied.\n\t * @param {string} event\n\t * @return {boolean}\n\t * @protected\n\t * @override\n\t */\n\tshouldProxyEvent_(event) {\n\t\treturn super.shouldProxyEvent_(event) && this.isSupportedDomEvent_(event);\n\t}\n}\n\nexport default DomEventEmitterProxy;\n","'use strict';\n\nimport { append } from './dom';\nimport { string } from 'metal';\n\n/**\n * Class with static methods responsible for doing browser feature checks.\n */\nclass features {\n\t/**\n\t * Some browsers still supports prefixed animation events. This method can\n\t * be used to retrieve the current browser event name for both, animation\n\t * and transition.\n\t * @return {object}\n\t */\n\tstatic checkAnimationEventName() {\n\t\tif (features.animationEventName_ === undefined) {\n\t\t\tfeatures.animationEventName_ = {\n\t\t\t\tanimation: features.checkAnimationEventName_('animation'),\n\t\t\t\ttransition: features.checkAnimationEventName_('transition')\n\t\t\t};\n\t\t}\n\t\treturn features.animationEventName_;\n\t}\n\n\t/**\n\t * @protected\n\t * @param {string} type Type to test: animation, transition.\n\t * @return {string} Browser event name.\n\t */\n\tstatic checkAnimationEventName_(type) {\n\t\tconst prefixes = ['Webkit', 'MS', 'O', ''];\n\t\tconst typeTitleCase = string.replaceInterval(type, 0, 1, type.substring(0, 1).toUpperCase());\n\t\tconst suffixes = [`${typeTitleCase}End`, `${typeTitleCase}End`, `${typeTitleCase}End`, `${type}end`];\n\t\tfor (let i = 0; i < prefixes.length; i++) {\n\t\t\tif (features.animationElement_.style[prefixes[i] + typeTitleCase] !== undefined) {\n\t\t\t\treturn prefixes[i].toLowerCase() + suffixes[i];\n\t\t\t}\n\t\t}\n\t\treturn `${type}end`;\n\t}\n\n\t/**\n\t * Some browsers (like IE9) change the order of element attributes, when html\n\t * is rendered. This method can be used to check if this behavior happens on\n\t * the current browser.\n\t * @return {boolean}\n\t */\n\tstatic checkAttrOrderChange() {\n\t\tif (features.attrOrderChange_ === undefined) {\n\t\t\tconst originalContent = '<div data-component=\"\" data-ref=\"\"></div>';\n\t\t\tconst element = document.createElement('div');\n\t\t\tappend(element, originalContent);\n\t\t\tfeatures.attrOrderChange_ = originalContent !== element.innerHTML;\n\t\t}\n\t\treturn features.attrOrderChange_;\n\t}\n}\n\nfeatures.animationElement_ = document.createElement('div');\nfeatures.animationEventName_ = undefined;\nfeatures.attrOrderChange_ = undefined;\n\nexport default features;\n","'use strict';\n\nimport { async } from 'metal';\nimport { exitDocument, once } from './dom';\n\n/**\n * Utility functions for running javascript code in the global scope.\n */\nclass globalEval {\n\t/**\n\t * Evaluates the given string in the global scope.\n\t * @param {string} text\n\t * @param {function()=} opt_appendFn Optional function to append the node\n\t *   into document.\n\t * @return {Element} script\n\t */\n\tstatic run(text, opt_appendFn) {\n\t\tconst script = document.createElement('script');\n\t\tscript.text = text;\n\t\tif (opt_appendFn) {\n\t\t\topt_appendFn(script);\n\t\t} else {\n\t\t\tdocument.head.appendChild(script);\n\t\t}\n\t\texitDocument(script);\n\t\treturn script;\n\t}\n\n\t/**\n\t * Evaluates the given javascript file in the global scope.\n\t * @param {string} src The file's path.\n\t * @param {function()=} opt_callback Optional function to be called\n\t *   when the script has been run.\n\t * @param {function()=} opt_appendFn Optional function to append the node\n\t *   into document.\n\t * @return {Element} script\n\t */\n\tstatic runFile(src, opt_callback, opt_appendFn) {\n\t\tconst script = document.createElement('script');\n\t\tscript.src = src;\n\n\t\tconst callback = function() {\n\t\t\texitDocument(script);\n\t\t\topt_callback && opt_callback();\n\t\t};\n\t\tonce(script, 'load', callback);\n\t\tonce(script, 'error', callback);\n\n\t\tif (opt_appendFn) {\n\t\t\topt_appendFn(script);\n\t\t} else {\n\t\t\tdocument.head.appendChild(script);\n\t\t}\n\n\t\treturn script;\n\t}\n\n\t/**\n\t * Evaluates the code referenced by the given script element.\n\t * @param {!Element} script\n\t * @param {function()=} opt_callback Optional function to be called\n\t *   when the script has been run.\n\t * @param {function()=} opt_appendFn Optional function to append the node\n\t *   into document.\n\t * @return {Element} script\n\t */\n\tstatic runScript(script, opt_callback, opt_appendFn) {\n\t\tconst callback = function() {\n\t\t\topt_callback && opt_callback();\n\t\t};\n\t\tif (script.type && script.type !== 'text/javascript') {\n\t\t\tasync.nextTick(callback);\n\t\t\treturn;\n\t\t}\n\t\texitDocument(script);\n\t\tif (script.src) {\n\t\t\treturn globalEval.runFile(script.src, opt_callback, opt_appendFn);\n\t\t} else {\n\t\t\tasync.nextTick(callback);\n\t\t\treturn globalEval.run(script.text, opt_appendFn);\n\t\t}\n\t}\n\n\t/**\n\t * Evaluates any script tags present in the given element.\n\t * @param {!Element} element\n\t * @param {function()=} opt_callback Optional function to be called\n\t *   when the script has been run.\n\t * @param {function()=} opt_appendFn Optional function to append the node\n\t *   into document.\n\t */\n\tstatic runScriptsInElement(element, opt_callback, opt_appendFn) {\n\t\tconst scripts = element.querySelectorAll('script');\n\t\tif (scripts.length) {\n\t\t\tglobalEval.runScriptsInOrder(scripts, 0, opt_callback, opt_appendFn);\n\t\t} else if (opt_callback) {\n\t\t\tasync.nextTick(opt_callback);\n\t\t}\n\t}\n\n\t/**\n\t * Runs the given scripts elements in the order that they appear.\n\t * @param {!NodeList} scripts\n\t * @param {number} index\n\t * @param {function()=} opt_callback Optional function to be called\n\t *   when the script has been run.\n\t * @param {function()=} opt_appendFn Optional function to append the node\n\t *   into document.\n\t */\n\tstatic runScriptsInOrder(scripts, index, opt_callback, opt_appendFn) {\n\t\tglobalEval.runScript(scripts.item(index), function() {\n\t\t\tif (index < scripts.length - 1) {\n\t\t\t\tglobalEval.runScriptsInOrder(scripts, index + 1, opt_callback, opt_appendFn);\n\t\t\t} else if (opt_callback) {\n\t\t\t\tasync.nextTick(opt_callback);\n\t\t\t}\n\t\t}, opt_appendFn);\n\t}\n}\n\nexport default globalEval;\n","'use strict';\n\nimport { async } from 'metal';\nimport { once } from './dom';\n\n/**\n * Utility functions for running styles.\n */\nclass globalEvalStyles {\n\t/**\n\t * Evaluates the given style.\n\t * @param {string} text\n\t * @param {function()=} opt_appendFn Optional function to append the node\n\t *   into document.\n\t * @return {Element} style\n\t */\n\tstatic run(text, opt_appendFn) {\n\t\tconst style = document.createElement('style');\n\t\tstyle.innerHTML = text;\n\t\tif (opt_appendFn) {\n\t\t\topt_appendFn(style);\n\t\t} else {\n\t\t\tdocument.head.appendChild(style);\n\t\t}\n\t\treturn style;\n\t}\n\n\t/**\n\t * Evaluates the given style file.\n\t * @param {string} href The file's path.\n\t * @param {function()=} opt_callback Optional function to be called\n\t *   when the styles has been run.\n\t * @param {function()=} opt_appendFn Optional function to append the node\n\t *   into document.\n\t * @return {Element} style\n\t */\n\tstatic runFile(href, opt_callback, opt_appendFn) {\n\t\tconst link = document.createElement('link');\n\t\tlink.rel = 'stylesheet';\n\t\tlink.href = href;\n\t\tglobalEvalStyles.runStyle(link, opt_callback, opt_appendFn);\n\t\treturn link;\n\t}\n\n\t/**\n\t * Evaluates the code referenced by the given style/link element.\n\t * @param {!Element} style\n\t * @param {function()=} opt_callback Optional function to be called\n\t *   when the script has been run.\n\t * @param {function()=} opt_appendFn Optional function to append the node\n\t *   into document.\n\t *  @return {Element} style\n\t */\n\tstatic runStyle(style, opt_callback, opt_appendFn) {\n\t\tconst callback = function() {\n\t\t\topt_callback && opt_callback();\n\t\t};\n\t\tif (style.rel && style.rel !== 'stylesheet') {\n\t\t\tasync.nextTick(callback);\n\t\t\treturn;\n\t\t}\n\n\t\tif (style.tagName === 'STYLE') {\n\t\t\tasync.nextTick(callback);\n\t\t} else {\n\t\t\tonce(style, 'load', callback);\n\t\t\tonce(style, 'error', callback);\n\t\t}\n\n\t\tif (opt_appendFn) {\n\t\t\topt_appendFn(style);\n\t\t} else {\n\t\t\tdocument.head.appendChild(style);\n\t\t}\n\n\t\treturn style;\n\t}\n\n\t/**\n\t * Evaluates any style present in the given element.\n\t * @param {!Element} element\n\t * @param {function()=} opt_callback Optional function to be called when the\n\t *   style has been run.\n\t * @param {function()=} opt_appendFn Optional function to append the node\n\t *   into document.\n\t */\n\tstatic runStylesInElement(element, opt_callback, opt_appendFn) {\n\t\tconst styles = element.querySelectorAll('style,link');\n\t\tif (styles.length === 0 && opt_callback) {\n\t\t\tasync.nextTick(opt_callback);\n\t\t\treturn;\n\t\t}\n\n\t\tlet loadCount = 0;\n\t\tconst callback = function() {\n\t\t\tif (opt_callback && ++loadCount === styles.length) {\n\t\t\t\tasync.nextTick(opt_callback);\n\t\t\t}\n\t\t};\n\t\tfor (let i = 0; i < styles.length; i++) {\n\t\t\tglobalEvalStyles.runStyle(styles[i], callback, opt_appendFn);\n\t\t}\n\t}\n}\n\nexport default globalEvalStyles;\n","'use strict';\n\nimport { registerCustomEvent } from './dom';\nimport features from './features';\n\nconst mouseEventMap = {\n\tmouseenter: 'mouseover',\n\tmouseleave: 'mouseout',\n\tpointerenter: 'pointerover',\n\tpointerleave: 'pointerout'\n};\nObject.keys(mouseEventMap).forEach(function(eventName) {\n\tregisterCustomEvent(eventName, {\n\t\tdelegate: true,\n\t\thandler: function(callback, event) {\n\t\t\tconst related = event.relatedTarget;\n\t\t\tconst target = event.delegateTarget;\n\t\t\tif (!related || (related !== target && !target.contains(related))) {\n\t\t\t\tevent.customType = eventName;\n\t\t\t\treturn callback(event);\n\t\t\t}\n\t\t},\n\t\toriginalEvent: mouseEventMap[eventName]\n\t});\n});\n\nconst animationEventMap = {\n\tanimation: 'animationend',\n\ttransition: 'transitionend'\n};\nObject.keys(animationEventMap).forEach(function(eventType) {\n\tconst eventName = animationEventMap[eventType];\n\tregisterCustomEvent(eventName, {\n\t\tevent: true,\n\t\tdelegate: true,\n\t\thandler: function(callback, event) {\n\t\t\tevent.customType = eventName;\n\t\t\treturn callback(event);\n\t\t},\n\t\toriginalEvent: features.checkAnimationEventName()[eventType]\n\t});\n});\n","/*!\n * Promises polyfill from Google's Closure Library.\n *\n *      Copyright 2013 The Closure Library Authors. All Rights Reserved.\n *\n * NOTE(eduardo): Promise support is not ready on all supported browsers,\n * therefore metal-promise is temporarily using Google's promises as polyfill.\n * It supports cancellable promises and has clean and fast implementation.\n */\n\n'use strict';\n\nimport { isDef, isFunction, isObject } from 'metal';\nimport { async } from 'metal';\n\n/**\n * Provides a more strict interface for Thenables in terms of\n * http://promisesaplus.com for interop with {@see CancellablePromise}.\n *\n * @interface\n * @extends {IThenable.<TYPE>}\n * @template TYPE\n */\nvar Thenable = function() {};\n\n/**\n * Adds callbacks that will operate on the result of the Thenable, returning a\n * new child Promise.\n *\n * If the Thenable is fulfilled, the {@code onFulfilled} callback will be\n * invoked with the fulfillment value as argument, and the child Promise will\n * be fulfilled with the return value of the callback. If the callback throws\n * an exception, the child Promise will be rejected with the thrown value\n * instead.\n *\n * If the Thenable is rejected, the {@code onRejected} callback will be invoked\n * with the rejection reason as argument, and the child Promise will be rejected\n * with the return value of the callback or thrown value.\n *\n * @param {?(function(this:THIS, TYPE):\n *             (RESULT|IThenable.<RESULT>|Thenable))=} opt_onFulfilled A\n *     function that will be invoked with the fulfillment value if the Promise\n *     is fullfilled.\n * @param {?(function(*): *)=} opt_onRejected A function that will be invoked\n *     with the rejection reason if the Promise is rejected.\n * @param {THIS=} opt_context An optional context object that will be the\n *     execution context for the callbacks. By default, functions are executed\n *     with the default this.\n * @return {!CancellablePromise.<RESULT>} A new Promise that will receive the\n *     result of the fulfillment or rejection callback.\n * @template RESULT,THIS\n */\nThenable.prototype.then = function() {};\n\n\n/**\n * An expando property to indicate that an object implements\n * {@code Thenable}.\n *\n * {@see addImplementation}.\n *\n * @const\n */\nThenable.IMPLEMENTED_BY_PROP = '$goog_Thenable';\n\n\n/**\n * Marks a given class (constructor) as an implementation of Thenable, so\n * that we can query that fact at runtime. The class must have already\n * implemented the interface.\n * Exports a 'then' method on the constructor prototype, so that the objects\n * also implement the extern {@see Thenable} interface for interop with\n * other Promise implementations.\n * @param {function(new:Thenable,...[?])} ctor The class constructor. The\n *     corresponding class must have already implemented the interface.\n */\nThenable.addImplementation = function(ctor) {\n  ctor.prototype.then = ctor.prototype.then;\n  ctor.prototype.$goog_Thenable = true;\n};\n\n\n/**\n * @param {*} object\n * @return {boolean} Whether a given instance implements {@code Thenable}.\n *     The class/superclass of the instance must call {@code addImplementation}.\n */\nThenable.isImplementedBy = function(object) {\n  if (!object) {\n    return false;\n  }\n  try {\n    return !!object.$goog_Thenable;\n  } catch (e) {\n    // Property access seems to be forbidden.\n    return false;\n  }\n};\n\n\n/**\n * Like bind(), except that a 'this object' is not required. Useful when the\n * target function is already bound.\n *\n * Usage:\n * var g = partial(f, arg1, arg2);\n * g(arg3, arg4);\n *\n * @param {Function} fn A function to partially apply.\n * @param {...*} var_args Additional arguments that are partially applied to fn.\n * @return {!Function} A partially-applied form of the function bind() was\n *     invoked as a method of.\n */\nvar partial = function(fn) {\n  var args = Array.prototype.slice.call(arguments, 1);\n  return function() {\n    // Clone the array (with slice()) and append additional arguments\n    // to the existing arguments.\n    var newArgs = args.slice();\n    newArgs.push.apply(newArgs, arguments);\n    return fn.apply(this, newArgs);\n  };\n};\n\n/**\n * Promises provide a result that may be resolved asynchronously. A Promise may\n * be resolved by being fulfilled or rejected with a value, which will be known\n * as the fulfillment value or the rejection reason. Whether fulfilled or\n * rejected, the Promise result is immutable once it is set.\n *\n * Promises may represent results of any type, including undefined. Rejection\n * reasons are typically Errors, but may also be of any type. Closure Promises\n * allow for optional type annotations that enforce that fulfillment values are\n * of the appropriate types at compile time.\n *\n * The result of a Promise is accessible by calling {@code then} and registering\n * {@code onFulfilled} and {@code onRejected} callbacks. Once the Promise\n * resolves, the relevant callbacks are invoked with the fulfillment value or\n * rejection reason as argument. Callbacks are always invoked in the order they\n * were registered, even when additional {@code then} calls are made from inside\n * another callback. A callback is always run asynchronously sometime after the\n * scope containing the registering {@code then} invocation has returned.\n *\n * If a Promise is resolved with another Promise, the first Promise will block\n * until the second is resolved, and then assumes the same result as the second\n * Promise. This allows Promises to depend on the results of other Promises,\n * linking together multiple asynchronous operations.\n *\n * This implementation is compatible with the Promises/A+ specification and\n * passes that specification's conformance test suite. A Closure Promise may be\n * resolved with a Promise instance (or sufficiently compatible Promise-like\n * object) created by other Promise implementations. From the specification,\n * Promise-like objects are known as \"Thenables\".\n *\n * @see http://promisesaplus.com/\n *\n * @param {function(\n *             this:RESOLVER_CONTEXT,\n *             function((TYPE|IThenable.<TYPE>|Thenable)),\n *             function(*)): void} resolver\n *     Initialization function that is invoked immediately with {@code resolve}\n *     and {@code reject} functions as arguments. The Promise is resolved or\n *     rejected with the first argument passed to either function.\n * @param {RESOLVER_CONTEXT=} opt_context An optional context for executing the\n *     resolver function. If unspecified, the resolver function will be executed\n *     in the default scope.\n * @constructor\n * @struct\n * @final\n * @implements {Thenable.<TYPE>}\n * @template TYPE,RESOLVER_CONTEXT\n */\nvar CancellablePromise = function(resolver, opt_context) {\n  /**\n   * The internal state of this Promise. Either PENDING, FULFILLED, REJECTED, or\n   * BLOCKED.\n   * @private {CancellablePromise.State_}\n   */\n  this.state_ = CancellablePromise.State_.PENDING;\n\n  /**\n   * The resolved result of the Promise. Immutable once set with either a\n   * fulfillment value or rejection reason.\n   * @private {*}\n   */\n  this.result_ = undefined;\n\n  /**\n   * For Promises created by calling {@code then()}, the originating parent.\n   * @private {CancellablePromise}\n   */\n  this.parent_ = null;\n\n  /**\n   * The list of {@code onFulfilled} and {@code onRejected} callbacks added to\n   * this Promise by calls to {@code then()}.\n   * @private {Array.<CancellablePromise.CallbackEntry_>}\n   */\n  this.callbackEntries_ = null;\n\n  /**\n   * Whether the Promise is in the queue of Promises to execute.\n   * @private {boolean}\n   */\n  this.executing_ = false;\n\n  if (CancellablePromise.UNHANDLED_REJECTION_DELAY > 0) {\n    /**\n     * A timeout ID used when the {@code UNHANDLED_REJECTION_DELAY} is greater\n     * than 0 milliseconds. The ID is set when the Promise is rejected, and\n     * cleared only if an {@code onRejected} callback is invoked for the\n     * Promise (or one of its descendants) before the delay is exceeded.\n     *\n     * If the rejection is not handled before the timeout completes, the\n     * rejection reason is passed to the unhandled rejection handler.\n     * @private {number}\n     */\n    this.unhandledRejectionId_ = 0;\n  } else if (CancellablePromise.UNHANDLED_REJECTION_DELAY === 0) {\n    /**\n     * When the {@code UNHANDLED_REJECTION_DELAY} is set to 0 milliseconds, a\n     * boolean that is set if the Promise is rejected, and reset to false if an\n     * {@code onRejected} callback is invoked for the Promise (or one of its\n     * descendants). If the rejection is not handled before the next timestep,\n     * the rejection reason is passed to the unhandled rejection handler.\n     * @private {boolean}\n     */\n    this.hadUnhandledRejection_ = false;\n  }\n\n  try {\n    var self = this;\n    resolver.call(\n      opt_context, function(value) {\n        self.resolve_(CancellablePromise.State_.FULFILLED, value);\n      }, function(reason) {\n        self.resolve_(CancellablePromise.State_.REJECTED, reason);\n      });\n  } catch (e) {\n    this.resolve_(CancellablePromise.State_.REJECTED, e);\n  }\n};\n\n/**\n * The delay in milliseconds before a rejected Promise's reason is passed to\n * the rejection handler. By default, the rejection handler rethrows the\n * rejection reason so that it appears in the developer console or\n * {@code window.onerror} handler.\n * Rejections are rethrown as quickly as possible by default. A negative value\n * disables rejection handling entirely.\n * @type {number}\n */\nCancellablePromise.UNHANDLED_REJECTION_DELAY = 0;\n\n\n/**\n * The possible internal states for a Promise. These states are not directly\n * observable to external callers.\n * @enum {number}\n * @private\n */\nCancellablePromise.State_ = {\n  /** The Promise is waiting for resolution. */\n  PENDING: 0,\n\n  /** The Promise is blocked waiting for the result of another Thenable. */\n  BLOCKED: 1,\n\n  /** The Promise has been resolved with a fulfillment value. */\n  FULFILLED: 2,\n\n  /** The Promise has been resolved with a rejection reason. */\n  REJECTED: 3\n};\n\n\n/**\n * Typedef for entries in the callback chain. Each call to {@code then},\n * {@code thenCatch}, or {@code thenAlways} creates an entry containing the\n * functions that may be invoked once the Promise is resolved.\n *\n * @typedef {{\n *   child: CancellablePromise,\n *   onFulfilled: function(*),\n *   onRejected: function(*)\n * }}\n * @private\n */\nCancellablePromise.CallbackEntry_ = null;\n\n\n/**\n * @param {(TYPE|Thenable.<TYPE>|Thenable)=} opt_value\n * @return {!CancellablePromise.<TYPE>} A new Promise that is immediately resolved\n *     with the given value.\n * @template TYPE\n */\nCancellablePromise.resolve = function(opt_value) {\n  return new CancellablePromise(function(resolve) {\n      resolve(opt_value);\n    });\n};\n\n\n/**\n * @param {*=} opt_reason\n * @return {!CancellablePromise} A new Promise that is immediately rejected with the\n *     given reason.\n */\nCancellablePromise.reject = function(opt_reason) {\n  return new CancellablePromise(function(resolve, reject) {\n      reject(opt_reason);\n    });\n};\n\n\n/**\n * @param {!Array.<!(Thenable.<TYPE>|Thenable)>} promises\n * @return {!CancellablePromise.<TYPE>} A Promise that receives the result of the\n *     first Promise (or Promise-like) input to complete.\n * @template TYPE\n */\nCancellablePromise.race = function(promises) {\n  return new CancellablePromise(function(resolve, reject) {\n      if (!promises.length) {\n        resolve(undefined);\n      }\n      for (var i = 0, promise; (promise = promises[i]); i++) {\n        promise.then(resolve, reject);\n      }\n    });\n};\n\n\n/**\n * @param {!Array.<!(Thenable.<TYPE>|Thenable)>} promises\n * @return {!CancellablePromise.<!Array.<TYPE>>} A Promise that receives a list of\n *     every fulfilled value once every input Promise (or Promise-like) is\n *     successfully fulfilled, or is rejected by the first rejection result.\n * @template TYPE\n */\nCancellablePromise.all = function(promises) {\n  return new CancellablePromise(function(resolve, reject) {\n      var toFulfill = promises.length;\n      var values = [];\n\n      if (!toFulfill) {\n        resolve(values);\n        return;\n      }\n\n      var onFulfill = function(index, value) {\n        toFulfill--;\n        values[index] = value;\n        if (toFulfill === 0) {\n          resolve(values);\n        }\n      };\n\n      var onReject = function(reason) {\n        reject(reason);\n      };\n\n      for (var i = 0, promise; (promise = promises[i]); i++) {\n        promise.then(partial(onFulfill, i), onReject);\n      }\n    });\n};\n\n\n/**\n * @param {!Array.<!(Thenable.<TYPE>|Thenable)>} promises\n * @return {!CancellablePromise.<TYPE>} A Promise that receives the value of\n *     the first input to be fulfilled, or is rejected with a list of every\n *     rejection reason if all inputs are rejected.\n * @template TYPE\n */\nCancellablePromise.firstFulfilled = function(promises) {\n  return new CancellablePromise(function(resolve, reject) {\n      var toReject = promises.length;\n      var reasons = [];\n\n      if (!toReject) {\n        resolve(undefined);\n        return;\n      }\n\n      var onFulfill = function(value) {\n        resolve(value);\n      };\n\n      var onReject = function(index, reason) {\n        toReject--;\n        reasons[index] = reason;\n        if (toReject === 0) {\n          reject(reasons);\n        }\n      };\n\n      for (var i = 0, promise; (promise = promises[i]); i++) {\n        promise.then(onFulfill, partial(onReject, i));\n      }\n    });\n};\n\n\n/**\n * Adds callbacks that will operate on the result of the Promise, returning a\n * new child Promise.\n *\n * If the Promise is fulfilled, the {@code onFulfilled} callback will be invoked\n * with the fulfillment value as argument, and the child Promise will be\n * fulfilled with the return value of the callback. If the callback throws an\n * exception, the child Promise will be rejected with the thrown value instead.\n *\n * If the Promise is rejected, the {@code onRejected} callback will be invoked\n * with the rejection reason as argument, and the child Promise will be rejected\n * with the return value (or thrown value) of the callback.\n *\n * @override\n */\nCancellablePromise.prototype.then = function(opt_onFulfilled, opt_onRejected, opt_context) {\n  return this.addChildPromise_(\n    isFunction(opt_onFulfilled) ? opt_onFulfilled : null,\n    isFunction(opt_onRejected) ? opt_onRejected : null,\n    opt_context);\n};\nThenable.addImplementation(CancellablePromise);\n\n\n/**\n * Adds a callback that will be invoked whether the Promise is fulfilled or\n * rejected. The callback receives no argument, and no new child Promise is\n * created. This is useful for ensuring that cleanup takes place after certain\n * asynchronous operations. Callbacks added with {@code thenAlways} will be\n * executed in the same order with other calls to {@code then},\n * {@code thenAlways}, or {@code thenCatch}.\n *\n * Since it does not produce a new child Promise, cancellation propagation is\n * not prevented by adding callbacks with {@code thenAlways}. A Promise that has\n * a cleanup handler added with {@code thenAlways} will be canceled if all of\n * its children created by {@code then} (or {@code thenCatch}) are canceled.\n *\n * @param {function(this:THIS): void} onResolved A function that will be invoked\n *     when the Promise is resolved.\n * @param {THIS=} opt_context An optional context object that will be the\n *     execution context for the callbacks. By default, functions are executed\n *     in the global scope.\n * @return {!CancellablePromise.<TYPE>} This Promise, for chaining additional calls.\n * @template THIS\n */\nCancellablePromise.prototype.thenAlways = function(onResolved, opt_context) {\n  var callback = function() {\n    try {\n      // Ensure that no arguments are passed to onResolved.\n      onResolved.call(opt_context);\n    } catch (err) {\n      CancellablePromise.handleRejection_.call(null, err);\n    }\n  };\n\n  this.addCallbackEntry_({\n    child: null,\n    onRejected: callback,\n    onFulfilled: callback\n  });\n  return this;\n};\n\n\n/**\n * Adds a callback that will be invoked only if the Promise is rejected. This\n * is equivalent to {@code then(null, onRejected)}.\n *\n * @param {!function(this:THIS, *): *} onRejected A function that will be\n *     invoked with the rejection reason if the Promise is rejected.\n * @param {THIS=} opt_context An optional context object that will be the\n *     execution context for the callbacks. By default, functions are executed\n *     in the global scope.\n * @return {!CancellablePromise} A new Promise that will receive the result of the\n *     callback.\n * @template THIS\n */\nCancellablePromise.prototype.thenCatch = function(onRejected, opt_context) {\n  return this.addChildPromise_(null, onRejected, opt_context);\n};\n\n/**\n * Alias of {@link CancellablePromise.prototype.thenCatch}\n */\nCancellablePromise.prototype.catch = CancellablePromise.prototype.thenCatch;\n\n\n/**\n * Cancels the Promise if it is still pending by rejecting it with a cancel\n * Error. No action is performed if the Promise is already resolved.\n *\n * All child Promises of the canceled Promise will be rejected with the same\n * cancel error, as with normal Promise rejection. If the Promise to be canceled\n * is the only child of a pending Promise, the parent Promise will also be\n * canceled. Cancellation may propagate upward through multiple generations.\n *\n * @param {string=} opt_message An optional debugging message for describing the\n *     cancellation reason.\n */\nCancellablePromise.prototype.cancel = function(opt_message) {\n  if (this.state_ === CancellablePromise.State_.PENDING) {\n    async.run(function() {\n      var err = new CancellablePromise.CancellationError(opt_message);\n      err.IS_CANCELLATION_ERROR = true;\n      this.cancelInternal_(err);\n    }, this);\n  }\n};\n\n\n/**\n * Cancels this Promise with the given error.\n *\n * @param {!Error} err The cancellation error.\n * @private\n */\nCancellablePromise.prototype.cancelInternal_ = function(err) {\n  if (this.state_ === CancellablePromise.State_.PENDING) {\n    if (this.parent_) {\n      // Cancel the Promise and remove it from the parent's child list.\n      this.parent_.cancelChild_(this, err);\n    } else {\n      this.resolve_(CancellablePromise.State_.REJECTED, err);\n    }\n  }\n};\n\n\n/**\n * Cancels a child Promise from the list of callback entries. If the Promise has\n * not already been resolved, reject it with a cancel error. If there are no\n * other children in the list of callback entries, propagate the cancellation\n * by canceling this Promise as well.\n *\n * @param {!CancellablePromise} childPromise The Promise to cancel.\n * @param {!Error} err The cancel error to use for rejecting the Promise.\n * @private\n */\nCancellablePromise.prototype.cancelChild_ = function(childPromise, err) {\n  if (!this.callbackEntries_) {\n    return;\n  }\n  var childCount = 0;\n  var childIndex = -1;\n\n  // Find the callback entry for the childPromise, and count whether there are\n  // additional child Promises.\n  for (var i = 0, entry; (entry = this.callbackEntries_[i]); i++) {\n    var child = entry.child;\n    if (child) {\n      childCount++;\n      if (child === childPromise) {\n        childIndex = i;\n      }\n      if (childIndex >= 0 && childCount > 1) {\n        break;\n      }\n    }\n  }\n\n  // If the child Promise was the only child, cancel this Promise as well.\n  // Otherwise, reject only the child Promise with the cancel error.\n  if (childIndex >= 0) {\n    if (this.state_ === CancellablePromise.State_.PENDING && childCount === 1) {\n      this.cancelInternal_(err);\n    } else {\n      var callbackEntry = this.callbackEntries_.splice(childIndex, 1)[0];\n      this.executeCallback_(\n        callbackEntry, CancellablePromise.State_.REJECTED, err);\n    }\n  }\n};\n\n\n/**\n * Adds a callback entry to the current Promise, and schedules callback\n * execution if the Promise has already been resolved.\n *\n * @param {CancellablePromise.CallbackEntry_} callbackEntry Record containing\n *     {@code onFulfilled} and {@code onRejected} callbacks to execute after\n *     the Promise is resolved.\n * @private\n */\nCancellablePromise.prototype.addCallbackEntry_ = function(callbackEntry) {\n  if ((!this.callbackEntries_ || !this.callbackEntries_.length) &&\n    (this.state_ === CancellablePromise.State_.FULFILLED ||\n    this.state_ === CancellablePromise.State_.REJECTED)) {\n    this.scheduleCallbacks_();\n  }\n  if (!this.callbackEntries_) {\n    this.callbackEntries_ = [];\n  }\n  this.callbackEntries_.push(callbackEntry);\n};\n\n\n/**\n * Creates a child Promise and adds it to the callback entry list. The result of\n * the child Promise is determined by the state of the parent Promise and the\n * result of the {@code onFulfilled} or {@code onRejected} callbacks as\n * specified in the Promise resolution procedure.\n *\n * @see http://promisesaplus.com/#the__method\n *\n * @param {?function(this:THIS, TYPE):\n *          (RESULT|CancellablePromise.<RESULT>|Thenable)} onFulfilled A callback that\n *     will be invoked if the Promise is fullfilled, or null.\n * @param {?function(this:THIS, *): *} onRejected A callback that will be\n *     invoked if the Promise is rejected, or null.\n * @param {THIS=} opt_context An optional execution context for the callbacks.\n *     in the default calling context.\n * @return {!CancellablePromise} The child Promise.\n * @template RESULT,THIS\n * @private\n */\nCancellablePromise.prototype.addChildPromise_ = function(\nonFulfilled, onRejected, opt_context) {\n\n  var callbackEntry = {\n    child: null,\n    onFulfilled: null,\n    onRejected: null\n  };\n\n  callbackEntry.child = new CancellablePromise(function(resolve, reject) {\n    // Invoke onFulfilled, or resolve with the parent's value if absent.\n    callbackEntry.onFulfilled = onFulfilled ? function(value) {\n      try {\n        var result = onFulfilled.call(opt_context, value);\n        resolve(result);\n      } catch (err) {\n        reject(err);\n      }\n    } : resolve;\n\n    // Invoke onRejected, or reject with the parent's reason if absent.\n    callbackEntry.onRejected = onRejected ? function(reason) {\n      try {\n        var result = onRejected.call(opt_context, reason);\n        if (!isDef(result) && reason.IS_CANCELLATION_ERROR) {\n          // Propagate cancellation to children if no other result is returned.\n          reject(reason);\n        } else {\n          resolve(result);\n        }\n      } catch (err) {\n        reject(err);\n      }\n    } : reject;\n  });\n\n  callbackEntry.child.parent_ = this;\n  this.addCallbackEntry_(\n    /** @type {CancellablePromise.CallbackEntry_} */ (callbackEntry));\n  return callbackEntry.child;\n};\n\n\n/**\n * Unblocks the Promise and fulfills it with the given value.\n *\n * @param {TYPE} value\n * @private\n */\nCancellablePromise.prototype.unblockAndFulfill_ = function(value) {\n  if (this.state_ !== CancellablePromise.State_.BLOCKED) {\n    throw new Error('CancellablePromise is not blocked.');\n  }\n  this.state_ = CancellablePromise.State_.PENDING;\n  this.resolve_(CancellablePromise.State_.FULFILLED, value);\n};\n\n\n/**\n * Unblocks the Promise and rejects it with the given rejection reason.\n *\n * @param {*} reason\n * @private\n */\nCancellablePromise.prototype.unblockAndReject_ = function(reason) {\n  if (this.state_ !== CancellablePromise.State_.BLOCKED) {\n    throw new Error('CancellablePromise is not blocked.');\n  }\n  this.state_ = CancellablePromise.State_.PENDING;\n  this.resolve_(CancellablePromise.State_.REJECTED, reason);\n};\n\n\n/**\n * Attempts to resolve a Promise with a given resolution state and value. This\n * is a no-op if the given Promise has already been resolved.\n *\n * If the given result is a Thenable (such as another Promise), the Promise will\n * be resolved with the same state and result as the Thenable once it is itself\n * resolved.\n *\n * If the given result is not a Thenable, the Promise will be fulfilled or\n * rejected with that result based on the given state.\n *\n * @see http://promisesaplus.com/#the_promise_resolution_procedure\n *\n * @param {CancellablePromise.State_} state\n * @param {*} x The result to apply to the Promise.\n * @private\n */\nCancellablePromise.prototype.resolve_ = function(state, x) {\n  if (this.state_ !== CancellablePromise.State_.PENDING) {\n    return;\n  }\n\n  if (this === x) {\n    state = CancellablePromise.State_.REJECTED;\n    x = new TypeError('CancellablePromise cannot resolve to itself');\n\n  } else if (Thenable.isImplementedBy(x)) {\n    x = /** @type {!Thenable} */ (x);\n    this.state_ = CancellablePromise.State_.BLOCKED;\n    x.then(this.unblockAndFulfill_, this.unblockAndReject_, this);\n    return;\n\n  } else if (isObject(x)) {\n    try {\n      var then = x.then;\n      if (isFunction(then)) {\n        this.tryThen_(x, then);\n        return;\n      }\n    } catch (e) {\n      state = CancellablePromise.State_.REJECTED;\n      x = e;\n    }\n  }\n\n  this.result_ = x;\n  this.state_ = state;\n  this.scheduleCallbacks_();\n\n  if (state === CancellablePromise.State_.REJECTED && !x.IS_CANCELLATION_ERROR) {\n    CancellablePromise.addUnhandledRejection_(this, x);\n  }\n};\n\n\n/**\n * Attempts to call the {@code then} method on an object in the hopes that it is\n * a Promise-compatible instance. This allows interoperation between different\n * Promise implementations, however a non-compliant object may cause a Promise\n * to hang indefinitely. If the {@code then} method throws an exception, the\n * dependent Promise will be rejected with the thrown value.\n *\n * @see http://promisesaplus.com/#point-70\n *\n * @param {Thenable} thenable An object with a {@code then} method that may be\n *     compatible with the Promise/A+ specification.\n * @param {!Function} then The {@code then} method of the Thenable object.\n * @private\n */\nCancellablePromise.prototype.tryThen_ = function(thenable, then) {\n  this.state_ = CancellablePromise.State_.BLOCKED;\n  var promise = this;\n  var called = false;\n\n  var resolve = function(value) {\n    if (!called) {\n      called = true;\n      promise.unblockAndFulfill_(value);\n    }\n  };\n\n  var reject = function(reason) {\n    if (!called) {\n      called = true;\n      promise.unblockAndReject_(reason);\n    }\n  };\n\n  try {\n    then.call(thenable, resolve, reject);\n  } catch (e) {\n    reject(e);\n  }\n};\n\n\n/**\n * Executes the pending callbacks of a resolved Promise after a timeout.\n *\n * Section 2.2.4 of the Promises/A+ specification requires that Promise\n * callbacks must only be invoked from a call stack that only contains Promise\n * implementation code, which we accomplish by invoking callback execution after\n * a timeout. If {@code startExecution_} is called multiple times for the same\n * Promise, the callback chain will be evaluated only once. Additional callbacks\n * may be added during the evaluation phase, and will be executed in the same\n * event loop.\n *\n * All Promises added to the waiting list during the same browser event loop\n * will be executed in one batch to avoid using a separate timeout per Promise.\n *\n * @private\n */\nCancellablePromise.prototype.scheduleCallbacks_ = function() {\n  if (!this.executing_) {\n    this.executing_ = true;\n    async.run(this.executeCallbacks_, this);\n  }\n};\n\n\n/**\n * Executes all pending callbacks for this Promise.\n *\n * @private\n */\nCancellablePromise.prototype.executeCallbacks_ = function() {\n  while (this.callbackEntries_ && this.callbackEntries_.length) {\n    var entries = this.callbackEntries_;\n    this.callbackEntries_ = [];\n\n    for (var i = 0; i < entries.length; i++) {\n      this.executeCallback_(entries[i], this.state_, this.result_);\n    }\n  }\n  this.executing_ = false;\n};\n\n\n/**\n * Executes a pending callback for this Promise. Invokes an {@code onFulfilled}\n * or {@code onRejected} callback based on the resolved state of the Promise.\n *\n * @param {!CancellablePromise.CallbackEntry_} callbackEntry An entry containing the\n *     onFulfilled and/or onRejected callbacks for this step.\n * @param {CancellablePromise.State_} state The resolution status of the Promise,\n *     either FULFILLED or REJECTED.\n * @param {*} result The resolved result of the Promise.\n * @private\n */\nCancellablePromise.prototype.executeCallback_ = function(\ncallbackEntry, state, result) {\n  if (state === CancellablePromise.State_.FULFILLED) {\n    callbackEntry.onFulfilled(result);\n  } else {\n    this.removeUnhandledRejection_();\n    callbackEntry.onRejected(result);\n  }\n};\n\n\n/**\n * Marks this rejected Promise as having being handled. Also marks any parent\n * Promises in the rejected state as handled. The rejection handler will no\n * longer be invoked for this Promise (if it has not been called already).\n *\n * @private\n */\nCancellablePromise.prototype.removeUnhandledRejection_ = function() {\n  var p;\n  if (CancellablePromise.UNHANDLED_REJECTION_DELAY > 0) {\n    for (p = this; p && p.unhandledRejectionId_; p = p.parent_) {\n      clearTimeout(p.unhandledRejectionId_);\n      p.unhandledRejectionId_ = 0;\n    }\n  } else if (CancellablePromise.UNHANDLED_REJECTION_DELAY === 0) {\n    for (p = this; p && p.hadUnhandledRejection_; p = p.parent_) {\n      p.hadUnhandledRejection_ = false;\n    }\n  }\n};\n\n\n/**\n * Marks this rejected Promise as unhandled. If no {@code onRejected} callback\n * is called for this Promise before the {@code UNHANDLED_REJECTION_DELAY}\n * expires, the reason will be passed to the unhandled rejection handler. The\n * handler typically rethrows the rejection reason so that it becomes visible in\n * the developer console.\n *\n * @param {!CancellablePromise} promise The rejected Promise.\n * @param {*} reason The Promise rejection reason.\n * @private\n */\nCancellablePromise.addUnhandledRejection_ = function(promise, reason) {\n  if (CancellablePromise.UNHANDLED_REJECTION_DELAY > 0) {\n    promise.unhandledRejectionId_ = setTimeout(function() {\n      CancellablePromise.handleRejection_.call(null, reason);\n    }, CancellablePromise.UNHANDLED_REJECTION_DELAY);\n\n  } else if (CancellablePromise.UNHANDLED_REJECTION_DELAY === 0) {\n    promise.hadUnhandledRejection_ = true;\n    async.run(function() {\n      if (promise.hadUnhandledRejection_) {\n        CancellablePromise.handleRejection_.call(null, reason);\n      }\n    });\n  }\n};\n\n\n/**\n * A method that is invoked with the rejection reasons for Promises that are\n * rejected but have no {@code onRejected} callbacks registered yet.\n * @type {function(*)}\n * @private\n */\nCancellablePromise.handleRejection_ = async.throwException;\n\n\n/**\n * Sets a handler that will be called with reasons from unhandled rejected\n * Promises. If the rejected Promise (or one of its descendants) has an\n * {@code onRejected} callback registered, the rejection will be considered\n * handled, and the rejection handler will not be called.\n *\n * By default, unhandled rejections are rethrown so that the error may be\n * captured by the developer console or a {@code window.onerror} handler.\n *\n * @param {function(*)} handler A function that will be called with reasons from\n *     rejected Promises. Defaults to {@code async.throwException}.\n */\nCancellablePromise.setUnhandledRejectionHandler = function(handler) {\n  CancellablePromise.handleRejection_ = handler;\n};\n\n\n\n/**\n * Error used as a rejection reason for canceled Promises.\n *\n * @param {string=} opt_message\n * @constructor\n * @extends {Error}\n * @final\n */\nCancellablePromise.CancellationError = class extends Error {\n  constructor(opt_message) {\n     super(opt_message);\n\n     if (opt_message) {\n       this.message = opt_message;\n     }\n   }\n};\n\n/** @override */\nCancellablePromise.CancellationError.prototype.name = 'cancel';\n\nexport {CancellablePromise};\nexport default CancellablePromise;\n","'use strict';\n\n/**\n  * Debounces function execution.\n  * @param {!function()} fn\n  * @param {number} delay\n  * @return {!function()}\n  */\nfunction debounce(fn, delay) {\n\treturn function debounced() {\n\t\tvar args = arguments;\n\t\tcancelDebounce(debounced);\n\t\tdebounced.id = setTimeout(function() {\n\t\t\tfn.apply(null, args);\n\t\t}, delay);\n\t};\n}\n\n/**\n * Cancels the scheduled debounced function.\n */\nfunction cancelDebounce(debounced) {\n\tclearTimeout(debounced.id);\n}\n\nexport default debounce;\nexport { cancelDebounce, debounce };\n","'use strict';\n\nimport core from 'metal';\n\nconst REGEX = /([\\/])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])*)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?)/g;\n\n/**\n * Converts the given array of regex matches to a more readable object format.\n * @param {!Array<string>} matches\n * @return {!Object}\n */\nfunction convertMatchesToObj(matches) {\n\treturn {\n\t\tmatch: matches[0],\n\t\tprefix: matches[1],\n\t\tname: matches[2],\n\t\tparamPattern: matches[3],\n\t\tunnamedPattern: matches[4],\n\t\tmodifier: matches[5]\n\t};\n}\n\n/**\n * Converts the given tokens parsed from a route format string to a regex.\n * @param {!Array<string|!Object>} tokens\n * @return {!RegExp}\n */\nfunction convertTokensToRegex(tokens) {\n\tlet regex = '';\n\tfor (let i = 0; i < tokens.length; i++) {\n\t\tif (core.isString(tokens[i])) {\n\t\t\tregex += escape(tokens[i]);\n\t\t} else {\n\t\t\tlet capture = encloseNonCapturingGroup(tokens[i].pattern);\n\t\t\tif (tokens[i].repeat) {\n\t\t\t\tcapture += encloseNonCapturingGroup('\\\\/' + capture) + '*';\n\t\t\t}\n\t\t\tcapture = escape(tokens[i].prefix) + `(${capture})`;\n\t\t\tif (tokens[i].optional) {\n\t\t\t\tif (!tokens[i].partial) {\n\t\t\t\t\tcapture = encloseNonCapturingGroup(capture);\n\t\t\t\t}\n\t\t\t\tcapture += '?';\n\t\t\t}\n\t\t\tregex += capture;\n\t\t}\n\t}\n\treturn new RegExp('^' + makeTrailingSlashOptional(regex) + '$');\n}\n\n/**\n * Encloses the given regex pattern into a non capturing group.\n * @param {string} pattern\n * @return {string}\n */\nfunction encloseNonCapturingGroup(pattern) {\n\treturn `(?:${pattern})`;\n}\n\n/**\n * Escapes the given string to show up in the path regex.\n * @param {string} str\n * @return {string}\n */\nfunction escape(str) {\n\treturn str.replace(/([.+*?=^!:${}()[\\]|\\/\\\\])/g, '\\\\$1');\n}\n\n/**\n * Makes trailing slash optional on paths.\n * @param {string} regex\n * @param {string}\n */\nfunction makeTrailingSlashOptional(regex) {\n\tif (/\\/$/.test(regex)) {\n\t\tregex += '?';\n\t} else {\n\t\tregex += '\\\\/?';\n\t}\n\treturn regex;\n}\n\n/**\n * Parses the given route format string into tokens representing its contents.\n * @param {!Array|string} routeOrTokens Either a route format string or tokens\n *     previously parsed via the `parse` function.\n * @return {!Array<string|!Object>} An array of tokens that can be either plain\n *     strings (part of the route) or objects containing informations on params.\n */\nexport function parse(routeOrTokens) {\n\tif (!core.isString(routeOrTokens)) {\n\t\treturn routeOrTokens;\n\t}\n\n\tconst route = routeOrTokens;\n\tlet unnamedCount = 0;\n\tconst tokens = [];\n\tlet currPath = '';\n\tlet index = 0;\n\n\tlet matches = REGEX.exec(route);\n\twhile (matches) {\n\t\tconst data = convertMatchesToObj(matches);\n\n\t\tcurrPath = route.slice(index, matches.index);\n\t\tindex = matches.index + data.match.length;\n\t\ttokens.push(currPath);\n\n\t\ttokens.push({\n\t\t\tname: data.name ? data.name : '' + unnamedCount++,\n\t\t\tpartial: route[index] && route[index] !== data.prefix,\n\t\t\tprefix: data.prefix || '',\n\t\t\tpattern: data.paramPattern || data.unnamedPattern || '[^\\\\/]+',\n\t\t\trepeat: data.modifier === '*' || data.modifier === '+',\n\t\t\toptional: data.modifier === '*' || data.modifier === '?'\n\t\t});\n\n\t\tmatches = REGEX.exec(route);\n\t}\n\n\tif (index < route.length) {\n\t\ttokens.push(route.substr(index));\n\t}\n\treturn tokens;\n}\n\n/**\n * Converts the given route format string to a regex that can extract param\n * data from paths matching it.\n * @param {!Array|string} routeOrTokens Either a route format string or tokens\n *     previously parsed via the `parse` function.\n * @return {!RegExp}\n */\nexport function toRegex(routeOrTokens) {\n\treturn convertTokensToRegex(parse(routeOrTokens));\n}\n\n/**\n * Extracts data from the given path according to the specified route format.\n * @param {!Array|string} routeOrTokens Either a route format string or tokens\n *     previously parsed via the `parse` function.\n * @param {string} The path to extract param data from.\n * @return {Object<string, string>} The data object, or null if the path doesn't\n *     match the given format.\n */\nexport function extractData(routeOrTokens, path) {\n\tconst data = {};\n\tconst tokens = parse(routeOrTokens);\n\tconst match = path.match(convertTokensToRegex(tokens));\n\n\tif (!match) {\n\t\treturn null;\n\t}\n\n\tlet paramIndex = 1;\n\tfor (let i = 0; i < tokens.length; i++) {\n\t\tif (!core.isString(tokens[i])) {\n\t\t\tlet value = match[paramIndex++];\n\t\t\tif (core.isDef(value)) {\n\t\t\t\tif (tokens[i].repeat) {\n\t\t\t\t\tvalue = value.split('/');\n\t\t\t\t}\n\t\t\t\tdata[tokens[i].name] = value;\n\t\t\t}\n\t\t}\n\t}\n\treturn data;\n}\n","'use strict';\n\nimport { isDefAndNotNull, isFunction, isString } from 'metal';\nimport { extractData, parse, toRegex } from 'metal-path-parser';\n\nclass Route {\n\n\t/**\n\t * Route class.\n\t * @param {!string|RegExp|Function} path\n\t * @param {!Function} handler\n\t * @constructor\n\t */\n\tconstructor(path, handler) {\n\t\tif (!isDefAndNotNull(path)) {\n\t\t\tthrow new Error('Route path not specified.');\n\t\t}\n\t\tif (!isFunction(handler)) {\n\t\t\tthrow new Error('Route handler is not a function.');\n\t\t}\n\n\t\t/**\n\t\t * Defines the handler which will execute once a URL in the application\n\t\t * matches the path.\n\t\t * @type {!Function}\n\t\t * @protected\n\t\t */\n\t\tthis.handler = handler;\n\n\t\t/**\n\t\t * Defines the path which will trigger the route handler.\n\t\t * @type {!string|RegExp|Function}\n\t\t * @protected\n\t\t */\n\t\tthis.path = path;\n\t}\n\n\t/**\n\t* Builds parsed data (regex and tokens) for this route.\n\t* @return {!Object}\n\t* @protected\n\t*/\n\tbuildParsedData_() {\n\t\tif (!this.parsedData_) {\n\t\t\tvar tokens = parse(this.path);\n\t\t\tvar regex = toRegex(tokens);\n\t\t\tthis.parsedData_ = {\n\t\t\t\tregex,\n\t\t\t\ttokens\n\t\t\t};\n\t\t}\n\t\treturn this.parsedData_;\n\t}\n\n\t/**\n\t * Extracts param data from the given path, according to this route.\n\t * @param {string} path The url path to extract params from.\n\t * @return {Object} The extracted data, if the path matches this route, or\n\t *     null otherwise.\n\t */\n\textractParams(path) {\n\t\tif (isString(this.path)) {\n\t\t\treturn extractData(this.buildParsedData_().tokens, path);\n\t\t}\n\t\treturn {};\n\t}\n\n\t/**\n\t * Gets the route handler.\n\t * @return {!Function}\n\t */\n\tgetHandler() {\n\t\treturn this.handler;\n\t}\n\n\t/**\n\t * Gets the route path.\n\t * @return {!string|RegExp|Function}\n\t */\n\tgetPath() {\n\t\treturn this.path;\n\t}\n\n\t/**\n \t * Matches if the router can handle the tested path.\n \t * @param {!string} value Path to test (may contain the querystring part).\n\t * @return {boolean} Returns true if matches any route.\n\t */\n\tmatchesPath(value) {\n\t\tvar path = this.path;\n\n\t\tif (isFunction(path)) {\n\t\t\treturn path(value);\n\t\t}\n\t\tif (isString(path)) {\n\t\t\tpath = this.buildParsedData_().regex;\n\t\t}\n\t\tif (path instanceof RegExp) {\n\t\t\treturn value.search(path) > -1;\n\t\t}\n\n\t\treturn false;\n\t}\n\n}\n\nexport default Route;\n","'use strict';\n\nimport { Disposable } from 'metal';\n\nclass Cacheable extends Disposable {\n\n\t/**\n\t * Abstract class for defining cacheable behavior.\n\t * @constructor\n\t */\n\tconstructor() {\n\t\tsuper();\n\n\t\t/**\n\t\t * Holds the cached data.\n\t\t * @type {!Object}\n\t\t * @default null\n\t\t * @protected\n\t\t */\n\t\tthis.cache = null;\n\n\t\t/**\n\t\t * Holds whether class is cacheable.\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t * @protected\n\t\t */\n\t\tthis.cacheable = false;\n\t}\n\n\t/**\n\t * Adds content to the cache.\n\t * @param {string} content Content to be cached.\n\t * @chainable\n\t */\n\taddCache(content) {\n\t\tif (this.cacheable) {\n\t\t\tthis.cache = content;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Clears the cache.\n\t * @chainable\n\t */\n\tclearCache() {\n\t\tthis.cache = null;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Disposes of this instance's object references.\n\t * @override\n\t */\n\tdisposeInternal() {\n\t\tthis.clearCache();\n\t}\n\n\t/**\n\t * Gets the cached content.\n\t * @return {Object} Cached content.\n\t * @protected\n\t */\n\tgetCache() {\n\t\treturn this.cache;\n\t}\n\n\t/**\n\t * Whether the class is cacheable.\n\t * @return {boolean} Returns true when class is cacheable, false otherwise.\n\t */\n\tisCacheable() {\n\t\treturn this.cacheable;\n\t}\n\n\t/**\n\t * Sets whether the class is cacheable.\n\t * @param {boolean} cacheable\n\t */\n\tsetCacheable(cacheable) {\n\t\tif (!cacheable) {\n\t\t\tthis.clearCache();\n\t\t}\n\t\tthis.cacheable = cacheable;\n\t}\n\n}\n\nexport default Cacheable;\n","'use strict';\n\nimport { getUid } from 'metal';\nimport { globalEval } from 'metal-dom';\nimport Cacheable from '../cacheable/Cacheable';\nimport CancellablePromise from 'metal-promise';\n\nclass Screen extends Cacheable {\n\n\t/**\n\t * Screen class is a special type of route handler that provides helper\n\t * utilities that adds lifecycle and methods to provide content to each\n\t * registered surface.\n\t * @constructor\n\t * @extends {Cacheable}\n\t */\n\tconstructor() {\n\t\tsuper();\n\n\t\t/**\n\t\t * Holds the screen id.\n\t\t * @type {string}\n\t\t * @protected\n\t\t */\n\t\tthis.id = this.makeId_(getUid());\n\n\t\t/**\n\t\t * Holds the screen title. Relevant when the page title should be\n\t\t * upadated when screen is rendered.\n\t\t * @type {?string=}\n\t\t * @default null\n\t\t * @protected\n\t\t */\n\t\tthis.title = null;\n\t}\n\n\t/**\n\t * Fires when the screen is active. Allows a screen to perform any setup\n\t * that requires its DOM to be visible. Lifecycle.\n\t */\n\tactivate() {\n\t\tconsole.log('Screen [' + this + '] activate');\n\t}\n\n\t/**\n\t * Gives the Screen a chance to cancel the navigation and stop itself from\n\t * being deactivated. Can be used, for example, if the screen has unsaved\n\t * state. Lifecycle. Clean-up should not be preformed here, since the\n\t * navigation may still be cancelled. Do clean-up in deactivate.\n\t * @return {boolean=} If returns true, the current screen is locked and the\n\t *     next nagivation interrupted.\n\t */\n\tbeforeDeactivate() {\n\t\tconsole.log('Screen [' + this + '] beforeDeactivate');\n\t}\n\n\t/**\n\t * Gives the Screen a chance format the path before history update.\n\t * @path {!string} path Navigation path.\n\t * @return {!string} Navigation path to use on history.\n\t */\n\tbeforeUpdateHistoryPath(path) {\n\t\treturn path;\n\t}\n\n\t/**\n\t * Gives the Screen a chance format the state before history update.\n\t * @path {!object} state History state.\n\t * @return {!object} History state to use on history.\n\t */\n\tbeforeUpdateHistoryState(state) {\n\t\treturn state;\n\t}\n\n\t/**\n\t * Allows a screen to do any cleanup necessary after it has been\n\t * deactivated, for example cancelling outstanding requests or stopping\n\t * timers. Lifecycle.\n\t */\n\tdeactivate() {\n\t\tconsole.log('Screen [' + this + '] deactivate');\n\t}\n\n\t/**\n\t * Dispose a screen, either after it is deactivated (in the case of a\n\t * non-cacheable view) or when the App is itself disposed for whatever\n\t * reason. Lifecycle.\n\t */\n\tdisposeInternal() {\n\t\tsuper.disposeInternal();\n\t\tconsole.log('Screen [' + this + '] dispose');\n\t}\n\n\t/**\n\t * Allows a screen to evaluate scripts before the element is made visible.\n\t * Lifecycle.\n\t * @param {!object} surfaces Map of surfaces to flip keyed by surface id.\n\t * @return {?CancellablePromise=} This can return a promise, which will\n\t *     pause the navigation until it is resolved.\n\t */\n\tevaluateScripts(surfaces) {\n\t\tObject.keys(surfaces).forEach(sId => {\n\t\t\tif (surfaces[sId].activeChild) {\n\t\t\t\tglobalEval.runScriptsInElement(surfaces[sId].activeChild);\n\t\t\t}\n\t\t});\n\t\treturn CancellablePromise.resolve();\n\t}\n\n\t/**\n\t * Allows a screen to evaluate styles before the element is made visible.\n\t * Lifecycle.\n\t * @param {!object} surfaces Map of surfaces to flip keyed by surface id.\n\t * @return {?CancellablePromise=} This can return a promise, which will\n\t *     pause the navigation until it is resolved.\n\t */\n\tevaluateStyles() {\n\t\treturn CancellablePromise.resolve();\n\t}\n\n\t/**\n\t * Allows a screen to perform any setup immediately before the element is\n\t * made visible. Lifecycle.\n\t * @param {!object} surfaces Map of surfaces to flip keyed by surface id.\n\t * @return {?CancellablePromise=} This can return a promise, which will pause the\n\t *     navigation until it is resolved.\n\t */\n\tflip(surfaces) {\n\t\tconsole.log('Screen [' + this + '] flip');\n\n\t\tvar transitions = [];\n\n\t\tObject.keys(surfaces).forEach(sId => {\n\t\t\tvar surface = surfaces[sId];\n\t\t\tvar deferred = surface.show(this.id);\n\t\t\ttransitions.push(deferred);\n\t\t});\n\n\t\treturn CancellablePromise.all(transitions);\n\t}\n\n\t/**\n\t * Gets the screen id.\n\t * @return {string}\n\t */\n\tgetId() {\n\t\treturn this.id;\n\t}\n\n\t/**\n\t * Returns the content for the given surface, or null if the surface isn't\n\t * used by this screen. This will be called when a screen is initially\n\t * constructed or, if a screen is non-cacheable, when navigated.\n\t * @param {!string} surfaceId The id of the surface DOM element.\n\t * @param {!Object} params Params extracted from the current path.\n\t * @return {?string|Element=} This can return a string or node representing\n\t *     the content of the surface. If returns falsy values surface default\n\t *     content is restored.\n\t */\n\tgetSurfaceContent() {\n\t\tconsole.log('Screen [' + this + '] getSurfaceContent');\n\t}\n\n\t/**\n\t * Gets the screen title.\n\t * @return {?string=}\n\t */\n\tgetTitle() {\n\t\treturn this.title;\n\t}\n\n\t/**\n\t * Returns all contents for the surfaces. This will pass the loaded content\n\t * to <code>Screen.load</code> with all information you\n\t * need to fulfill the surfaces. Lifecycle.\n\t * @param {!string=} path The requested path.\n\t * @return {!CancellablePromise} This can return a string representing the\n\t *     contents of the surfaces or a promise, which will pause the navigation\n\t *     until it is resolved. This is useful for loading async content.\n\t */\n\tload() {\n\t\tconsole.log('Screen [' + this + '] load');\n\t\treturn CancellablePromise.resolve();\n\t}\n\n\t/**\n\t * Makes the id for the screen.\n\t * @param {!string} id The screen id the content belongs too.\n\t * @return {string}\n\t * @private\n\t */\n\tmakeId_(id) {\n\t\treturn 'screen_' + id;\n\t}\n\n\t/**\n\t * Sets the screen id.\n\t * @param {!string} id\n\t */\n\tsetId(id) {\n\t\tthis.id = id;\n\t}\n\n\t/**\n\t * Sets the screen title.\n\t * @param {?string=} title\n\t */\n\tsetTitle(title) {\n\t\tthis.title = title;\n\t}\n\n\t/**\n\t * @return {string}\n\t */\n\ttoString() {\n\t\treturn this.id;\n\t}\n\n}\n\n/**\n * @param {*} object\n * @return {boolean} Whether a given instance implements\n * <code>Screen</code>.\n */\nScreen.isImplementedBy = function(object) {\n\treturn object instanceof Screen;\n};\n\nexport default Screen;\n","'use strict';\n\nimport globals from '../globals/globals';\nimport { Disposable, isDefAndNotNull } from 'metal';\nimport { append, removeChildren, exitDocument } from 'metal-dom';\nimport CancellablePromise from 'metal-promise';\n\nclass Surface extends Disposable {\n\n\t/**\n\t * Surface class representing the references to elements on the page that\n\t * can potentially be updated by <code>App</code>.\n\t * @param {string} id\n\t * @constructor\n\t */\n\tconstructor(id) {\n\t\tsuper();\n\n\t\tif (!id) {\n\t\t\tthrow new Error('Surface element id not specified. A surface element requires a valid id.');\n\t\t}\n\n\t\t/**\n\t\t * Holds the active child element.\n\t\t * @type {Element}\n\t\t * @default null\n\t\t * @protected\n\t\t */\n\t\tthis.activeChild = null;\n\n\t\t/**\n\t\t * Holds the default child element.\n\t\t * @type {Element}\n\t\t * @default null\n\t\t * @protected\n\t\t */\n\t\tthis.defaultChild = null;\n\n\t\t/**\n\t\t * Holds the element with the specified surface id, if not found creates a\n\t\t * new element with the specified id.\n\t\t * @type {Element}\n\t\t * @default null\n\t\t * @protected\n\t\t */\n\t\tthis.element = null;\n\n\t\t/**\n\t\t * Holds the surface id.\n\t\t * @type {String}\n\t\t * @default null\n\t\t * @protected\n\t\t */\n\t\tthis.id = id;\n\n\t\t/**\n\t\t * Holds the default transitionFn for the surfaces.\n\t\t * @param {?Element=} from The visible surface element.\n\t\t * @param {?Element=} to The surface element to be flipped.\n\t\t * @default null\n\t\t */\n\t\tthis.transitionFn = null;\n\n\t\tthis.defaultChild = this.getChild(Surface.DEFAULT);\n\t\tthis.maybeWrapContentAsDefault_();\n\t\tthis.activeChild = this.defaultChild;\n\t}\n\n\t/**\n\t * Adds screen content to a surface. If content hasn't been passed, see if\n\t * an element exists in the DOM that matches the id. By convention, the\n\t * element should already be nested in the right element and should have an\n\t * id that is a concatentation of the surface id + '-' + the screen id.\n\t * @param {!string} screenId The screen id the content belongs too.\n\t * @param {?string|Element=} opt_content The string content or element to\n\t *     add be added as surface content.\n\t * @return {Element}\n\t */\n\taddContent(screenId, opt_content) {\n\t\tvar child = this.defaultChild;\n\n\t\tif (isDefAndNotNull(opt_content)) {\n\t\t\tchild = this.getChild(screenId);\n\t\t\tif (child) {\n\t\t\t\tremoveChildren(child);\n\t\t\t} else {\n\t\t\t\tchild = this.createChild(screenId);\n\t\t\t\tthis.transition(child, null);\n\t\t\t}\n\t\t\tappend(child, opt_content);\n\t\t}\n\n\t\tvar element = this.getElement();\n\n\t\tif (element && child) {\n\t\t\tappend(element, child);\n\t\t}\n\n\t\treturn child;\n\t}\n\n\t/**\n\t * Creates child node for the surface.\n\t * @param {!string} screenId The screen id.\n\t * @return {Element}\n\t */\n\tcreateChild(screenId) {\n\t\tvar child = globals.document.createElement('div');\n\t\tchild.setAttribute('id', this.makeId_(screenId));\n\t\treturn child;\n\t}\n\n\t/**\n\t * Gets child node of the surface.\n\t * @param {!string} screenId The screen id.\n\t * @return {?Element}\n\t */\n\tgetChild(screenId) {\n\t\treturn globals.document.getElementById(this.makeId_(screenId));\n\t}\n\n\t/**\n\t * Gets the surface element from element, and sets it to the el property of\n\t * the current instance.\n\t * <code>this.element</code> will be used.\n\t * @return {?Element} The current surface element.\n\t */\n\tgetElement() {\n\t\tif (this.element) {\n\t\t\treturn this.element;\n\t\t}\n\t\tthis.element = globals.document.getElementById(this.id);\n\t\treturn this.element;\n\t}\n\n\t/**\n\t * Gets the surface id.\n\t * @return {String}\n\t */\n\tgetId() {\n\t\treturn this.id;\n\t}\n\n\t/**\n\t * Gets the surface transition function.\n\t * See <code>Surface.defaultTransition</code>.\n\t * @return {?Function=} The transition function.\n\t */\n\tgetTransitionFn() {\n\t\treturn this.transitionFn;\n\t}\n\n\t/**\n\t * Makes the id for the element that holds content for a screen.\n\t * @param {!string} screenId The screen id the content belongs too.\n\t * @return {String}\n\t * @private\n\t */\n\tmakeId_(screenId) {\n\t\treturn this.id + '-' + screenId;\n\t}\n\n\t/**\n\t * If default child is missing, wraps surface content as default child. If\n\t * surface have static content, make sure to place a\n\t * <code>surfaceId-default</code> element inside surface, only contents\n\t * inside the default child will be replaced by navigation.\n\t */\n\tmaybeWrapContentAsDefault_() {\n\t\tvar element = this.getElement();\n\t\tif (element && !this.defaultChild) {\n\t\t\tvar fragment = globals.document.createDocumentFragment();\n\t\t\twhile (element.firstChild) {\n\t\t\t\tfragment.appendChild(element.firstChild);\n\t\t\t}\n\t\t\tthis.defaultChild = this.addContent(Surface.DEFAULT, fragment);\n\t\t\tthis.transition(null, this.defaultChild);\n\t\t}\n\t}\n\n\t/**\n\t * Sets the surface id.\n\t * @param {!string} id\n\t */\n\tsetId(id) {\n\t\tthis.id = id;\n\t}\n\n\t/**\n\t * Sets the surface transition function.\n\t * See <code>Surface.defaultTransition</code>.\n\t * @param {?Function=} transitionFn The transition function.\n\t */\n\tsetTransitionFn(transitionFn) {\n\t\tthis.transitionFn = transitionFn;\n\t}\n\n\t/**\n\t * Shows screen content from a surface.\n\t * @param {String} screenId The screen id to show.\n\t * @return {CancellablePromise} Pauses the navigation until it is resolved.\n\t */\n\tshow(screenId) {\n\t\tvar from = this.activeChild;\n\t\tvar to = this.getChild(screenId);\n\t\tif (!to) {\n\t\t\tto = this.defaultChild;\n\t\t}\n\t\tthis.activeChild = to;\n\t\treturn this.transition(from, to).thenAlways(() => {\n\t\t\tif (from && from !== to) {\n\t\t\t\texitDocument(from);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Removes screen content from a surface.\n\t * @param {!string} screenId The screen id to remove.\n\t */\n\tremove(screenId) {\n\t\tvar child = this.getChild(screenId);\n\t\tif (child) {\n\t\t\texitDocument(child);\n\t\t}\n\t}\n\n\t/**\n\t * @return {String}\n\t */\n\ttoString() {\n\t\treturn this.id;\n\t}\n\n\t/**\n\t * Invokes the transition function specified on <code>transition</code> attribute.\n\t * @param {?Element=} from\n\t * @param {?Element=} to\n\t * @return {?CancellablePromise=} This can return a promise, which will pause the\n\t *     navigation until it is resolved.\n\t */\n\ttransition(from, to) {\n\t\tvar transitionFn = this.transitionFn || Surface.defaultTransition;\n\t\treturn CancellablePromise.resolve(transitionFn.call(this, from, to));\n\t}\n\n}\n\n/**\n   * Holds the default surface name. Elements on the page must contain a child\n   * element containing the default content, this element must be as following:\n   *\n   * Example:\n   * <code>\n   *   <div id=\"mysurface\">\n   *     <div id=\"mysurface-default\">Default surface content.</div>\n   *   </div>\n   * </code>\n   *\n   * The default content is relevant for the initial page content. When a\n   * screen doesn't provide content for the surface the default content is\n   * restored into the page.\n   *\n   * @type {!String}\n   * @default default\n   * @static\n   */\nSurface.DEFAULT = 'default';\n\n/**\n * Holds the default transition for all surfaces. Each surface could have its\n * own transition.\n *\n * Example:\n *\n * <code>\n * surface.setTransitionFn(function(from, to) {\n *   if (from) {\n *     from.style.display = 'none';\n *     from.classList.remove('flipped');\n *   }\n *   if (to) {\n *     to.style.display = 'block';\n *     to.classList.add('flipped');\n *   }\n *   return null;\n * });\n * </code>\n *\n * @param {?Element=} from The visible surface element.\n * @param {?Element=} to The surface element to be flipped.\n * @static\n */\nSurface.defaultTransition = function(from, to) {\n\tif (from) {\n\t\tfrom.style.display = 'none';\n\t\tfrom.classList.remove('flipped');\n\t}\n\tif (to) {\n\t\tto.style.display = 'block';\n\t\tto.classList.add('flipped');\n\t}\n};\n\nexport default Surface;\n","'use strict';\n\nimport { addClasses, delegate, match, on, removeClasses } from 'metal-dom';\nimport { array, async, isDefAndNotNull, isString } from 'metal';\nimport { EventEmitter, EventHandler } from 'metal-events';\nimport CancellablePromise from 'metal-promise';\nimport debounce from 'metal-debounce';\nimport globals from '../globals/globals';\nimport Route from '../route/Route';\nimport Screen from '../screen/Screen';\nimport Surface from '../surface/Surface';\nimport Uri from 'metal-uri';\nimport utils from '../utils/utils';\n\nclass App extends EventEmitter {\n\n\t/**\n\t * App class that handle routes and screens lifecycle.\n\t * @constructor\n\t * @extends {EventEmitter}\n\t */\n\tconstructor() {\n\t\tsuper();\n\n\t\t/**\n\t\t * Holds the active screen.\n\t\t * @type {?Screen}\n\t\t * @protected\n\t\t */\n\t\tthis.activeScreen = null;\n\n\t\t/**\n\t\t * Holds the active path containing the query parameters.\n\t\t * @type {?string}\n\t\t * @protected\n\t\t */\n\t\tthis.activePath = null;\n\n\t\t/**\n\t\t * Allows prevent navigate from dom prevented event.\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t * @protected\n\t\t */\n\t\tthis.allowPreventNavigate = true;\n\n\t\t/**\n\t\t * Holds link base path.\n\t\t * @type {!string}\n\t\t * @default ''\n\t\t * @protected\n\t\t */\n\t\tthis.basePath = '';\n\n\t\t/**\n\t\t * Holds the value of the browser path before a navigation is performed.\n\t\t * @type {!string}\n\t\t * @default the current browser path.\n\t\t * @protected\n\t\t */\n\t\tthis.browserPathBeforeNavigate = utils.getCurrentBrowserPathWithoutHash();\n\n\t\t/**\n\t\t * Captures scroll position from scroll event.\n\t\t * @type {!boolean}\n\t\t * @default true\n\t\t * @protected\n\t\t */\n\t\tthis.captureScrollPositionFromScrollEvent = true;\n\n\t\t/**\n\t\t * Holds the default page title.\n\t\t * @type {string}\n\t\t * @default null\n\t\t * @protected\n\t\t */\n\t\tthis.defaultTitle = globals.document.title;\n\n\t\t/**\n\t\t * Holds the form selector to define forms that are routed.\n\t\t * @type {!string}\n\t\t * @default form[enctype=\"multipart/form-data\"]:not([data-senna-off])\n\t\t * @protected\n\t\t */\n\t\tthis.formSelector = 'form[enctype=\"multipart/form-data\"]:not([data-senna-off])';\n\n\t\t/**\n\t\t * When enabled, the route matching ignores query string from the path.\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t * @protected\n\t\t */\n\t\tthis.ignoreQueryStringFromRoutePath = false;\n\n\t\t/**\n\t\t * Holds the link selector to define links that are routed.\n\t\t * @type {!string}\n\t\t * @default a:not([data-senna-off])\n\t\t * @protected\n\t\t */\n\t\tthis.linkSelector = 'a:not([data-senna-off]):not([target=\"_blank\"])';\n\n\t\t/**\n\t\t * Holds the loading css class.\n\t\t * @type {!string}\n\t\t * @default senna-loading\n\t\t * @protected\n\t\t */\n\t\tthis.loadingCssClass = 'senna-loading';\n\n\t\t/**\n\t\t * Using the History API to manage your URLs is awesome and, as it happens,\n\t\t * a crucial feature of good web apps. One of its downsides, however, is\n\t\t * that scroll positions are stored and then, more importantly, restored\n\t\t * whenever you traverse the history. This often means unsightly jumps as\n\t\t * the scroll position changes automatically, and especially so if your app\n\t\t * does transitions, or changes the contents of the page in any way.\n\t\t * Ultimately this leads to an horrible user experience. The good news is,\n\t\t * however, that there’s a potential fix: history.scrollRestoration.\n\t\t * https://developers.google.com/web/updates/2015/09/history-api-scroll-restoration\n\t\t * @type {boolean}\n\t\t * @protected\n\t\t */\n\t\tthis.nativeScrollRestorationSupported = ('scrollRestoration' in globals.window.history);\n\n\t\t/**\n\t\t * When set to true there is a pendingNavigate that has not yet been\n\t\t * resolved or rejected.\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t * @protected\n\t\t */\n\t\tthis.isNavigationPending = false;\n\n\t\t/**\n\t\t * Holds a deferred with the current navigation.\n\t\t * @type {?CancellablePromise}\n\t\t * @default null\n\t\t * @protected\n\t\t */\n\t\tthis.pendingNavigate = null;\n\n\t\t/**\n\t\t * Holds the window horizontal scroll position when the navigation using\n\t\t * back or forward happens to be restored after the surfaces are updated.\n\t\t * @type {!Number}\n\t\t * @default 0\n\t\t * @protected\n\t\t */\n\t\tthis.popstateScrollLeft = 0;\n\n\t\t/**\n\t\t * Holds the window vertical scroll position when the navigation using\n\t\t * back or forward happens to be restored after the surfaces are updated.\n\t\t * @type {!Number}\n\t\t * @default 0\n\t\t * @protected\n\t\t */\n\t\tthis.popstateScrollTop = 0;\n\n\t\t/**\n\t\t * Holds the redirect path containing the query parameters.\n\t\t * @type {?string}\n\t\t * @protected\n\t\t */\n\t\tthis.redirectPath = null;\n\n\t\t/**\n\t\t * Holds the screen routes configuration.\n\t\t * @type {?Array}\n\t\t * @default []\n\t\t * @protected\n\t\t */\n\t\tthis.routes = [];\n\n\t\t/**\n\t\t * Maps the screen instances by the url containing the parameters.\n\t\t * @type {?Object}\n\t\t * @default {}\n\t\t * @protected\n\t\t */\n\t\tthis.screens = {};\n\n\t\t/**\n\t\t * When set to true the first erroneous popstate fired on page load will be\n\t\t * ignored, only if <code>globals.window.history.state</code> is also\n\t\t * <code>null</code>.\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t * @protected\n\t\t */\n\t\tthis.skipLoadPopstate = false;\n\n\t\t/**\n\t\t * Maps that index the surfaces instances by the surface id.\n\t\t * @type {?Object}\n\t\t * @default {}\n\t\t * @protected\n\t\t */\n\t\tthis.surfaces = {};\n\n\t\t/**\n\t\t * When set to true, moves the scroll position after popstate, or to the\n\t\t * top of the viewport for new navigation. If false, the browser will\n\t\t * take care of scroll restoration.\n\t\t * @type {!boolean}\n\t\t * @default true\n\t\t * @protected\n\t\t */\n\t\tthis.updateScrollPosition = true;\n\n\t\tthis.appEventHandlers_ = new EventHandler();\n\n\t\tthis.appEventHandlers_.add(\n\t\t\ton(globals.window, 'scroll', debounce(this.onScroll_.bind(this), 100)),\n\t\t\ton(globals.window, 'load', this.onLoad_.bind(this)),\n\t\t\ton(globals.window, 'popstate', this.onPopstate_.bind(this))\n\t\t);\n\n\t\tthis.on('startNavigate', this.onStartNavigate_);\n\t\tthis.on('beforeNavigate', this.onBeforeNavigate_);\n\t\tthis.on('beforeNavigate', this.onBeforeNavigateDefault_, true);\n\n\t\tthis.setLinkSelector(this.linkSelector);\n\t\tthis.setFormSelector(this.formSelector);\n\t}\n\n\t/**\n\t * Adds one or more screens to the application.\n\t *\n\t * Example:\n\t *\n\t * <code>\n\t *   app.addRoutes({ path: '/foo', handler: FooScreen });\n\t *   or\n\t *   app.addRoutes([{ path: '/foo', handler: function(route) { return new FooScreen(); } }]);\n\t * </code>\n\t *\n\t * @param {Object} or {Array} routes Single object or an array of object.\n\t *     Each object should contain <code>path</code> and <code>screen</code>.\n\t *     The <code>path</code> should be a string or a regex that maps the\n\t *     navigation route to a screen class definition (not an instance), e.g:\n\t *         <code>{ path: \"/home:param1\", handler: MyScreen }</code>\n\t *         <code>{ path: /foo.+/, handler: MyScreen }</code>\n\t * @chainable\n\t */\n\taddRoutes(routes) {\n\t\tif (!Array.isArray(routes)) {\n\t\t\troutes = [routes];\n\t\t}\n\t\troutes.forEach((route) => {\n\t\t\tif (!(route instanceof Route)) {\n\t\t\t\troute = new Route(route.path, route.handler);\n\t\t\t}\n\t\t\tthis.routes.push(route);\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds one or more surfaces to the application.\n\t * @param {Surface|String|Array.<Surface|String>} surfaces\n\t *     Surface element id or surface instance. You can also pass an Array\n\t *     whichcontains surface instances or id. In case of ID, these should be\n\t *     the id of surface element.\n\t * @chainable\n\t */\n\taddSurfaces(surfaces) {\n\t\tif (!Array.isArray(surfaces)) {\n\t\t\tsurfaces = [surfaces];\n\t\t}\n\t\tsurfaces.forEach((surface) => {\n\t\t\tif (isString(surface)) {\n\t\t\t\tsurface = new Surface(surface);\n\t\t\t}\n\t\t\tthis.surfaces[surface.getId()] = surface;\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns if can navigate to path.\n\t * @param {!string} url\n\t * @return {boolean}\n\t */\n\tcanNavigate(url) {\n\t\tconst uri = utils.isWebUri(url);\n\n\t\tif (!uri) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst path = utils.getUrlPath(url);\n\n\t\tif (!this.isLinkSameOrigin_(uri.getHostname())) {\n\t\t\tconsole.log('Offsite link clicked');\n\t\t\treturn false;\n\t\t}\n\t\tif (!this.isSameBasePath_(path)) {\n\t\t\tconsole.log('Link clicked outside app\\'s base path');\n\t\t\treturn false;\n\t\t}\n\t\t// Prevents navigation if it's a hash change on the same url.\n\t\tif (uri.getHash() && utils.isCurrentBrowserPath(path)) {\n\t\t\treturn false;\n\t\t}\n\t\tif (!this.findRoute(path)) {\n\t\t\tconsole.log('No route for ' + path);\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Clear screens cache.\n\t * @chainable\n\t */\n\tclearScreensCache() {\n\t\tObject.keys(this.screens).forEach((path) => {\n\t\t\tif (path === this.activePath) {\n\t\t\t\tthis.activeScreen.clearCache();\n\t\t\t} else {\n\t\t\t\tthis.removeScreen(path);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Retrieves or create a screen instance to a path.\n\t * @param {!string} path Path containing the querystring part.\n\t * @return {Screen}\n\t */\n\tcreateScreenInstance(path, route) {\n\t\tif (!this.pendingNavigate && path === this.activePath) {\n\t\t\tconsole.log('Already at destination, refresh navigation');\n\t\t\treturn this.activeScreen;\n\t\t}\n\t\t/* jshint newcap: false */\n\t\tvar screen = this.screens[path];\n\t\tif (!screen) {\n\t\t\tvar handler = route.getHandler();\n\t\t\tif (handler === Screen || Screen.isImplementedBy(handler.prototype)) {\n\t\t\t\tscreen = new handler();\n\t\t\t} else {\n\t\t\t\tscreen = handler(route) || new Screen();\n\t\t\t}\n\t\t\tconsole.log('Create screen for [' + path + '] [' + screen + ']');\n\t\t}\n\t\treturn screen;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdisposeInternal() {\n\t\tif (this.activeScreen) {\n\t\t\tthis.removeScreen(this.activePath);\n\t\t}\n\t\tthis.clearScreensCache();\n\t\tthis.formEventHandler_.removeListener();\n\t\tthis.linkEventHandler_.removeListener();\n\t\tthis.appEventHandlers_.removeAllListeners();\n\t\tsuper.disposeInternal();\n\t}\n\n\t/**\n\t * Dispatches to the first route handler that matches the current path, if\n\t * any.\n\t * @return {CancellablePromise} Returns a pending request cancellable promise.\n\t */\n\tdispatch() {\n\t\treturn this.navigate(utils.getCurrentBrowserPath(), true);\n\t}\n\n\t/**\n\t * Starts navigation to a path.\n\t * @param {!string} path Path containing the querystring part.\n\t * @param {boolean=} opt_replaceHistory Replaces browser history.\n\t * @return {CancellablePromise} Returns a pending request cancellable promise.\n\t */\n\tdoNavigate_(path, opt_replaceHistory) {\n\t\tif (this.activeScreen && this.activeScreen.beforeDeactivate()) {\n\t\t\tthis.pendingNavigate = CancellablePromise.reject(new CancellablePromise.CancellationError('Cancelled by active screen'));\n\t\t\treturn this.pendingNavigate;\n\t\t}\n\n\t\tvar route = this.findRoute(path);\n\t\tif (!route) {\n\t\t\tthis.pendingNavigate = CancellablePromise.reject(new CancellablePromise.CancellationError('No route for ' + path));\n\t\t\treturn this.pendingNavigate;\n\t\t}\n\n\t\tconsole.log('Navigate to [' + path + ']');\n\n\t\tthis.stopPendingNavigate_();\n\t\tthis.isNavigationPending = true;\n\n\t\tvar nextScreen = this.createScreenInstance(path, route);\n\n\t\treturn nextScreen.load(path)\n\t\t\t.then(() => {\n\t\t\t\tif (this.activeScreen) {\n\t\t\t\t\tthis.activeScreen.deactivate();\n\t\t\t\t}\n\t\t\t\tthis.prepareNavigateHistory_(path, nextScreen, opt_replaceHistory);\n\t\t\t\tthis.prepareNavigateSurfaces_(\n\t\t\t\t\tnextScreen,\n\t\t\t\t\tthis.surfaces,\n\t\t\t\t\tthis.extractParams(route, path)\n\t\t\t\t);\n\t\t\t})\n\t\t\t.then(() => nextScreen.evaluateStyles(this.surfaces))\n\t\t\t.then(() => nextScreen.flip(this.surfaces))\n\t\t\t.then(() => nextScreen.evaluateScripts(this.surfaces))\n\t\t\t.then(() => this.maybeUpdateScrollPositionState_())\n\t\t\t.then(() => this.syncScrollPositionSyncThenAsync_())\n\t\t\t.then(() => this.finalizeNavigate_(path, nextScreen))\n\t\t\t.catch((reason) => {\n\t\t\t\tthis.isNavigationPending = false;\n\t\t\t\tthis.handleNavigateError_(path, nextScreen, reason);\n\t\t\t\tthrow reason;\n\t\t\t});\n\t}\n\n\t/**\n\t * Extracts params according to the given path and route.\n\t * @param {!Route} route\n\t * @param {string} path\n\t * @param {!Object}\n\t */\n\textractParams(route, path) {\n\t\treturn route.extractParams(this.getRoutePath(path));\n\t}\n\n\t/**\n\t * Finalizes a screen navigation.\n\t * @param {!string} path Path containing the querystring part.\n\t * @param {!Screen} nextScreen\n\t * @protected\n\t */\n\tfinalizeNavigate_(path, nextScreen) {\n\t\tnextScreen.activate();\n\n\t\tif (this.activeScreen && !this.activeScreen.isCacheable()) {\n\t\t\tif (this.activeScreen !== nextScreen) {\n\t\t\t\tthis.removeScreen(this.activePath);\n\t\t\t}\n\t\t}\n\n\t\tthis.activePath = path;\n\t\tthis.activeScreen = nextScreen;\n\t\tthis.browserPathBeforeNavigate = utils.getCurrentBrowserPathWithoutHash();\n\t\tthis.screens[path] = nextScreen;\n\t\tthis.isNavigationPending = false;\n\t\tthis.pendingNavigate = null;\n\t\tglobals.capturedFormElement = null;\n\t\tglobals.capturedFormButtonElement = null;\n\t\tconsole.log('Navigation done');\n\t}\n\n\t/**\n\t * Finds a route for the test path. Returns true if matches has a route,\n\t * otherwise returns null.\n\t * @param {!string} path Path containing the querystring part.\n\t * @return {?Object} Route handler if match any or <code>null</code> if the\n\t *     path is the same as the current url and the path contains a fragment.\n\t */\n\tfindRoute(path) {\n\t\tpath = this.getRoutePath(path);\n\t\tfor (var i = 0; i < this.routes.length; i++) {\n\t\t\tvar route = this.routes[i];\n\t\t\tif (route.matchesPath(path)) {\n\t\t\t\treturn route;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Gets allow prevent navigate.\n\t * @return {boolean}\n\t */\n\tgetAllowPreventNavigate() {\n\t\treturn this.allowPreventNavigate;\n\t}\n\n\t/**\n\t * Gets link base path.\n\t * @return {!string}\n\t */\n\tgetBasePath() {\n\t\treturn this.basePath;\n\t}\n\n\t/**\n\t * Gets the default page title.\n\t * @return {string} defaultTitle\n\t */\n\tgetDefaultTitle() {\n\t\treturn this.defaultTitle;\n\t}\n\n\t/**\n\t * Gets the form selector.\n\t * @return {!string}\n\t */\n\tgetFormSelector() {\n\t\treturn this.formSelector;\n\t}\n\n\t/**\n\t * Check if route matching is ignoring query string from the route path.\n\t * @return {boolean}\n\t */\n\tgetIgnoreQueryStringFromRoutePath() {\n\t\treturn this.ignoreQueryStringFromRoutePath;\n\t}\n\n\t/**\n\t * Gets the link selector.\n\t * @return {!string}\n\t */\n\tgetLinkSelector() {\n\t\treturn this.linkSelector;\n\t}\n\n\t/**\n\t * Gets the loading css class.\n\t * @return {!string}\n\t */\n\tgetLoadingCssClass() {\n\t\treturn this.loadingCssClass;\n\t}\n\n\t/**\n\t * Returns the given path formatted to be matched by a route. This will,\n\t * for example, remove the base path from it, but make sure it will end\n\t * with a '/'.\n\t * @param {string} path\n\t * @return {string}\n\t */\n\tgetRoutePath(path) {\n\t\tif (this.getIgnoreQueryStringFromRoutePath()) {\n\t\t\tpath = utils.getUrlPathWithoutHashAndSearch(path);\n\t\t\treturn utils.getUrlPathWithoutHashAndSearch(path.substr(this.basePath.length));\n\t\t}\n\n\t\tpath = utils.getUrlPathWithoutHash(path);\n\t\treturn utils.getUrlPathWithoutHash(path.substr(this.basePath.length));\n\t}\n\n\t/**\n\t * Gets the update scroll position value.\n\t * @return {boolean}\n\t */\n\tgetUpdateScrollPosition() {\n\t\treturn this.updateScrollPosition;\n\t}\n\n\t/**\n\t * Handle navigation error.\n\t * @param {!string} path Path containing the querystring part.\n\t * @param {!Screen} nextScreen\n\t * @param {!Error} error\n\t * @protected\n\t */\n\thandleNavigateError_(path, nextScreen, err) {\n\t\tconsole.log('Navigation error for [' + nextScreen + '] (' + err + ')');\n\t\tif (!utils.isCurrentBrowserPath(path)) {\n\t\t\tif (this.isNavigationPending && this.pendingNavigate) {\n\t\t\t\tthis.pendingNavigate.thenAlways(() => this.removeScreen(path), this);\n\t\t\t} else {\n\t\t\t\tthis.removeScreen(path);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Checks if app has routes.\n\t * @return {boolean}\n\t */\n\thasRoutes() {\n\t\treturn this.routes.length > 0;\n\t}\n\n\t/**\n\t * Tests if hostname is an offsite link.\n\t * @param {!string} hostname Link hostname to compare with\n\t *     <code>globals.window.location.hostname</code>.\n\t * @return {boolean}\n\t * @protected\n\t */\n\tisLinkSameOrigin_(hostname) {\n\t\treturn hostname === globals.window.location.hostname;\n\t}\n\n\t/**\n\t * Tests if link element has the same app's base path.\n\t * @param {!string} path Link path containing the querystring part.\n\t * @return {boolean}\n\t * @protected\n\t */\n\tisSameBasePath_(path) {\n\t\treturn path.indexOf(this.basePath) === 0;\n\t}\n\n\t/**\n\t * Lock the document scroll in order to avoid the browser native back and\n\t * forward navigation to change the scroll position. In the end of\n\t * navigation lifecycle scroll is repositioned.\n\t * @protected\n\t */\n\tlockHistoryScrollPosition_() {\n\t\tvar state = globals.window.history.state;\n\t\tif (!state) {\n\t\t\treturn;\n\t\t}\n\t\t// Browsers are inconsistent when re-positioning the scroll history on\n\t\t// popstate. At some browsers, history scroll happens before popstate, then\n\t\t// lock the scroll on the last known position as soon as possible after the\n\t\t// current JS execution context and capture the current value. Some others,\n\t\t// history scroll happens after popstate, in this case, we bind an once\n\t\t// scroll event to lock the las known position. Lastly, the previous two\n\t\t// behaviors can happen even on the same browser, hence the race will decide\n\t\t// the winner.\n\t\tvar winner = false;\n\t\tvar switchScrollPositionRace = function() {\n\t\t\tglobals.document.removeEventListener('scroll', switchScrollPositionRace, false);\n\t\t\tif (!winner) {\n\t\t\t\tglobals.window.scrollTo(state.scrollLeft, state.scrollTop);\n\t\t\t\twinner = true;\n\t\t\t}\n\t\t};\n\t\tasync.nextTick(switchScrollPositionRace);\n\t\tglobals.document.addEventListener('scroll', switchScrollPositionRace, false);\n\t}\n\n\t/**\n\t * If supported by the browser, disables native scroll restoration and\n\t * stores current value.\n\t */\n\tmaybeDisableNativeScrollRestoration() {\n\t\tif (this.nativeScrollRestorationSupported) {\n\t\t\tthis.nativeScrollRestoration_ = globals.window.history.scrollRestoration;\n\t\t\tglobals.window.history.scrollRestoration = 'manual';\n\t\t}\n\t}\n\n\t/**\n\t * Maybe navigate to a path.\n\t * @param {string} href Information about the link's href.\n\t * @param {Event} event Dom event that initiated the navigation.\n\t */\n\tmaybeNavigate_(href, event) {\n\t\tif (!this.canNavigate(href)) {\n\t\t\treturn;\n\t\t}\n\n\t\tglobals.capturedFormElement = event.capturedFormElement;\n\t\tglobals.capturedFormButtonElement = event.capturedFormButtonElement;\n\n\t\tvar navigateFailed = false;\n\t\ttry {\n\t\t\tthis.navigate(utils.getUrlPath(href), false, event);\n\t\t} catch (err) {\n\t\t\t// Do not prevent link navigation in case some synchronous error occurs\n\t\t\tnavigateFailed = true;\n\t\t}\n\n\t\tif (!navigateFailed) {\n\t\t\tevent.preventDefault();\n\t\t}\n\t}\n\n\t/**\n\t * Maybe reposition scroll to hashed anchor.\n\t */\n\tmaybeRepositionScrollToHashedAnchor() {\n\t\tconst hash = globals.window.location.hash;\n\t\tif (hash) {\n\t\t\tlet anchorElement = globals.document.getElementById(hash.substring(1));\n\t\t\tif (anchorElement) {\n\t\t\t\tconst {offsetLeft, offsetTop} = utils.getNodeOffset(anchorElement);\n\t\t\t\tglobals.window.scrollTo(offsetLeft, offsetTop);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * If supported by the browser, restores native scroll restoration to the\n\t * value captured by `maybeDisableNativeScrollRestoration`.\n\t */\n\tmaybeRestoreNativeScrollRestoration() {\n\t\tif (this.nativeScrollRestorationSupported && this.nativeScrollRestoration_) {\n\t\t\tglobals.window.history.scrollRestoration = this.nativeScrollRestoration_;\n\t\t}\n\t}\n\n\t/**\n\t * Maybe restore redirected path hash in case both the current path and\n\t * the given path are the same.\n\t * @param {!string} path Path before navigation.\n\t * @param {!string} redirectPath Path after navigation.\n\t * @param {!string} hash Hash to be added to the path.\n\t * @return {!string} Returns the path with the hash restored.\n\t */\n\tmaybeRestoreRedirectPathHash_(path, redirectPath, hash) {\n\t\tif (redirectPath === utils.getUrlPathWithoutHash(path)) {\n\t\t\treturn redirectPath + hash;\n\t\t}\n\t\treturn redirectPath;\n\t}\n\n\t/**\n\t * Maybe update scroll position in history state to anchor on path.\n\t * @param {!string} path Path containing anchor\n\t */\n\tmaybeUpdateScrollPositionState_() {\n\t\tvar hash = globals.window.location.hash;\n\t\tvar anchorElement = globals.document.getElementById(hash.substring(1));\n\t\tif (anchorElement) {\n\t\t\tconst {offsetLeft, offsetTop} = utils.getNodeOffset(anchorElement);\n\t\t\tthis.saveHistoryCurrentPageScrollPosition_(offsetTop, offsetLeft);\n\t\t}\n\t}\n\n\t/**\n\t * Navigates to the specified path if there is a route handler that matches.\n\t * @param {!string} path Path to navigate containing the base path.\n\t * @param {boolean=} opt_replaceHistory Replaces browser history.\n\t * @param {Event=} event Optional event object that triggered the navigation.\n\t * @return {CancellablePromise} Returns a pending request cancellable promise.\n\t */\n\tnavigate(path, opt_replaceHistory, opt_event) {\n\t\tif (!utils.isHtml5HistorySupported()) {\n\t\t\tthrow new Error('HTML5 History is not supported. Senna will not intercept navigation.');\n\t\t}\n\n\t\t// When reloading the same path do replaceState instead of pushState to\n\t\t// avoid polluting history with states with the same path.\n\t\tif (path === this.activePath) {\n\t\t\topt_replaceHistory = true;\n\t\t}\n\n\t\tthis.emit('beforeNavigate', {\n\t\t\tevent: opt_event,\n\t\t\tpath: path,\n\t\t\treplaceHistory: !!opt_replaceHistory\n\t\t});\n\n\t\treturn this.pendingNavigate;\n\t}\n\n\t/**\n\t * Befores navigation to a path.\n\t * @param {!Event} event Event facade containing <code>path</code> and\n\t *     <code>replaceHistory</code>.\n\t * @protected\n\t */\n\tonBeforeNavigate_(event) {\n\t\tif (globals.capturedFormElement) {\n\t\t\tevent.form = globals.capturedFormElement;\n\t\t}\n\t}\n\n\t/**\n\t * Befores navigation to a path. Runs after external listeners.\n\t * @param {!Event} event Event facade containing <code>path</code> and\n\t *     <code>replaceHistory</code>.\n\t * @protected\n\t */\n\tonBeforeNavigateDefault_(event) {\n\t\tif (this.pendingNavigate) {\n\t\t\tif (this.pendingNavigate.path === event.path) {\n\t\t\t\tconsole.log('Waiting...');\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tthis.emit('startNavigate', {\n\t\t\tform: event.form,\n\t\t\tpath: event.path,\n\t\t\treplaceHistory: event.replaceHistory\n\t\t});\n\t}\n\n\t/**\n\t * Intercepts document clicks and test link elements in order to decide\n\t * whether Surface app can navigate.\n\t * @param {!Event} event Event facade\n\t * @protected\n\t */\n\tonDocClickDelegate_(event) {\n\t\tif (event.altKey || event.ctrlKey || event.metaKey || event.shiftKey || event.button) {\n\t\t\tconsole.log('Navigate aborted, invalid mouse button or modifier key pressed.');\n\t\t\treturn;\n\t\t}\n\t\tthis.maybeNavigate_(event.delegateTarget.href, event);\n\t}\n\n\t/**\n\t * Intercepts document form submits and test action path in order to decide\n\t * whether Surface app can navigate.\n\t * @param {!Event} event Event facade\n\t * @protected\n\t */\n\tonDocSubmitDelegate_(event) {\n\t\tvar form = event.delegateTarget;\n\t\tif (form.method === 'get') {\n\t\t\tconsole.log('GET method not supported');\n\t\t\treturn;\n\t\t}\n\t\tevent.capturedFormElement = form;\n\t\tconst buttonSelector = 'button:not([type]),button[type=submit],input[type=submit]';\n\t\tif (match(globals.document.activeElement, buttonSelector)) {\n\t\t\tevent.capturedFormButtonElement = globals.document.activeElement;\n\t\t} else {\n\t\t\tevent.capturedFormButtonElement = form.querySelector(buttonSelector);\n\t\t}\n\t\tthis.maybeNavigate_(form.action, event);\n\t}\n\n\t/**\n\t * Listens to the window's load event in order to avoid issues with some browsers\n\t * that trigger popstate calls on the first load. For more information see\n\t * http://stackoverflow.com/questions/6421769/popstate-on-pages-load-in-chrome.\n\t * @protected\n\t */\n\tonLoad_() {\n\t\tthis.skipLoadPopstate = true;\n\t\tsetTimeout(() => {\n\t\t\t// The timeout ensures that popstate events will be unblocked right\n\t\t\t// after the load event occured, but not in the same event-loop cycle.\n\t\t\tthis.skipLoadPopstate = false;\n\t\t}, 0);\n\t\t// Try to reposition scroll to the hashed anchor when page loads.\n\t\tthis.maybeRepositionScrollToHashedAnchor();\n\t}\n\n\t/**\n\t * Handles browser history changes and fires app's navigation if the state\n\t * belows to us. If we detect a popstate and the state is <code>null</code>,\n\t * assume it is navigating to an external page or to a page we don't have\n\t * route, then <code>globals.window.location.reload()</code> is invoked in order to\n\t * reload the content to the current url.\n\t * @param {!Event} event Event facade\n\t * @protected\n\t */\n\tonPopstate_(event) {\n\t\tif (this.skipLoadPopstate) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Do not navigate if the popstate was triggered by a hash change.\n\t\tif (utils.isCurrentBrowserPath(this.browserPathBeforeNavigate)) {\n\t\t\tthis.maybeRepositionScrollToHashedAnchor();\n\t\t\treturn;\n\t\t}\n\n\t\tvar state = event.state;\n\n\t\tif (!state) {\n\t\t\tif (globals.window.location.hash) {\n\t\t\t\t// If senna is on an redirect path and a hash popstate happens\n\t\t\t\t// to a different url, reload the browser. This behavior doesn't\n\t\t\t\t// require senna to route hashed links and is closer to native\n\t\t\t\t// browser behavior.\n\t\t\t\tif (this.redirectPath && !utils.isCurrentBrowserPath(this.redirectPath)) {\n\t\t\t\t\tthis.reloadPage();\n\t\t\t\t}\n\t\t\t\t// Always try to reposition scroll to the hashed anchor when\n\t\t\t\t// hash popstate happens.\n\t\t\t\tthis.maybeRepositionScrollToHashedAnchor();\n\t\t\t} else {\n\t\t\t\tthis.reloadPage();\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tif (state.senna) {\n\t\t\tconsole.log('History navigation to [' + state.path + ']');\n\t\t\tthis.popstateScrollTop = state.scrollTop;\n\t\t\tthis.popstateScrollLeft = state.scrollLeft;\n\t\t\tif (!this.nativeScrollRestorationSupported) {\n\t\t\t\tthis.lockHistoryScrollPosition_();\n\t\t\t}\n\t\t\tthis.navigate(state.path, true);\n\t\t}\n\t}\n\n\t/**\n\t * Listens document scroll changes in order to capture the possible lock\n\t * scroll position for history scrolling.\n\t * @protected\n\t */\n\tonScroll_() {\n\t\tif (this.captureScrollPositionFromScrollEvent) {\n\t\t\tthis.saveHistoryCurrentPageScrollPosition_(globals.window.pageYOffset, globals.window.pageXOffset);\n\t\t}\n\t}\n\n\t/**\n\t * Starts navigation to a path.\n\t * @param {!Event} event Event facade containing <code>path</code> and\n\t *     <code>replaceHistory</code>.\n\t * @protected\n\t */\n\tonStartNavigate_(event) {\n\t\tthis.maybeDisableNativeScrollRestoration();\n\t\tthis.captureScrollPositionFromScrollEvent = false;\n\t\taddClasses(globals.document.documentElement, this.loadingCssClass);\n\n\t\tvar endNavigatePayload = {\n\t\t\tform: event.form,\n\t\t\tpath: event.path\n\t\t};\n\n\t\tthis.pendingNavigate = this.doNavigate_(event.path, event.replaceHistory)\n\t\t\t.catch((reason) => {\n\t\t\t\tendNavigatePayload.error = reason;\n\t\t\t\tthrow reason;\n\t\t\t})\n\t\t\t.thenAlways(() => {\n\t\t\t\tif (!this.pendingNavigate) {\n\t\t\t\t\tremoveClasses(globals.document.documentElement, this.loadingCssClass);\n\t\t\t\t\tthis.maybeRestoreNativeScrollRestoration();\n\t\t\t\t\tthis.captureScrollPositionFromScrollEvent = true;\n\t\t\t\t}\n\t\t\t\tthis.emit('endNavigate', endNavigatePayload);\n\t\t\t});\n\n\t\tthis.pendingNavigate.path = event.path;\n\t}\n\n\t/**\n\t * Prefetches the specified path if there is a route handler that matches.\n\t * @param {!string} path Path to navigate containing the base path.\n\t * @return {CancellablePromise} Returns a pending request cancellable promise.\n\t */\n\tprefetch(path) {\n\t\tvar route = this.findRoute(path);\n\t\tif (!route) {\n\t\t\treturn CancellablePromise.reject(new CancellablePromise.CancellationError('No route for ' + path));\n\t\t}\n\n\t\tconsole.log('Prefetching [' + path + ']');\n\n\t\tvar nextScreen = this.createScreenInstance(path, route);\n\n\t\treturn nextScreen.load(path)\n\t\t\t.then(() => this.screens[path] = nextScreen)\n\t\t\t.catch((reason) => {\n\t\t\t\tthis.handleNavigateError_(path, nextScreen, reason);\n\t\t\t\tthrow reason;\n\t\t\t});\n\t}\n\n\t/**\n\t * Prepares screen flip. Updates history state and surfaces content.\n\t * @param {!string} path Path containing the querystring part.\n\t * @param {!Screen} nextScreen\n\t * @param {boolean=} opt_replaceHistory Replaces browser history.\n\t */\n\tprepareNavigateHistory_(path, nextScreen, opt_replaceHistory) {\n\t\tlet title = nextScreen.getTitle();\n\t\tif (!isString(title)) {\n\t\t\ttitle = this.getDefaultTitle();\n\t\t}\n\t\tlet redirectPath = nextScreen.beforeUpdateHistoryPath(path);\n\t\tconst historyState = {\n\t\t\tform: isDefAndNotNull(globals.capturedFormElement),\n\t\t\tpath,\n\t\t\tredirectPath,\n\t\t\tscrollLeft: 0,\n\t\t\tscrollTop: 0,\n\t\t\tsenna: true\n\t\t};\n\t\tif (opt_replaceHistory) {\n\t\t\thistoryState.scrollTop = this.popstateScrollTop;\n\t\t\thistoryState.scrollLeft = this.popstateScrollLeft;\n\t\t}\n\t\tconst hash = new Uri(path).getHash();\n\t\tredirectPath = this.maybeRestoreRedirectPathHash_(path, redirectPath, hash);\n\t\tthis.updateHistory_(title, redirectPath, nextScreen.beforeUpdateHistoryState(historyState), opt_replaceHistory);\n\t\tthis.redirectPath = redirectPath;\n\t}\n\n\t/**\n\t * Prepares screen flip. Updates history state and surfaces content.\n\t * @param {!Screen} nextScreen\n\t * @param {!Object} surfaces Map of surfaces to flip keyed by surface id.\n\t * @param {!Object} params Params extracted from the current path.\n\t */\n\tprepareNavigateSurfaces_(nextScreen, surfaces, params) {\n\t\tObject.keys(surfaces).forEach((id) => {\n\t\t\tvar surfaceContent = nextScreen.getSurfaceContent(id, params);\n\t\t\tsurfaces[id].addContent(nextScreen.getId(), surfaceContent);\n\t\t\tconsole.log('Screen [' + nextScreen.getId() + '] add content to surface ' +\n\t\t\t\t'[' + surfaces[id] + '] [' + (isDefAndNotNull(surfaceContent) ? '...' : 'empty') + ']');\n\t\t});\n\t}\n\n\t/**\n\t * Reloads the page by performing `window.location.reload()`.\n\t */\n\treloadPage() {\n\t\tglobals.window.location.reload();\n\t}\n\n\t/**\n\t * Removes route instance from app routes.\n\t * @param {Route} route\n\t * @return {boolean} True if an element was removed.\n\t */\n\tremoveRoute(route) {\n\t\treturn array.remove(this.routes, route);\n\t}\n\n\t/**\n\t * Removes a screen.\n\t * @param {!string} path Path containing the querystring part.\n\t */\n\tremoveScreen(path) {\n\t\tvar screen = this.screens[path];\n\t\tif (screen) {\n\t\t\tObject.keys(this.surfaces).forEach((surfaceId) => this.surfaces[surfaceId].remove(screen.getId()));\n\t\t\tscreen.dispose();\n\t\t\tdelete this.screens[path];\n\t\t}\n\t}\n\n\t/**\n\t * Saves given scroll position into history state.\n\t * @param {!number} scrollTop Number containing the top scroll position to be saved.\n\t * @param {!number} scrollLeft Number containing the left scroll position to be saved.\n\t */\n\tsaveHistoryCurrentPageScrollPosition_(scrollTop, scrollLeft) {\n\t\tvar state = globals.window.history.state;\n\t\tif (state && state.senna) {\n\t\t\t[state.scrollTop, state.scrollLeft] = [scrollTop, scrollLeft];\n\t\t\tglobals.window.history.replaceState(state, null, null);\n\t\t}\n\t}\n\n\t/**\n\t * Sets allow prevent navigate.\n\t * @param {boolean} allowPreventNavigate\n\t */\n\tsetAllowPreventNavigate(allowPreventNavigate) {\n\t\tthis.allowPreventNavigate = allowPreventNavigate;\n\t}\n\n\t/**\n\t * Sets link base path.\n\t * @param {!string} path\n\t */\n\tsetBasePath(basePath) {\n\t\tthis.basePath = utils.removePathTrailingSlash(basePath);\n\t}\n\n\t/**\n\t * Sets the default page title.\n\t * @param {string} defaultTitle\n\t */\n\tsetDefaultTitle(defaultTitle) {\n\t\tthis.defaultTitle = defaultTitle;\n\t}\n\n\t/**\n\t * Sets the form selector.\n\t * @param {!string} formSelector\n\t */\n\tsetFormSelector(formSelector) {\n\t\tthis.formSelector = formSelector;\n\t\tif (this.formEventHandler_) {\n\t\t\tthis.formEventHandler_.removeListener();\n\t\t}\n\t\tthis.formEventHandler_ = delegate(document, 'submit', this.formSelector, this.onDocSubmitDelegate_.bind(this), this.allowPreventNavigate);\n\t}\n\n\t/**\n\t * Sets if route matching should ignore query string from the route path.\n\t * @param {boolean} ignoreQueryStringFromRoutePath\n\t */\n\tsetIgnoreQueryStringFromRoutePath(ignoreQueryStringFromRoutePath) {\n\t\tthis.ignoreQueryStringFromRoutePath = ignoreQueryStringFromRoutePath;\n\t}\n\n\t/**\n\t * Sets the link selector.\n\t * @param {!string} linkSelector\n\t */\n\tsetLinkSelector(linkSelector) {\n\t\tthis.linkSelector = linkSelector;\n\t\tif (this.linkEventHandler_) {\n\t\t\tthis.linkEventHandler_.removeListener();\n\t\t}\n\t\tthis.linkEventHandler_ = delegate(document, 'click', this.linkSelector, this.onDocClickDelegate_.bind(this), this.allowPreventNavigate);\n\t}\n\n\t/**\n\t * Sets the loading css class.\n\t * @param {!string} loadingCssClass\n\t */\n\tsetLoadingCssClass(loadingCssClass) {\n\t\tthis.loadingCssClass = loadingCssClass;\n\t}\n\n\t/**\n\t * Sets the update scroll position value.\n\t * @param {boolean} updateScrollPosition\n\t */\n\tsetUpdateScrollPosition(updateScrollPosition) {\n\t\tthis.updateScrollPosition = updateScrollPosition;\n\t}\n\n\t/**\n\t * Cancels pending navigate with <code>Cancel pending navigation</code> error.\n\t * @protected\n\t */\n\tstopPendingNavigate_() {\n\t\tif (this.pendingNavigate) {\n\t\t\tthis.pendingNavigate.cancel('Cancel pending navigation');\n\t\t\tthis.pendingNavigate = null;\n\t\t}\n\t}\n\n\t/**\n\t * Sync document scroll position twice, the first one synchronous and then\n\t * one inside <code>async.nextTick</code>. Relevant to browsers that fires\n\t * scroll restoration asynchronously after popstate.\n\t * @protected\n\t * @return {?CancellablePromise=}\n\t */\n\tsyncScrollPositionSyncThenAsync_() {\n\t\tvar state = globals.window.history.state;\n\t\tif (!state) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar scrollTop = state.scrollTop;\n\t\tvar scrollLeft = state.scrollLeft;\n\n\t\tvar sync = () => {\n\t\t\tif (this.updateScrollPosition) {\n\t\t\t\tglobals.window.scrollTo(scrollLeft, scrollTop);\n\t\t\t}\n\t\t};\n\n\t\treturn new CancellablePromise((resolve) => sync() & async.nextTick(() => sync() & resolve()));\n\t}\n\n\t/**\n\t * Updates or replace browser history.\n\t * @param {?string} title Document title.\n\t * @param {!string} path Path containing the querystring part.\n\t * @param {!object} state\n\t * @param {boolean=} opt_replaceHistory Replaces browser history.\n\t * @protected\n\t */\n\tupdateHistory_(title, path, state, opt_replaceHistory) {\n\t\tif (opt_replaceHistory) {\n\t\t\tglobals.window.history.replaceState(state, title, path);\n\t\t} else {\n\t\t\tglobals.window.history.pushState(state, title, path);\n\t\t}\n\n\t\tlet titleNode = globals.document.querySelector('title');\n\t\tif (titleNode) {\n\t\t\ttitleNode.innerHTML = title;\n\t\t} else {\n\t\t\tglobals.document.title = title;\n\t\t}\n\t}\n\n}\n\nexport default App;\n","'use strict';\n\nimport { isDef, isDefAndNotNull } from 'metal';\nimport Uri from 'metal-uri';\nimport { CancellablePromise as Promise } from 'metal-promise';\n\nclass Ajax {\n\n\t/**\n\t * XmlHttpRequest's getAllResponseHeaders() method returns a string of\n\t * response headers according to the format described on the spec:\n\t * {@link http://www.w3.org/TR/XMLHttpRequest/#the-getallresponseheaders-method}.\n\t * This method parses that string into a user-friendly name/value pair\n\t * object.\n\t * @param {string} allHeaders All headers as string.\n\t * @return {!Array.<Object<string, string>>}\n\t */\n\tstatic parseResponseHeaders(allHeaders) {\n\t\tvar headers = [];\n\t\tif (!allHeaders) {\n\t\t\treturn headers;\n\t\t}\n\t\tvar pairs = allHeaders.split('\\u000d\\u000a');\n\t\tfor (var i = 0; i < pairs.length; i++) {\n\t\t\tvar index = pairs[i].indexOf('\\u003a\\u0020');\n\t\t\tif (index > 0) {\n\t\t\t\tvar name = pairs[i].substring(0, index);\n\t\t\t\tvar value = pairs[i].substring(index + 2);\n\t\t\t\theaders.push({\n\t\t\t\t\tname: name,\n\t\t\t\t\tvalue: value\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\treturn headers;\n\t}\n\n\t/**\n\t * Requests the url using XMLHttpRequest.\n\t * @param {!string} url\n\t * @param {!string} method\n\t * @param {?string} body\n\t * @param {MultiMap=} opt_headers\n\t * @param {MultiMap=} opt_params\n\t * @param {number=} opt_timeout\n\t * @param {boolean=} opt_sync\n\t * @param {boolean=} opt_withCredentials\n\t * @return {Promise} Deferred ajax request.\n\t * @protected\n\t */\n\tstatic request(url, method, body, opt_headers, opt_params, opt_timeout, opt_sync, opt_withCredentials) {\n\t\turl = url || '';\n\t\tmethod = method || 'GET';\n\n\t\tvar request = new XMLHttpRequest();\n\n\t\tvar promise = new Promise(function(resolve, reject) {\n\t\t\trequest.onload = function() {\n\t\t\t\tif (request.aborted) {\n\t\t\t\t\trequest.onerror();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tresolve(request);\n\t\t\t};\n\t\t\trequest.onerror = function() {\n\t\t\t\tvar error = new Error('Request error');\n\t\t\t\terror.request = request;\n\t\t\t\treject(error);\n\t\t\t};\n\t\t}).thenCatch(function(reason) {\n\t\t\trequest.abort();\n\t\t\tthrow reason;\n\t\t}).thenAlways(function() {\n\t\t\tclearTimeout(timeout);\n\t\t});\n\n\t\tif (opt_params) {\n\t\t\turl = new Uri(url).addParametersFromMultiMap(opt_params).toString();\n\t\t}\n\n\t\trequest.open(method, url, !opt_sync);\n\n\t\tif (opt_withCredentials) {\n\t\t\trequest.withCredentials = true;\n\t\t}\n\n\t\tif (opt_headers) {\n\t\t\topt_headers.names().forEach(function(name) {\n\t\t\t\trequest.setRequestHeader(name, opt_headers.getAll(name).join(', '));\n\t\t\t});\n\t\t}\n\n\t\trequest.send(isDef(body) ? body : null);\n\n\t\tif (isDefAndNotNull(opt_timeout)) {\n\t\t\tvar timeout = setTimeout(function() {\n\t\t\t\tpromise.cancel('Request timeout');\n\t\t\t}, opt_timeout);\n\t\t}\n\n\t\treturn promise;\n\t}\n\n}\n\nexport default Ajax;\n","'use strict';\n\n/**\n * Holds value error messages.\n * @const\n */\nclass errors {\n}\n\n/**\n * Invalid status error message.\n * @type {string}\n * @static\n */\nerrors.INVALID_STATUS = 'Invalid status code';\n\n/**\n * Request error message.\n * @type {string}\n * @static\n */\nerrors.REQUEST_ERROR = 'Request error';\n\n/**\n * Request timeout error message.\n * @type {string}\n * @static\n */\nerrors.REQUEST_TIMEOUT = 'Request timeout';\n\nexport default errors;","'use strict';\n\n/**\n * Metal.js browser user agent detection. It's extremely recommended the usage\n * of feature checking over browser user agent sniffing. Unfortunately, in some\n * situations feature checking can be slow or even impossible, therefore use\n * this utility with caution.\n * @see <a href=\"http://www.useragentstring.com/\">User agent strings</a>.\n */\nclass UA {\n\t/**\n\t * Gets the native userAgent string from navigator if it exists. If\n\t * navigator or navigator.userAgent string is missing, returns an empty\n\t * string.\n\t * @return {string}\n\t * @private\n\t * @static\n\t */\n\tstatic getNativeUserAgent() {\n\t\tvar navigator = UA.globals.window.navigator;\n\t\tif (navigator) {\n\t\t\tvar userAgent = navigator.userAgent;\n\t\t\tif (userAgent) {\n\t\t\t\treturn userAgent;\n\t\t\t}\n\t\t}\n\t\treturn '';\n\t}\n\n\t/**\n\t * Gets the native platform string from navigator if it exists. If\n\t * navigator or navigator.platform string is missing, returns an empty\n\t * string.\n\t * @return {string}\n\t * @private\n\t * @static\n\t */\n\tstatic getNativePlatform() {\n\t\tvar navigator = UA.globals.window.navigator;\n\t\tif (navigator) {\n\t\t\tvar platform = navigator.platform;\n\t\t\tif (platform) {\n\t\t\t\treturn platform;\n\t\t\t}\n\t\t}\n\t\treturn '';\n\t}\n\n\t/**\n\t * Whether the platform contains the given string, ignoring case.\n\t * @param {string} str\n\t * @return {boolean}\n\t * @private\n\t * @static\n\t*/\n\tstatic matchPlatform(str) {\n\t\treturn UA.platform.indexOf(str) !== -1;\n\t}\n\n\t/**\n\t * Whether the user agent contains the given string, ignoring case.\n\t * @param {string} str\n\t * @return {boolean}\n\t * @private\n\t * @static\n\t*/\n\tstatic matchUserAgent(str) {\n\t\treturn UA.userAgent.indexOf(str) !== -1;\n\t}\n\n\t/**\n\t * Tests the user agent.\n\t * @param {string} userAgent The user agent string.\n\t * @static\n\t */\n\tstatic testUserAgent(userAgent = '', platform = '') {\n\t\t/**\n\t\t * Holds the user agent value extracted from browser native user agent.\n\t\t * @type {string}\n\t\t * @static\n\t\t */\n\t\tUA.userAgent = userAgent;\n\n\t\t/**\n\t\t * Holds the platform value extracted from browser native platform.\n\t\t * @type {string}\n\t\t * @static\n\t\t */\n\t\tUA.platform = platform;\n\n\t\t/**\n\t\t * Whether the user's OS is Mac.\n\t\t * @type {boolean}\n\t\t * @static\n\t\t */\n\t\tUA.isMac = UA.matchPlatform('Mac');\n\n\t\t/**\n\t\t * Whether the user's OS is Win.\n\t\t * @type {boolean}\n\t\t * @static\n\t\t */\n\t\tUA.isWin = UA.matchPlatform('Win');\n\n\t\t/**\n\t\t * Whether the user's browser is Opera.\n\t\t * @type {boolean}\n\t\t * @static\n\t\t */\n\t\tUA.isOpera = UA.matchUserAgent('Opera') || UA.matchUserAgent('OPR');\n\n\t\t/**\n\t\t * Whether the user's browser is IE.\n\t\t * @type {boolean}\n\t\t * @static\n\t\t */\n\t\tUA.isIe = UA.matchUserAgent('Trident') || UA.matchUserAgent('MSIE');\n\n\t\t/**\n\t\t * Whether the user's browser is Edge.\n\t\t * @type {boolean}\n\t\t * @static\n\t\t */\n\t\tUA.isEdge = UA.matchUserAgent('Edge');\n\n\t\t/**\n\t\t * Whether the user's browser is IE or Edge.\n\t\t * @type {boolean}\n\t\t * @static\n\t\t */\n\t\tUA.isIeOrEdge = UA.isIe || UA.isEdge;\n\n\t\t/**\n\t\t * Whether the user's browser is Chrome.\n\t\t * @type {boolean}\n\t\t * @static\n\t\t */\n\t\tUA.isChrome = (UA.matchUserAgent('Chrome') || UA.matchUserAgent('CriOS')) && !UA.isOpera && !UA.isEdge;\n\n\t\t/**\n\t\t * Whether the user's browser is Safari.\n\t\t * @type {boolean}\n\t\t * @static\n\t\t */\n\t\tUA.isSafari = UA.matchUserAgent('Safari') && !(UA.isChrome || UA.isOpera || UA.isEdge);\n\n\t\t/**\n\t\t * Whether the user's browser is Firefox.\n\t\t * @type {boolean}\n\t\t * @static\n\t\t */\n\t\tUA.isFirefox = UA.matchUserAgent('Firefox');\n\t}\n}\n\n/**\n * Exposes global references.\n * @type {object}\n * @static\n */\nUA.globals = {\n\twindow: window\n};\n\nUA.testUserAgent(UA.getNativeUserAgent(), UA.getNativePlatform());\n\nexport default UA;\n","'use strict';\n\nimport { isDefAndNotNull } from 'metal';\nimport Ajax from 'metal-ajax';\nimport { MultiMap } from 'metal-structs';\nimport CancellablePromise from 'metal-promise';\nimport errors from '../errors/errors';\nimport utils from '../utils/utils';\nimport globals from '../globals/globals';\nimport Screen from './Screen';\nimport Uri from 'metal-uri';\nimport UA from 'metal-useragent';\n\nclass RequestScreen extends Screen {\n\n\t/**\n\t * Request screen abstract class to perform io operations on descendant\n\t * screens.\n\t * @constructor\n\t * @extends {Screen}\n\t */\n\tconstructor() {\n\t\tsuper();\n\n\t\t/**\n\t\t * @inheritDoc\n\t\t * @default true\n\t\t */\n\t\tthis.cacheable = true;\n\n\t\t/**\n\t\t * Holds default http headers to set on request.\n\t\t * @type {?Object=}\n\t\t * @default {\n\t\t *   'X-PJAX': 'true',\n\t\t *   'X-Requested-With': 'XMLHttpRequest'\n\t\t * }\n\t\t * @protected\n\t\t */\n\t\tthis.httpHeaders = {\n\t\t\t'X-PJAX': 'true',\n\t\t\t'X-Requested-With': 'XMLHttpRequest'\n\t\t};\n\n\t\t/**\n\t\t * Holds default http method to perform the request.\n\t\t * @type {!string}\n\t\t * @default RequestScreen.GET\n\t\t * @protected\n\t\t */\n\t\tthis.httpMethod = RequestScreen.GET;\n\n\t\t/**\n\t\t * Holds the XHR object responsible for the request.\n\t\t * @type {XMLHttpRequest}\n\t\t * @default null\n\t\t * @protected\n\t\t */\n\t\tthis.request = null;\n\n\t\t/**\n\t\t * Holds the request timeout in milliseconds.\n\t\t * @type {!number}\n\t\t * @default 30000\n\t\t * @protected\n\t\t */\n\t\tthis.timeout = 30000;\n\t}\n\n\t/**\n\t * Asserts that response status code is valid.\n\t * @param {number} status\n\t * @protected\n\t */\n\tassertValidResponseStatusCode(status) {\n\t\tif (!this.isValidResponseStatusCode(status)) {\n\t\t\tvar error = new Error(errors.INVALID_STATUS);\n\t\t\terror.invalidStatus = true;\n\t\t\terror.statusCode = status;\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tbeforeUpdateHistoryPath(path) {\n\t\tvar redirectPath = this.getRequestPath();\n\t\tif (redirectPath && redirectPath !== path) {\n\t\t\treturn redirectPath;\n\t\t}\n\t\treturn path;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tbeforeUpdateHistoryState(state) {\n\t\t// If state is ours and navigate to post-without-redirect-get set\n\t\t// history state to null, that way Senna will reload the page on\n\t\t// popstate since it cannot predict post data.\n\t\tif (state.senna && state.form && state.redirectPath === state.path) {\n\t\t\treturn null;\n\t\t}\n\t\treturn state;\n\t}\n\n\t/**\n\t * Formats load path before invoking ajax call.\n\t * @param {string} path\n\t * @return {string} Formatted path;\n\t * @protected\n\t */\n\tformatLoadPath(path) {\n\t\tvar uri = new Uri(path);\n\n\t\turi.setHostname(globals.window.location.hostname);\n\t\turi.setProtocol(globals.window.location.protocol);\n\n\t\tif (globals.window.location.port) {\n\t\t\turi.setPort(globals.window.location.port);\n\t\t}\n\n\t\tif (UA.isIeOrEdge && this.httpMethod === RequestScreen.GET) {\n\t\t\treturn uri.makeUnique().toString();\n\t\t}\n\n\t\treturn uri.toString();\n\t}\n\n\t/**\n\t * Gets the http headers.\n\t * @return {?Object=}\n\t */\n\tgetHttpHeaders() {\n\t\treturn this.httpHeaders;\n\t}\n\n\t/**\n\t * Gets the http method.\n\t * @return {!string}\n\t */\n\tgetHttpMethod() {\n\t\treturn this.httpMethod;\n\t}\n\n\t/**\n\t * Gets request path.\n\t * @return {string=}\n\t */\n\tgetRequestPath() {\n\t\tvar request = this.getRequest();\n\t\tif (request) {\n\t\t\tvar requestPath = request.requestPath;\n\t\t\tvar responseUrl = this.maybeExtractResponseUrlFromRequest(request);\n\t\t\tif (responseUrl) {\n\t\t\t\trequestPath = responseUrl;\n\t\t\t}\n\t\t\tif (UA.isIeOrEdge && this.httpMethod === RequestScreen.GET) {\n\t\t\t\trequestPath = new Uri(requestPath).removeUnique().toString();\n\t\t\t}\n\t\t\treturn utils.getUrlPath(requestPath);\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * Gets the request object.\n\t * @return {?Object}\n\t */\n\tgetRequest() {\n\t\treturn this.request;\n\t}\n\n\t/**\n\t * Gets the request timeout.\n\t * @return {!number}\n\t */\n\tgetTimeout() {\n\t\treturn this.timeout;\n\t}\n\n\t/**\n\t * Checks if response succeeded. Any status code 2xx or 3xx is considered\n\t * valid.\n\t * @param {number} statusCode\n\t */\n\tisValidResponseStatusCode(statusCode) {\n\t\treturn statusCode >= 200 && statusCode <= 399;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tload(path) {\n\t\tconst cache = this.getCache();\n\t\tif (isDefAndNotNull(cache)) {\n\t\t\treturn CancellablePromise.resolve(cache);\n\t\t}\n\t\tlet body = null;\n\t\tlet httpMethod = this.httpMethod;\n\t\tconst headers = new MultiMap();\n\t\tObject.keys(this.httpHeaders).forEach(header => headers.add(header, this.httpHeaders[header]));\n\t\tif (globals.capturedFormElement) {\n\t\t\tbody = new FormData(globals.capturedFormElement);\n\t\t\tthis.maybeAppendSubmitButtonValue_(body);\n\t\t\thttpMethod = RequestScreen.POST;\n\t\t\tif (UA.isIeOrEdge) {\n\t\t\t\theaders.add('If-None-Match', '\"0\"');\n\t\t\t}\n\t\t}\n\t\tconst requestPath = this.formatLoadPath(path);\n\t\treturn Ajax\n\t\t\t.request(requestPath, httpMethod, body, headers, null, this.timeout)\n\t\t\t.then(xhr => {\n\t\t\t\tthis.setRequest(xhr);\n\t\t\t\tthis.assertValidResponseStatusCode(xhr.status);\n\t\t\t\tif (httpMethod === RequestScreen.GET && this.isCacheable()) {\n\t\t\t\t\tthis.addCache(xhr.responseText);\n\t\t\t\t}\n\t\t\t\txhr.requestPath = requestPath;\n\t\t\t\treturn xhr.responseText;\n\t\t\t})\n\t\t\t.catch((reason) => {\n\t\t\t\tswitch (reason.message) {\n\t\t\t\t\tcase errors.REQUEST_TIMEOUT:\n\t\t\t\t\t\treason.timeout = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase errors.REQUEST_ERROR:\n\t\t\t\t\t\treason.requestError = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tthrow reason;\n\t\t\t});\n\t}\n\n\t/**\n\t * Adds aditional data to the body of the request in case a submit button\n\t * is captured during form submission.\n\t * @param {!FormData} body The FormData containing the request body.\n\t * @protected\n\t */\n\tmaybeAppendSubmitButtonValue_(body) {\n\t\tconst button = globals.capturedFormButtonElement;\n\t\tif (button && button.name) {\n\t\t\tbody.append(button.name, button.value);\n\t\t}\n\t}\n\n\t/**\n\t * The following method tries to extract the response url value by checking\n\t * the custom response header 'X-Request-URL' if proper value is not present\n\t * in XMLHttpRequest. The value of responseURL will be the final URL\n\t * obtained after any redirects. Internet Explorer, Edge and Safari <= 7\n\t * does not yet support the feature. For more information see:\n\t * https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseURL\n\t * https://xhr.spec.whatwg.org/#the-responseurl-attribute\n\t * @param {XMLHttpRequest} request\n\t * @return {?string} Response url best match.\n\t */\n\tmaybeExtractResponseUrlFromRequest(request) {\n\t\tvar responseUrl = request.responseURL;\n\t\tif (responseUrl) {\n\t\t\treturn responseUrl;\n\t\t}\n\t\treturn request.getResponseHeader(RequestScreen.X_REQUEST_URL_HEADER);\n\t}\n\n\t/**\n\t * Sets the http headers.\n\t * @param {?Object=} httpHeaders\n\t */\n\tsetHttpHeaders(httpHeaders) {\n\t\tthis.httpHeaders = httpHeaders;\n\t}\n\n\t/**\n\t * Sets the http method.\n\t * @param {!string} httpMethod\n\t */\n\tsetHttpMethod(httpMethod) {\n\t\tthis.httpMethod = httpMethod.toLowerCase();\n\t}\n\n\t/**\n\t * Sets the request object.\n\t * @param {?Object} request\n\t */\n\tsetRequest(request) {\n\t\tthis.request = request;\n\t}\n\n\t/**\n\t * Sets the request timeout in milliseconds.\n\t * @param {!number} timeout\n\t */\n\tsetTimeout(timeout) {\n\t\tthis.timeout = timeout;\n\t}\n\n}\n\n/**\n * Holds value for method get.\n * @type {string}\n * @default 'get'\n * @static\n */\nRequestScreen.GET = 'get';\n\n/**\n * Holds value for method post.\n * @type {string}\n * @default 'post'\n * @static\n */\nRequestScreen.POST = 'post';\n\n/**\n * Fallback http header to retrieve response request url.\n * @type {string}\n * @default 'X-Request-URL'\n * @static\n */\nRequestScreen.X_REQUEST_URL_HEADER = 'X-Request-URL';\n\nexport default RequestScreen;\n","'use strict';\n\nimport { getUid } from 'metal';\nimport { buildFragment, exitDocument, globalEval, globalEvalStyles, match } from 'metal-dom';\nimport CancellablePromise from 'metal-promise';\nimport globals from '../globals/globals';\nimport RequestScreen from './RequestScreen';\nimport Surface from '../surface/Surface';\nimport UA from 'metal-useragent';\nimport Uri from 'metal-uri';\nimport utils from '../utils/utils';\n\nclass HtmlScreen extends RequestScreen {\n\n\t/**\n\t * Screen class that perform a request and extracts surface contents from\n\t * the response content.\n\t * @constructor\n\t * @extends {RequestScreen}\n\t */\n\tconstructor() {\n\t\tsuper();\n\n\t\t/**\n\t\t * Holds the title selector. Relevant to extract the <code><title></code>\n\t\t * element from request fragments to use as the screen title.\n\t\t * @type {!string}\n\t\t * @default title\n\t\t * @protected\n\t\t */\n\t\tthis.titleSelector = 'title';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tactivate() {\n\t\tsuper.activate();\n\t\tthis.releaseVirtualDocument();\n\t\tthis.pendingStyles = null;\n\t}\n\n\t/**\n\t * Allocates virtual document for content. After allocated virtual document\n\t * can be accessed by <code>this.virtualDocument</code>.\n\t * @param {!string} htmlString\n\t */\n\tallocateVirtualDocumentForContent(htmlString) {\n\t\tif (!this.virtualDocument) {\n\t\t\tthis.virtualDocument = globals.document.createElement('html');\n\t\t}\n\n\t\tthis.copyNodeAttributesFromContent_(htmlString, this.virtualDocument);\n\n\t\tthis.virtualDocument.innerHTML = htmlString;\n\t}\n\n\t/**\n\t * Customizes logic to append styles into document. Relevant to when\n\t * tracking a style by id make sure to re-positions the new style in the\n\t * same dom order.\n\t * @param {Element} newStyle\n\t */\n\tappendStyleIntoDocument_(newStyle) {\n\t\tvar isTemporaryStyle = match(newStyle, HtmlScreen.selectors.stylesTemporary);\n\t\tif (isTemporaryStyle) {\n\t\t\tthis.pendingStyles.push(newStyle);\n\t\t}\n\t\tif (newStyle.id) {\n\t\t\tvar styleInDoc = globals.document.getElementById(newStyle.id);\n\t\t\tif (styleInDoc) {\n\t\t\t\tstyleInDoc.parentNode.insertBefore(newStyle, styleInDoc.nextSibling);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tglobals.document.head.appendChild(newStyle);\n\t}\n\n\t/**\n\t * If body is used as surface forces the requested documents to have same id\n\t * of the initial page.\n\t */\n\tassertSameBodyIdInVirtualDocument() {\n\t\tvar bodySurface = this.virtualDocument.querySelector('body');\n\t\tif (!globals.document.body.id) {\n\t\t\tglobals.document.body.id = 'senna_surface_' + getUid();\n\t\t}\n\t\tif (bodySurface) {\n\t\t\tbodySurface.id = globals.document.body.id;\n\t\t}\n\t}\n\n\t/**\n\t * Copies attributes from the <html> tag of content to the given node.\n\t */\n\tcopyNodeAttributesFromContent_(content, node) {\n\t\tcontent = content.replace(/[<]\\s*html/ig, '<senna');\n\t\tcontent = content.replace(/\\/html\\s*\\>/ig, '/senna>');\n\t\tnode.innerHTML = content;\n\t\tvar placeholder = node.querySelector('senna');\n\t\tif (placeholder) {\n\t\t\tutils.clearNodeAttributes(node);\n\t\t\tutils.copyNodeAttributes(placeholder, node);\n\t\t}\n\t}\n\n\t/**\n\t * @Override\n\t */\n\tdisposeInternal() {\n\t\tthis.disposePendingStyles();\n\t\tsuper.disposeInternal();\n\t}\n\n\t/**\n\t * Disposes pending styles if screen get disposed prior to its loading.\n\t */\n\tdisposePendingStyles() {\n\t\tif (this.pendingStyles) {\n\t\t\tthis.pendingStyles.forEach((style) => exitDocument(style));\n\t\t}\n\t}\n\n\t/**\n\t * @Override\n\t */\n\tevaluateScripts(surfaces) {\n\t\tvar evaluateTrackedScripts = this.evaluateTrackedResources_(\n\t\t\tglobalEval.runScriptsInElement, HtmlScreen.selectors.scripts,\n\t\t\tHtmlScreen.selectors.scriptsTemporary, HtmlScreen.selectors.scriptsPermanent);\n\n\t\treturn evaluateTrackedScripts.then(() => super.evaluateScripts(surfaces));\n\t}\n\n\t/**\n\t * @Override\n\t */\n\tevaluateStyles(surfaces) {\n\t\tthis.pendingStyles = [];\n\t\tvar evaluateTrackedStyles = this.evaluateTrackedResources_(\n\t\t\tglobalEvalStyles.runStylesInElement, HtmlScreen.selectors.styles,\n\t\t\tHtmlScreen.selectors.stylesTemporary, HtmlScreen.selectors.stylesPermanent,\n\t\t\tthis.appendStyleIntoDocument_.bind(this));\n\n\t\treturn evaluateTrackedStyles.then(() => super.evaluateStyles(surfaces));\n\t}\n\n\t/**\n\t * Evaluates tracked resources inside incoming fragment and remove existing\n\t * temporary resources.\n\t * @param {?function()} appendFn Function to append the node into document.\n\t * @param {!string} selector Selector used to find resources to track.\n\t * @param {!string} selectorTemporary Selector used to find temporary\n\t *     resources to track.\n\t * @param {!string} selectorPermanent Selector used to find permanent\n\t *     resources to track.\n\t * @param {!function} opt_appendResourceFn Optional function used to\n\t *     evaluate fragment containing resources.\n\t * @return {CancellablePromise} Deferred that waits resources evaluation to\n\t *     complete.\n\t * @private\n\t */\n\tevaluateTrackedResources_(evaluatorFn, selector, selectorTemporary, selectorPermanent, opt_appendResourceFn) {\n\t\tvar tracked = this.virtualQuerySelectorAll_(selector);\n\t\tvar temporariesInDoc = this.querySelectorAll_(selectorTemporary);\n\t\tvar permanentsInDoc = this.querySelectorAll_(selectorPermanent);\n\n\t\t// Adds permanent resources in document to cache.\n\t\tpermanentsInDoc.forEach((resource) => {\n\t\t\tvar resourceKey = this.getResourceKey_(resource);\n\t\t\tif (resourceKey) {\n\t\t\t\tHtmlScreen.permanentResourcesInDoc[resourceKey] = true;\n\t\t\t}\n\t\t});\n\n\t\tvar frag = buildFragment();\n\t\ttracked.forEach((resource) => {\n\t\t\tvar resourceKey = this.getResourceKey_(resource);\n\t\t\t// Do not load permanent resources if already in document.\n\t\t\tif (!HtmlScreen.permanentResourcesInDoc[resourceKey]) {\n\t\t\t\tfrag.appendChild(resource);\n\t\t\t}\n\t\t\t// If resource has key and is permanent add to cache.\n\t\t\tif (resourceKey && match(resource, selectorPermanent)) {\n\t\t\t\tHtmlScreen.permanentResourcesInDoc[resourceKey] = true;\n\t\t\t}\n\t\t});\n\n\t\treturn new CancellablePromise((resolve) => {\n\t\t\tevaluatorFn(frag, () => {\n\t\t\t\ttemporariesInDoc.forEach((resource) => exitDocument(resource));\n\t\t\t\tresolve();\n\t\t\t}, opt_appendResourceFn);\n\t\t});\n\t}\n\n\t/**\n\t * @Override\n\t */\n\tflip(surfaces) {\n\t\treturn super.flip(surfaces).then(() => {\n\t\t\tutils.clearNodeAttributes(document.documentElement);\n\t\t\tutils.copyNodeAttributes(this.virtualDocument, document.documentElement);\n\t\t});\n\t}\n\n\t/**\n\t * Extracts a key to identify the resource based on its attributes.\n\t * @param {Element} resource\n\t * @return {string} Extracted key based on resource attributes in order of\n\t *     preference: id, href, src.\n\t */\n\tgetResourceKey_(resource) {\n\t\treturn resource.id || resource.href || resource.src || '';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tgetSurfaceContent(surfaceId) {\n\t\tvar surface = this.virtualDocument.querySelector('#' + surfaceId);\n\t\tif (surface) {\n\t\t\tvar defaultChild = surface.querySelector('#' + surfaceId + '-' + Surface.DEFAULT);\n\t\t\tif (defaultChild) {\n\t\t\t\treturn defaultChild.innerHTML;\n\t\t\t}\n\t\t\treturn surface.innerHTML; // If default content not found, use surface content\n\t\t}\n\t}\n\n\t/**\n\t * Gets the title selector.\n\t * @return {!string}\n\t */\n\tgetTitleSelector() {\n\t\treturn this.titleSelector;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tload(path) {\n\t\treturn super.load(path)\n\t\t\t.then(content => {\n\t\t\t\tthis.allocateVirtualDocumentForContent(content);\n\t\t\t\tthis.resolveTitleFromVirtualDocument();\n\t\t\t\tthis.assertSameBodyIdInVirtualDocument();\n\t\t\t\tif (UA.isIe) {\n\t\t\t\t\tthis.makeTemporaryStylesHrefsUnique_();\n\t\t\t\t}\n\t\t\t\treturn content;\n\t\t\t});\n\t}\n\n\t/**\n\t * Queries temporary styles from virtual document, and makes them unique.\n\t * This is necessary for caching and load event firing issues specific to\n\t * IE11. https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/7940171/\n\t */\n\tmakeTemporaryStylesHrefsUnique_() {\n\t\tvar temporariesInDoc = this.virtualQuerySelectorAll_(HtmlScreen.selectors.stylesTemporary);\n\t\ttemporariesInDoc.forEach((style) => this.replaceStyleAndMakeUnique_(style));\n\t}\n\n\t/**\n\t * Creates a new element from given, copies attributes, mutates href to be\n\t * unique to prevent caching and more than one load/error event from firing.\n\t */\n\treplaceStyleAndMakeUnique_(style) {\n\t\tif (style.href) {\n\t\t\tvar newStyle = globals.document.createElement(style.tagName);\n\t\t\tstyle.href = new Uri(style.href).makeUnique().toString();\n\t\t\tutils.copyNodeAttributes(style, newStyle);\n\t\t\tstyle.parentNode.replaceChild(newStyle, style);\n\t\t\tstyle.disabled = true;\n\t\t}\n\t}\n\n\t/**\n\t * Queries elements from virtual document and returns an array of elements.\n\t * @param {!string} selector\n\t * @return {array.<Element>}\n\t */\n\tvirtualQuerySelectorAll_(selector) {\n\t\treturn Array.prototype.slice.call(this.virtualDocument.querySelectorAll(selector));\n\t}\n\n\t/**\n\t * Queries elements from document and returns an array of elements.\n\t * @param {!string} selector\n\t * @return {array.<Element>}\n\t */\n\tquerySelectorAll_(selector) {\n\t\treturn Array.prototype.slice.call(globals.document.querySelectorAll(selector));\n\t}\n\n\t/**\n\t * Releases virtual document allocated for content.\n\t */\n\treleaseVirtualDocument() {\n\t\tthis.virtualDocument = null;\n\t}\n\n\t/**\n\t * Resolves title from allocated virtual document.\n\t */\n\tresolveTitleFromVirtualDocument() {\n\t\tvar title = this.virtualDocument.querySelector(this.titleSelector);\n\t\tif (title) {\n\t\t\tthis.setTitle(title.textContent.trim());\n\t\t}\n\t}\n\n\t/**\n\t * Sets the title selector.\n\t * @param {!string} titleSelector\n\t */\n\tsetTitleSelector(titleSelector) {\n\t\tthis.titleSelector = titleSelector;\n\t}\n\n}\n\n/**\n * Helper selectors for tracking resources.\n * @type {object}\n * @protected\n * @static\n */\nHtmlScreen.selectors = {\n\tscripts: 'script[data-senna-track]',\n\tscriptsPermanent: 'script[data-senna-track=\"permanent\"]',\n\tscriptsTemporary: 'script[data-senna-track=\"temporary\"]',\n\tstyles: 'style[data-senna-track],link[data-senna-track]',\n\tstylesPermanent: 'style[data-senna-track=\"permanent\"],link[data-senna-track=\"permanent\"]',\n\tstylesTemporary: 'style[data-senna-track=\"temporary\"],link[data-senna-track=\"temporary\"]'\n};\n\n/**\n * Caches permanent resource keys.\n * @type {object}\n * @protected\n * @static\n */\nHtmlScreen.permanentResourcesInDoc = {};\n\nexport default HtmlScreen;\n","'use strict';\n\nimport { Disposable, getUid, isDefAndNotNull, isElement, object } from 'metal';\nimport dataAttributes from './dataAttributes';\nimport globals from '../globals/globals';\nimport App from './App';\nimport HtmlScreen from '../screen/HtmlScreen';\nimport Route from '../route/Route';\n\nclass AppDataAttributeHandler extends Disposable {\n\n\t/**\n\t * Initilizes App, register surfaces and routes from data attributes.\n\t * @constructor\n\t */\n\tconstructor() {\n\t\tsuper();\n\n\t\t/**\n\t\t * Holds the app reference initialized by data attributes.\n\t\t * @type {App}\n\t\t * @default null\n\t\t */\n\t\tthis.app = null;\n\n\t\t/**\n\t\t * Holds the base element to search initialization data attributes. This\n\t\t * element is the container used to enable initialization based on the\n\t\t * presence of `data-senna` attribute.\n\t\t * @type {Element}\n\t\t * @default null\n\t\t */\n\t\tthis.baseElement = null;\n\t}\n\n\t/**\n\t * Inits application based on information scanned from document.\n\t */\n\thandle() {\n\t\tif (!isElement(this.baseElement)) {\n\t\t\tthrow new Error('Senna data attribute handler base element ' +\n\t\t\t\t'not set or invalid, try setting a valid element that ' +\n\t\t\t\t'contains a `data-senna` attribute.');\n\t\t}\n\n\t\tif (!this.baseElement.hasAttribute(dataAttributes.senna)) {\n\t\t\tconsole.log('Senna was not initialized from data attributes. ' +\n\t\t\t\t'In order to enable its usage from data attributes try setting ' +\n\t\t\t\t'in the base element, e.g. `<body data-senna>`.');\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.app) {\n\t\t\tthrow new Error('Senna app was already initialized.');\n\t\t}\n\n\t\tconsole.log('Senna initialized from data attribute.');\n\n\t\tthis.app = new App();\n\t\tthis.maybeAddRoutes_();\n\t\tthis.maybeAddSurfaces_();\n\t\tthis.maybeSetBasePath_();\n\t\tthis.maybeSetLinkSelector_();\n\t\tthis.maybeSetLoadingCssClass_();\n\t\tthis.maybeSetUpdateScrollPosition_();\n\t\tthis.maybeDispatch_();\n\t}\n\n\t/**\n\t * Disposes of this instance's object references.\n\t * @override\n\t */\n\tdisposeInternal() {\n\t\tif (this.app) {\n\t\t\tthis.app.dispose();\n\t\t}\n\t}\n\n\t/**\n\t * Gets the app reference.\n\t * @return {App}\n\t */\n\tgetApp() {\n\t\treturn this.app;\n\t}\n\n\t/**\n\t * Gets the base element.\n\t * @return {Element} baseElement\n\t */\n\tgetBaseElement() {\n\t\treturn this.baseElement;\n\t}\n\n\t/**\n\t * Maybe adds app routes from link elements that are `senna-route`.\n\t */\n\tmaybeAddRoutes_() {\n\t\tvar routesSelector = 'link[rel=\"senna-route\"]';\n\t\tthis.querySelectorAllAsArray_(routesSelector).forEach((link) => this.maybeParseLinkRoute_(link));\n\t\tif (!this.app.hasRoutes()) {\n\t\t\tthis.app.addRoutes(new Route(/.*/, HtmlScreen));\n\t\t\tconsole.log('Senna can\\'t find route elements, adding default.');\n\t\t}\n\t}\n\n\t/**\n\t * Maybe adds app surfaces by scanning `data-senna-surface` data attribute.\n\t */\n\tmaybeAddSurfaces_() {\n\t\tvar surfacesSelector = '[' + dataAttributes.surface + ']';\n\t\tthis.querySelectorAllAsArray_(surfacesSelector).forEach((surfaceElement) => {\n\t\t\tthis.updateElementIdIfSpecialSurface_(surfaceElement);\n\t\t\tthis.app.addSurfaces(surfaceElement.id);\n\t\t});\n\t}\n\n\t/**\n\t * Dispatches app navigation to the current path when initializes.\n\t */\n\tmaybeDispatch_() {\n\t\tif (this.baseElement.hasAttribute(dataAttributes.dispatch)) {\n\t\t\tthis.app.dispatch();\n\t\t}\n\t}\n\n\t/**\n\t * Adds app route by parsing valid link elements. A valid link element is of\n\t * the kind `rel=\"senna-route\"`.\n\t * @param {Element} link\n\t */\n\tmaybeParseLinkRoute_(link) {\n\t\tvar route = new Route(this.maybeParseLinkRoutePath_(link), this.maybeParseLinkRouteHandler_(link));\n\t\tthis.app.addRoutes(route);\n\t\tconsole.log('Senna scanned route ' + route.getPath());\n\t}\n\n\t/**\n\t * Maybe parse link route handler.\n\t * @param {Element} link\n\t * @return {?string}\n\t */\n\tmaybeParseLinkRouteHandler_(link) {\n\t\tvar handler = link.getAttribute('type');\n\t\tif (isDefAndNotNull(handler)) {\n\t\t\thandler = object.getObjectByName(handler);\n\t\t}\n\t\treturn handler;\n\t}\n\n\t/**\n\t * Maybe parse link route path.\n\t * @param {Element} link\n\t * @return {?string}\n\t */\n\tmaybeParseLinkRoutePath_(link) {\n\t\tvar path = link.getAttribute('href');\n\t\tif (isDefAndNotNull(path)) {\n\t\t\tif (path.indexOf('regex:') === 0) {\n\t\t\t\tpath = new RegExp(path.substring(6));\n\t\t\t}\n\t\t}\n\t\treturn path;\n\t}\n\n\t/**\n\t * Maybe sets app base path from `data-senna-base-path` data attribute.\n\t */\n\tmaybeSetBasePath_() {\n\t\tvar basePath = this.baseElement.getAttribute(dataAttributes.basePath);\n\t\tif (isDefAndNotNull(basePath)) {\n\t\t\tthis.app.setBasePath(basePath);\n\t\t\tconsole.log('Senna scanned base path ' + basePath);\n\t\t}\n\t}\n\n\t/**\n\t * Maybe sets app link selector from `data-senna-link-selector` data\n\t * attribute.\n\t */\n\tmaybeSetLinkSelector_() {\n\t\tvar linkSelector = this.baseElement.getAttribute(dataAttributes.linkSelector);\n\t\tif (isDefAndNotNull(linkSelector)) {\n\t\t\tthis.app.setLinkSelector(linkSelector);\n\t\t\tconsole.log('Senna scanned link selector ' + linkSelector);\n\t\t}\n\t}\n\n\t/**\n\t * Maybe sets app link loading css class from `data-senna-loading-css-class`\n\t * data attribute.\n\t */\n\tmaybeSetLoadingCssClass_() {\n\t\tvar loadingCssClass = this.baseElement.getAttribute(dataAttributes.loadingCssClass);\n\t\tif (isDefAndNotNull(loadingCssClass)) {\n\t\t\tthis.app.setLoadingCssClass(loadingCssClass);\n\t\t\tconsole.log('Senna scanned loading css class ' + loadingCssClass);\n\t\t}\n\t}\n\n\t/**\n\t * Maybe sets app update scroll position from\n\t * `data-senna-update-scroll-position` data attribute.\n\t */\n\tmaybeSetUpdateScrollPosition_() {\n\t\tvar updateScrollPosition = this.baseElement.getAttribute(dataAttributes.updateScrollPosition);\n\t\tif (isDefAndNotNull(updateScrollPosition)) {\n\t\t\tif (updateScrollPosition === 'false') {\n\t\t\t\tthis.app.setUpdateScrollPosition(false);\n\t\t\t} else {\n\t\t\t\tthis.app.setUpdateScrollPosition(true);\n\t\t\t}\n\t\t\tconsole.log('Senna scanned update scroll position ' + updateScrollPosition);\n\t\t}\n\t}\n\n\t/**\n\t * Queries elements from document and returns an array of elements.\n\t * @param {!string} selector\n\t * @return {array.<Element>}\n\t */\n\tquerySelectorAllAsArray_(selector) {\n\t\treturn Array.prototype.slice.call(globals.document.querySelectorAll(selector));\n\t}\n\n\t/**\n\t * Updates element id if handled as special surface element. Some surfaces\n\t * are slightly different from others, like when threating <code>body</code>\n\t * as surface.\n\t * @param {Element} element\n\t */\n\tupdateElementIdIfSpecialSurface_(element) {\n\t\tif (!element.id && element === globals.document.body) {\n\t\t\telement.id = 'senna_surface_' + getUid();\n\t\t}\n\t}\n\n\t/**\n\t * Sets the base element.\n\t * @param {Element} baseElement\n\t */\n\tsetBaseElement(baseElement) {\n\t\tthis.baseElement = baseElement;\n\t}\n\n}\n\nexport default AppDataAttributeHandler;\n","'use strict';\n\nimport globals from '../globals/globals';\nimport AppDataAttributeHandler from './AppDataAttributeHandler';\n\n/**\n * Data attribute handler.\n * @type {AppDataAttributeHandler}\n */\nvar dataAttributeHandler = new AppDataAttributeHandler();\n\nglobals.document.addEventListener('DOMContentLoaded', function() {\n\tdataAttributeHandler.setBaseElement(globals.document.body);\n\tdataAttributeHandler.handle();\n});\n\nexport default dataAttributeHandler;"],"names":["globals","window","document","compatibilityModeData_","uniqueIdCounter_","UID_PROPERTY","Math","random","abstractMethod","Error","disableCompatibilityMode","undefined","enableCompatibilityMode","opt_data","getCompatibilityModeData","__METAL_COMPATIBILITY__","getFirstTruthy_","a","b","getFunctionName","fn","name","str","toString","substring","indexOf","getStaticProperty","ctor","propertyName","opt_mergeFn","mergedName","hasOwnProperty","merged","__proto__","isPrototypeOf","Function","mergeFn","getUid","opt_object","opt_noInheritance","id","identityFunction","opt_returnValue","isBoolean","val","isDef","isDefAndNotNull","isNull","isDocument","nodeType","isDocumentFragment","isElement","isFunction","isNumber","isWindow","isObject","type","isPromise","then","isString","String","nullFunction","array","arr1","arr2","length","i","arr","opt_output","output","Array","isArray","flatten","push","obj","rv","removeAt","prototype","splice","call","start","opt_end","sliced","end","async","throwException","exception","nextTick","run","callback","opt_context","workQueueScheduled_","processWorkQueue","workQueue_","WorkItem_","workItems","workItem","scope","e","cb","bind","wrapCallback_","setImmediate","setImmediate_","getSetImmediateEmulator_","Channel","MessageChannel","postMessage","addEventListener","iframe","createElement","style","display","src","documentElement","appendChild","win","contentWindow","doc","open","write","close","message","origin","location","protocol","host","onmessage","data","port1","port2","channel","head","tail","next","script","onreadystatechange","parentNode","removeChild","Disposable","disposed_","disposeInternal","object","target","key","source","arguments","opt_obj","parts","split","reduce","part","mappedObj","keys","Object","obj1","obj2","keys1","keys2","string","str1","str2","test1","toLowerCase","test2","replace","x","floor","abs","Date","now","hash","len","charCodeAt","value","parseFromAnchor","opt_uri","link","href","hostname","password","pathname","port","search","username","parse","URL","create","MultiMap","values","size","map","names","JSON","stringify","set","TreeNode","value_","parent_","children_","child","setParent","node","current","getParent","ancestors","index","getChildren","EMPTY_ARRAY","depth","root","getChildCount","remove","parent","opt_preorderFn","opt_postorderFn","forEach","traverse","assertChildHasNoParent","parseFn_","Uri","url","maybeAddProtocolAndHostname_","multimap","getAll","addParameterValue","ensureQueryInitialized_","query","add","param","urlDecode","getHostname","getPort","HOSTNAME_PLACEHOLDER","getHost","getProtocol","get","querystring","getParameterNames","getParameterValues","encodeURIComponent","slice","contains","setParameterValue","RANDOM_PARAM","getRandomString","DEFAULT_PROTOCOL","charAt","removeParameter","getPathname","getSearch","getHash","parsed","substr","normalizeObject","parseFn","basePath","paths","path","concat","join","decodeURIComponent","utils","attributes","attribute","setAttribute","getCurrentBrowserPathWithoutHash","offsetLeft","offsetTop","offsetParent","uri","currentBrowserPath","getUrlPathWithoutHash","getUrlPath","history","pushState","err","error","removeAttribute","METAL_DATA","domData","element","opt_name","opt_initialVal","EventHandle","emitter","event","listener","emitter_","event_","listener_","removeListener","isDisposed","singleArray_","EventEmitter","events_","listenerHandlers_","shouldUseFacade_","holder","handler","opt_default","validateListener_","events","toEventsArray_","addSingleListener_","opt_origin","runListenerHandlers_","addHandler_","getShouldUseFacade","facade","preventedDefault","listeners","getRawListeners_","args","runListeners_","buildFacade_","directListeners","toArray","amount","many_","self","handlerInternal","apply","listenerObj","removeMatchingListenerObjs_","addListener","many","opt_events","listenerObjs","finalListeners","matchesListener_","off","handlers","defaultListeners","default","j","shouldUseFacade","TypeError","EventEmitterProxy","originEmitter","targetEmitter","opt_blacklist","opt_whitelist","blacklist_","originEmitter_","pendingEvents_","proxiedEvents_","targetEmitter_","whitelist_","startProxy_","on","removeListeners_","emit","shouldProxyEvent_","tryToAddListener_","proxyEvent","onListener","addListener_","emitOnTarget_","EventHandler","eventHandles_","DomDelegatedEventHandle","opt_selector","selector_","delegating","selector","selectors","DomEventHandle","opt_capture","capture_","removeEventListener","elementsByTag_","supportCache_","customEvents","LAST_CONTAINER","USE_CAPTURE","addClasses","elements","classes","addClassesWithNative_","className","classList","addClassesWithoutNative_","elementClassName","classesToAppend","addElementListener_","eventName","addSelectorListener_","delegatingData","addToArr_","attachDelegateEvent_","handleDelegateEvent_","closest","match","append","buildFragment","NodeList","childArr","htmlString","tempDiv","innerHTML","firstChild","fragment","createDocumentFragment","element1","element2","delegate","selectorOrTarget","customConfig","originalEvent","defaultListener_","isAbleToInteractWith_","opt_eventObj","button","matchesSelector","tagName","disabled","exitDocument","ret","container","currentTarget","defFns","triggerDelegatedListeners_","triggerDefaultDelegatedListeners_","delegateTarget","p","Element","m","matches","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","matchFallback_","nodes","querySelectorAll","normalizeDelegateEvent_","stopPropagation","stopPropagation_","stopImmediatePropagation","stopImmediatePropagation_","once","domEventHandle","registerCustomEvent","removeChildren","removeClasses","removeClassesWithNative_","removeClassesWithoutNative_","trim","stopped","stoppedImmediate","supportsEvent","tag","defaultPrevented","defaultFns","currElement","limit","triggerElementListeners_","triggerSelectorListeners_","lastContainer","triggerListeners_","DomEventEmitterProxy","isDelegateEvent_","babelHelpers.get","isSupportedDomEvent_","features","animationEventName_","checkAnimationEventName_","prefixes","typeTitleCase","replaceInterval","toUpperCase","suffixes","animationElement_","attrOrderChange_","originalContent","globalEval","text","opt_appendFn","opt_callback","runFile","scripts","runScriptsInOrder","runScript","item","globalEvalStyles","rel","runStyle","styles","loadCount","mouseEventMap","related","relatedTarget","customType","animationEventMap","eventType","checkAnimationEventName","Thenable","IMPLEMENTED_BY_PROP","addImplementation","$goog_Thenable","isImplementedBy","partial","newArgs","CancellablePromise","resolver","state_","State_","PENDING","result_","callbackEntries_","executing_","UNHANDLED_REJECTION_DELAY","unhandledRejectionId_","hadUnhandledRejection_","resolve_","FULFILLED","reason","REJECTED","CallbackEntry_","resolve","opt_value","reject","opt_reason","race","promises","promise","all","toFulfill","onFulfill","onReject","firstFulfilled","toReject","reasons","opt_onFulfilled","opt_onRejected","addChildPromise_","thenAlways","onResolved","handleRejection_","addCallbackEntry_","thenCatch","onRejected","catch","cancel","opt_message","CancellationError","IS_CANCELLATION_ERROR","cancelInternal_","cancelChild_","childPromise","childCount","childIndex","entry","callbackEntry","executeCallback_","scheduleCallbacks_","onFulfilled","result","unblockAndFulfill_","BLOCKED","unblockAndReject_","state","tryThen_","addUnhandledRejection_","thenable","called","executeCallbacks_","entries","removeUnhandledRejection_","setTimeout","setUnhandledRejectionHandler","debounce","delay","debounced","cancelDebounce","REGEX","convertMatchesToObj","convertTokensToRegex","tokens","regex","core","escape","capture","encloseNonCapturingGroup","pattern","repeat","prefix","optional","RegExp","makeTrailingSlashOptional","test","routeOrTokens","route","unnamedCount","currPath","exec","paramPattern","unnamedPattern","modifier","toRegex","extractData","paramIndex","Route","parsedData_","buildParsedData_","Cacheable","cache","cacheable","content","clearCache","Screen","makeId_","title","log","surfaces","sId","activeChild","runScriptsInElement","transitions","surface","deferred","show","Surface","defaultChild","transitionFn","getChild","DEFAULT","maybeWrapContentAsDefault_","screenId","opt_content","createChild","transition","getElement","getElementById","addContent","from","to","defaultTransition","App","activeScreen","activePath","allowPreventNavigate","browserPathBeforeNavigate","captureScrollPositionFromScrollEvent","defaultTitle","formSelector","ignoreQueryStringFromRoutePath","linkSelector","loadingCssClass","nativeScrollRestorationSupported","isNavigationPending","pendingNavigate","popstateScrollLeft","popstateScrollTop","redirectPath","routes","screens","skipLoadPopstate","updateScrollPosition","appEventHandlers_","onScroll_","onLoad_","onPopstate_","onStartNavigate_","onBeforeNavigate_","onBeforeNavigateDefault_","setLinkSelector","setFormSelector","getId","isWebUri","isLinkSameOrigin_","isSameBasePath_","isCurrentBrowserPath","findRoute","removeScreen","screen","getHandler","clearScreensCache","formEventHandler_","linkEventHandler_","removeAllListeners","navigate","getCurrentBrowserPath","opt_replaceHistory","beforeDeactivate","stopPendingNavigate_","nextScreen","createScreenInstance","load","deactivate","prepareNavigateHistory_","prepareNavigateSurfaces_","extractParams","evaluateStyles","flip","evaluateScripts","maybeUpdateScrollPositionState_","syncScrollPositionSyncThenAsync_","finalizeNavigate_","handleNavigateError_","getRoutePath","activate","isCacheable","capturedFormElement","capturedFormButtonElement","matchesPath","getIgnoreQueryStringFromRoutePath","getUrlPathWithoutHashAndSearch","winner","switchScrollPositionRace","scrollTo","scrollLeft","scrollTop","nativeScrollRestoration_","scrollRestoration","canNavigate","navigateFailed","preventDefault","anchorElement","getNodeOffset","saveHistoryCurrentPageScrollPosition_","opt_event","isHtml5HistorySupported","form","replaceHistory","altKey","ctrlKey","metaKey","shiftKey","maybeNavigate_","method","buttonSelector","activeElement","querySelector","action","maybeRepositionScrollToHashedAnchor","reloadPage","senna","lockHistoryScrollPosition_","pageYOffset","pageXOffset","maybeDisableNativeScrollRestoration","endNavigatePayload","doNavigate_","maybeRestoreNativeScrollRestoration","getTitle","getDefaultTitle","beforeUpdateHistoryPath","historyState","maybeRestoreRedirectPathHash_","updateHistory_","beforeUpdateHistoryState","params","surfaceContent","getSurfaceContent","reload","surfaceId","dispose","replaceState","removePathTrailingSlash","onDocSubmitDelegate_","onDocClickDelegate_","sync","titleNode","Ajax","allHeaders","headers","pairs","body","opt_headers","opt_params","opt_timeout","opt_sync","opt_withCredentials","request","XMLHttpRequest","Promise","onload","aborted","onerror","abort","timeout","addParametersFromMultiMap","withCredentials","setRequestHeader","send","errors","INVALID_STATUS","REQUEST_ERROR","REQUEST_TIMEOUT","UA","navigator","userAgent","platform","isMac","matchPlatform","isWin","isOpera","matchUserAgent","isIe","isEdge","isIeOrEdge","isChrome","isSafari","isFirefox","testUserAgent","getNativeUserAgent","getNativePlatform","RequestScreen","httpHeaders","httpMethod","GET","status","isValidResponseStatusCode","invalidStatus","statusCode","getRequestPath","setHostname","setProtocol","setPort","makeUnique","getRequest","requestPath","responseUrl","maybeExtractResponseUrlFromRequest","removeUnique","getCache","header","FormData","maybeAppendSubmitButtonValue_","POST","formatLoadPath","setRequest","xhr","assertValidResponseStatusCode","addCache","responseText","requestError","responseURL","getResponseHeader","X_REQUEST_URL_HEADER","HtmlScreen","titleSelector","releaseVirtualDocument","pendingStyles","virtualDocument","copyNodeAttributesFromContent_","newStyle","isTemporaryStyle","stylesTemporary","styleInDoc","insertBefore","nextSibling","bodySurface","placeholder","clearNodeAttributes","copyNodeAttributes","disposePendingStyles","evaluateTrackedScripts","evaluateTrackedResources_","scriptsTemporary","scriptsPermanent","evaluateTrackedStyles","runStylesInElement","stylesPermanent","appendStyleIntoDocument_","evaluatorFn","selectorTemporary","selectorPermanent","opt_appendResourceFn","tracked","virtualQuerySelectorAll_","temporariesInDoc","querySelectorAll_","permanentsInDoc","resource","resourceKey","getResourceKey_","permanentResourcesInDoc","frag","allocateVirtualDocumentForContent","resolveTitleFromVirtualDocument","assertSameBodyIdInVirtualDocument","makeTemporaryStylesHrefsUnique_","replaceStyleAndMakeUnique_","replaceChild","setTitle","textContent","AppDataAttributeHandler","app","baseElement","hasAttribute","dataAttributes","maybeAddRoutes_","maybeAddSurfaces_","maybeSetBasePath_","maybeSetLinkSelector_","maybeSetLoadingCssClass_","maybeSetUpdateScrollPosition_","maybeDispatch_","routesSelector","querySelectorAllAsArray_","maybeParseLinkRoute_","hasRoutes","addRoutes","surfacesSelector","surfaceElement","updateElementIdIfSpecialSurface_","addSurfaces","dispatch","maybeParseLinkRoutePath_","maybeParseLinkRouteHandler_","getPath","getAttribute","getObjectByName","setBasePath","setLoadingCssClass","setUpdateScrollPosition","dataAttributeHandler","setBaseElement","handle"],"mappings":"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","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjpudWxsLCJzb3VyY2VzIjpbIi9Vc2Vycy9icnVub2Jhc3RvL1Byb2plY3RzL3Nlbm5hLmpzL3NyYy9nbG9iYWxzL2dsb2JhbHMuanMiLCIvVXNlcnMvYnJ1bm9iYXN0by9Qcm9qZWN0cy9zZW5uYS5qcy9ub2RlX21vZHVsZXMvbWV0YWwvc3JjL2NvcmVOYW1lZC5qcyIsIi9Vc2Vycy9icnVub2Jhc3RvL1Byb2plY3RzL3Nlbm5hLmpzL25vZGVfbW9kdWxlcy9tZXRhbC9zcmMvY29yZS5qcyIsIi9Vc2Vycy9icnVub2Jhc3RvL1Byb2plY3RzL3Nlbm5hLmpzL25vZGVfbW9kdWxlcy9tZXRhbC9zcmMvYXJyYXkvYXJyYXkuanMiLCIvVXNlcnMvYnJ1bm9iYXN0by9Qcm9qZWN0cy9zZW5uYS5qcy9ub2RlX21vZHVsZXMvbWV0YWwvc3JjL2FzeW5jL2FzeW5jLmpzIiwiL1VzZXJzL2JydW5vYmFzdG8vUHJvamVjdHMvc2VubmEuanMvbm9kZV9tb2R1bGVzL21ldGFsL3NyYy9kaXNwb3NhYmxlL0Rpc3Bvc2FibGUuanMiLCIvVXNlcnMvYnJ1bm9iYXN0by9Qcm9qZWN0cy9zZW5uYS5qcy9ub2RlX21vZHVsZXMvbWV0YWwvc3JjL29iamVjdC9vYmplY3QuanMiLCIvVXNlcnMvYnJ1bm9iYXN0by9Qcm9qZWN0cy9zZW5uYS5qcy9ub2RlX21vZHVsZXMvbWV0YWwvc3JjL3N0cmluZy9zdHJpbmcuanMiLCIvVXNlcnMvYnJ1bm9iYXN0by9Qcm9qZWN0cy9zZW5uYS5qcy9ub2RlX21vZHVsZXMvbWV0YWwtdXJpL3NyYy9wYXJzZUZyb21BbmNob3IuanMiLCIvVXNlcnMvYnJ1bm9iYXN0by9Qcm9qZWN0cy9zZW5uYS5qcy9ub2RlX21vZHVsZXMvbWV0YWwtdXJpL3NyYy9wYXJzZS5qcyIsIi9Vc2Vycy9icnVub2Jhc3RvL1Byb2plY3RzL3Nlbm5hLmpzL25vZGVfbW9kdWxlcy9tZXRhbC1zdHJ1Y3RzL3NyYy9NdWx0aU1hcC5qcyIsIi9Vc2Vycy9icnVub2Jhc3RvL1Byb2plY3RzL3Nlbm5hLmpzL25vZGVfbW9kdWxlcy9tZXRhbC1zdHJ1Y3RzL3NyYy9UcmVlTm9kZS5qcyIsIi9Vc2Vycy9icnVub2Jhc3RvL1Byb2plY3RzL3Nlbm5hLmpzL25vZGVfbW9kdWxlcy9tZXRhbC11cmkvc3JjL1VyaS5qcyIsIi9Vc2Vycy9icnVub2Jhc3RvL1Byb2plY3RzL3Nlbm5hLmpzL3NyYy91dGlscy91dGlscy5qcyIsIi9Vc2Vycy9icnVub2Jhc3RvL1Byb2plY3RzL3Nlbm5hLmpzL3NyYy9hcHAvZGF0YUF0dHJpYnV0ZXMuanMiLCIvVXNlcnMvYnJ1bm9iYXN0by9Qcm9qZWN0cy9zZW5uYS5qcy9ub2RlX21vZHVsZXMvbWV0YWwtZG9tL3NyYy9kb21EYXRhLmpzIiwiL1VzZXJzL2JydW5vYmFzdG8vUHJvamVjdHMvc2VubmEuanMvbm9kZV9tb2R1bGVzL21ldGFsLWV2ZW50cy9zcmMvRXZlbnRIYW5kbGUuanMiLCIvVXNlcnMvYnJ1bm9iYXN0by9Qcm9qZWN0cy9zZW5uYS5qcy9ub2RlX21vZHVsZXMvbWV0YWwtZXZlbnRzL3NyYy9FdmVudEVtaXR0ZXIuanMiLCIvVXNlcnMvYnJ1bm9iYXN0by9Qcm9qZWN0cy9zZW5uYS5qcy9ub2RlX21vZHVsZXMvbWV0YWwtZXZlbnRzL3NyYy9FdmVudEVtaXR0ZXJQcm94eS5qcyIsIi9Vc2Vycy9icnVub2Jhc3RvL1Byb2plY3RzL3Nlbm5hLmpzL25vZGVfbW9kdWxlcy9tZXRhbC1ldmVudHMvc3JjL0V2ZW50SGFuZGxlci5qcyIsIi9Vc2Vycy9icnVub2Jhc3RvL1Byb2plY3RzL3Nlbm5hLmpzL25vZGVfbW9kdWxlcy9tZXRhbC1kb20vc3JjL0RvbURlbGVnYXRlZEV2ZW50SGFuZGxlLmpzIiwiL1VzZXJzL2JydW5vYmFzdG8vUHJvamVjdHMvc2VubmEuanMvbm9kZV9tb2R1bGVzL21ldGFsLWRvbS9zcmMvRG9tRXZlbnRIYW5kbGUuanMiLCIvVXNlcnMvYnJ1bm9iYXN0by9Qcm9qZWN0cy9zZW5uYS5qcy9ub2RlX21vZHVsZXMvbWV0YWwtZG9tL3NyYy9kb21OYW1lZC5qcyIsIi9Vc2Vycy9icnVub2Jhc3RvL1Byb2plY3RzL3Nlbm5hLmpzL25vZGVfbW9kdWxlcy9tZXRhbC1kb20vc3JjL2RvbS5qcyIsIi9Vc2Vycy9icnVub2Jhc3RvL1Byb2plY3RzL3Nlbm5hLmpzL25vZGVfbW9kdWxlcy9tZXRhbC1kb20vc3JjL0RvbUV2ZW50RW1pdHRlclByb3h5LmpzIiwiL1VzZXJzL2JydW5vYmFzdG8vUHJvamVjdHMvc2VubmEuanMvbm9kZV9tb2R1bGVzL21ldGFsLWRvbS9zcmMvZmVhdHVyZXMuanMiLCIvVXNlcnMvYnJ1bm9iYXN0by9Qcm9qZWN0cy9zZW5uYS5qcy9ub2RlX21vZHVsZXMvbWV0YWwtZG9tL3NyYy9nbG9iYWxFdmFsLmpzIiwiL1VzZXJzL2JydW5vYmFzdG8vUHJvamVjdHMvc2VubmEuanMvbm9kZV9tb2R1bGVzL21ldGFsLWRvbS9zcmMvZ2xvYmFsRXZhbFN0eWxlcy5qcyIsIi9Vc2Vycy9icnVub2Jhc3RvL1Byb2plY3RzL3Nlbm5hLmpzL25vZGVfbW9kdWxlcy9tZXRhbC1kb20vc3JjL2V2ZW50cy5qcyIsIi9Vc2Vycy9icnVub2Jhc3RvL1Byb2plY3RzL3Nlbm5hLmpzL25vZGVfbW9kdWxlcy9tZXRhbC1wcm9taXNlL3NyYy9wcm9taXNlL1Byb21pc2UuanMiLCIvVXNlcnMvYnJ1bm9iYXN0by9Qcm9qZWN0cy9zZW5uYS5qcy9ub2RlX21vZHVsZXMvbWV0YWwtZGVib3VuY2Uvc3JjL2RlYm91bmNlLmpzIiwiL1VzZXJzL2JydW5vYmFzdG8vUHJvamVjdHMvc2VubmEuanMvbm9kZV9tb2R1bGVzL21ldGFsLXBhdGgtcGFyc2VyL3NyYy9wYXRoUGFyc2VyLmpzIiwiL1VzZXJzL2JydW5vYmFzdG8vUHJvamVjdHMvc2VubmEuanMvc3JjL3JvdXRlL1JvdXRlLmpzIiwiL1VzZXJzL2JydW5vYmFzdG8vUHJvamVjdHMvc2VubmEuanMvc3JjL2NhY2hlYWJsZS9DYWNoZWFibGUuanMiLCIvVXNlcnMvYnJ1bm9iYXN0by9Qcm9qZWN0cy9zZW5uYS5qcy9zcmMvc2NyZWVuL1NjcmVlbi5qcyIsIi9Vc2Vycy9icnVub2Jhc3RvL1Byb2plY3RzL3Nlbm5hLmpzL3NyYy9zdXJmYWNlL1N1cmZhY2UuanMiLCIvVXNlcnMvYnJ1bm9iYXN0by9Qcm9qZWN0cy9zZW5uYS5qcy9zcmMvYXBwL0FwcC5qcyIsIi9Vc2Vycy9icnVub2Jhc3RvL1Byb2plY3RzL3Nlbm5hLmpzL25vZGVfbW9kdWxlcy9tZXRhbC1hamF4L3NyYy9BamF4LmpzIiwiL1VzZXJzL2JydW5vYmFzdG8vUHJvamVjdHMvc2VubmEuanMvc3JjL2Vycm9ycy9lcnJvcnMuanMiLCIvVXNlcnMvYnJ1bm9iYXN0by9Qcm9qZWN0cy9zZW5uYS5qcy9ub2RlX21vZHVsZXMvbWV0YWwtdXNlcmFnZW50L3NyYy9VQS5qcyIsIi9Vc2Vycy9icnVub2Jhc3RvL1Byb2plY3RzL3Nlbm5hLmpzL3NyYy9zY3JlZW4vUmVxdWVzdFNjcmVlbi5qcyIsIi9Vc2Vycy9icnVub2Jhc3RvL1Byb2plY3RzL3Nlbm5hLmpzL3NyYy9zY3JlZW4vSHRtbFNjcmVlbi5qcyIsIi9Vc2Vycy9icnVub2Jhc3RvL1Byb2plY3RzL3Nlbm5hLmpzL3NyYy9hcHAvQXBwRGF0YUF0dHJpYnV0ZUhhbmRsZXIuanMiLCIvVXNlcnMvYnJ1bm9iYXN0by9Qcm9qZWN0cy9zZW5uYS5qcy9zcmMvYXBwL2RhdGFBdHRyaWJ1dGVIYW5kbGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBnbG9iYWxzID0gZ2xvYmFscyB8fCB7fTtcblxuaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG5cdGdsb2JhbHMud2luZG93ID0gd2luZG93O1xufVxuXG5pZiAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJykge1xuXHRnbG9iYWxzLmRvY3VtZW50ID0gZG9jdW1lbnQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdsb2JhbHM7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQSBjb2xsZWN0aW9uIG9mIGNvcmUgdXRpbGl0eSBmdW5jdGlvbnMuXG4gKiBAY29uc3RcbiAqL1xuXG5sZXQgY29tcGF0aWJpbGl0eU1vZGVEYXRhXztcblxuLyoqXG4gKiBDb3VudGVyIGZvciB1bmlxdWUgaWQuXG4gKiBAdHlwZSB7TnVtYmVyfVxuICogQHByaXZhdGVcbiAqL1xubGV0IHVuaXF1ZUlkQ291bnRlcl8gPSAxO1xuXG4vKipcbiAqIFVuaXF1ZSBpZCBwcm9wZXJ0eSBwcmVmaXguXG4gKiBAdHlwZSB7U3RyaW5nfVxuICogQHByb3RlY3RlZFxuICovXG5leHBvcnQgY29uc3QgVUlEX1BST1BFUlRZID0gYGNvcmVfJHsoKE1hdGgucmFuZG9tKCkgKiAxZTkpID4+PiAwKX1gO1xuXG4vKipcbiAqIFdoZW4gZGVmaW5pbmcgYSBjbGFzcyBGb28gd2l0aCBhbiBhYnN0cmFjdCBtZXRob2QgYmFyKCksIHlvdSBjYW4gZG86XG4gKiBGb28ucHJvdG90eXBlLmJhciA9IGFic3RyYWN0TWV0aG9kXG4gKlxuICogTm93IGlmIGEgc3ViY2xhc3Mgb2YgRm9vIGZhaWxzIHRvIG92ZXJyaWRlIGJhcigpLCBhbiBlcnJvciB3aWxsIGJlIHRocm93blxuICogd2hlbiBiYXIoKSBpcyBpbnZva2VkLlxuICpcbiAqIEB0eXBlIHshRnVuY3Rpb259XG4gKiBAdGhyb3dzIHtFcnJvcn0gd2hlbiBpbnZva2VkIHRvIGluZGljYXRlIHRoZSBtZXRob2Qgc2hvdWxkIGJlIG92ZXJyaWRkZW4uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhYnN0cmFjdE1ldGhvZCgpIHtcblx0dGhyb3cgRXJyb3IoJ1VuaW1wbGVtZW50ZWQgYWJzdHJhY3QgbWV0aG9kJyk7XG59XG5cbi8qKlxuICogRGlzYWJsZXMgTWV0YWwuanMncyBjb21wYXRpYmlsaXR5IG1vZGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkaXNhYmxlQ29tcGF0aWJpbGl0eU1vZGUoKSB7XG5cdGNvbXBhdGliaWxpdHlNb2RlRGF0YV8gPSB1bmRlZmluZWQ7XG59XG5cbi8qKlxuICogRW5hYmxlcyBNZXRhbC5qcydzIGNvbXBhdGliaWxpdHkgbW9kZSB3aXRoIHRoZSBmb2xsb3dpbmcgZmVhdHVyZXMgZnJvbSByY1xuICogYW5kIDEueCB2ZXJzaW9uczpcbiAqICAgICAtIFVzaW5nIFwia2V5XCIgdG8gcmVmZXJlbmNlIGNvbXBvbmVudCBpbnN0YW5jZXMuIEluIHRoZSBjdXJyZW50IHZlcnNpb25cbiAqICAgICAgIHRoaXMgc2hvdWxkIGJlIGRvbmUgdmlhIFwicmVmXCIgaW5zdGVhZC4gVGhpcyBhbGxvd3Mgb2xkIGNvZGUgc3RpbGxcbiAqICAgICAgIHVzaW5nIFwia2V5XCIgdG8ga2VlcCB3b3JraW5nIGxpa2UgYmVmb3JlLiBOT1RFOiB0aGlzIG1heSBjYXVzZVxuICogICAgICAgcHJvYmxlbXMsIHNpbmNlIFwia2V5XCIgaXMgbWVhbnQgdG8gYmUgdXNlZCBkaWZmZXJlbnRseS4gT25seSB1c2UgdGhpc1xuICogICAgICAgaWYgaXQncyBub3QgcG9zc2libGUgdG8gdXBncmFkZSB0aGUgY29kZSB0byB1c2UgXCJyZWZcIiBpbnN0ZWFkLlxuICogQHBhcmFtIHtPYmplY3Q9fSBvcHRfZGF0YSBPcHRpb25hbCBvYmplY3Qgd2l0aCBkYXRhIHRvIHNwZWNpZnkgbW9yZVxuICogICAgIGRldGFpbHMsIHN1Y2ggYXM6XG4gKiAgICAgICAgIC0gcmVuZGVyZXJzIHtBcnJheX0gdGhlIHRlbXBsYXRlIHJlbmRlcmVycyB0aGF0IHNob3VsZCBiZSBpblxuICogICAgICAgICAgIGNvbXBhdGliaWxpdHkgbW9kZSwgZWl0aGVyIHRoZWlyIGNvbnN0cnVjdG9ycyBvciBzdHJpbmdzXG4gKiAgICAgICAgICAgcmVwcmVzZW50aW5nIHRoZW0gKGUuZy4gJ3NveScgb3IgJ2pzeCcpLiBCeSBkZWZhdWx0LCBhbGwgdGhlIG9uZXNcbiAqICAgICAgICAgICB0aGF0IGV4dGVuZCBmcm9tIEluY3JlbWVudGFsRG9tUmVuZGVyZXIuXG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG5leHBvcnQgZnVuY3Rpb24gZW5hYmxlQ29tcGF0aWJpbGl0eU1vZGUob3B0X2RhdGEgPSB7fSkge1xuXHRjb21wYXRpYmlsaXR5TW9kZURhdGFfID0gb3B0X2RhdGE7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgZGF0YSB1c2VkIGZvciBjb21wYXRpYmlsaXR5IG1vZGUsIG9yIG5vdGhpbmcgaWYgaXQgaGFzbid0IGJlZW5cbiAqIGVuYWJsZWQuXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRDb21wYXRpYmlsaXR5TW9kZURhdGEoKSB7XG5cdC8vIENvbXBhdGliaWxpdHkgbW9kZSBjYW4gYmUgc2V0IHZpYSB0aGUgX19NRVRBTF9DT01QQVRJQklMSVRZX18gZ2xvYmFsIHZhci5cblx0aWYgKGNvbXBhdGliaWxpdHlNb2RlRGF0YV8gPT09IHVuZGVmaW5lZCkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuX19NRVRBTF9DT01QQVRJQklMSVRZX18pIHtcblx0XHRcdGVuYWJsZUNvbXBhdGliaWxpdHlNb2RlKHdpbmRvdy5fX01FVEFMX0NPTVBBVElCSUxJVFlfXyk7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBjb21wYXRpYmlsaXR5TW9kZURhdGFfO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGZpcnN0IGFyZ3VtZW50IGlmIGl0J3MgdHJ1dGh5LCBvciB0aGUgc2Vjb25kIG90aGVyd2lzZS5cbiAqIEBwYXJhbSB7Kn0gYVxuICogQHBhcmFtIHsqfSBiXG4gKiBAcmV0dXJuIHsqfVxuICogQHByb3RlY3RlZFxuICovXG5mdW5jdGlvbiBnZXRGaXJzdFRydXRoeV8oYSwgYikge1xuXHRyZXR1cm4gYSB8fCBiO1xufVxuXG4vKipcbiAqIEdldHMgdGhlIG5hbWUgb2YgdGhlIGdpdmVuIGZ1bmN0aW9uLiBJZiB0aGUgY3VycmVudCBicm93c2VyIGRvZXNuJ3RcbiAqIHN1cHBvcnQgdGhlIGBuYW1lYCBwcm9wZXJ0eSwgdGhpcyB3aWxsIGNhbGN1bGF0ZSBpdCBmcm9tIHRoZSBmdW5jdGlvbidzXG4gKiBjb250ZW50IHN0cmluZy5cbiAqIEBwYXJhbSB7IWZ1bmN0aW9uKCl9IGZuXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRGdW5jdGlvbk5hbWUoZm4pIHtcblx0aWYgKCFmbi5uYW1lKSB7XG5cdFx0Y29uc3Qgc3RyID0gZm4udG9TdHJpbmcoKTtcblx0XHRmbi5uYW1lID0gc3RyLnN1YnN0cmluZyg5LCBzdHIuaW5kZXhPZignKCcpKTtcblx0fVxuXHRyZXR1cm4gZm4ubmFtZTtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSB2YWx1ZSBvZiBhIHN0YXRpYyBwcm9wZXJ0eSBpbiB0aGUgZ2l2ZW4gY2xhc3MuIFRoZSB2YWx1ZSB3aWxsIGJlXG4gKiBpbmhlcml0ZWQgZnJvbSBhbmNlc3RvcnMgYXMgZXhwZWN0ZWQsIHVubGVzcyBhIGN1c3RvbSBtZXJnZSBmdW5jdGlvbiBpcyBnaXZlbixcbiAqIHdoaWNoIGNhbiBjaGFuZ2UgaG93IHRoZSBzdXBlciBjbGFzc2VzJyB2YWx1ZSBmb3IgdGhhdCBwcm9wZXJ0eSB3aWxsIGJlIG1lcmdlZFxuICogdG9nZXRoZXIuXG4gKiBUaGUgZmluYWwgbWVyZ2VkIHZhbHVlIHdpbGwgYmUgc3RvcmVkIGluIGFub3RoZXIgcHJvcGVydHksIHNvIHRoYXQgaXQgd29uJ3RcbiAqIGJlIHJlY2FsY3VsYXRlZCBldmVuIGlmIHRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkIG11bHRpcGxlIHRpbWVzLlxuICogQHBhcmFtIHshZnVuY3Rpb24oKX0gY3RvciBDbGFzcyBjb25zdHJ1Y3Rvci5cbiAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eU5hbWUgUHJvcGVydHkgbmFtZSB0byBiZSBtZXJnZWQuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCosICopOio9fSBvcHRfbWVyZ2VGbiBGdW5jdGlvbiB0aGF0IHJlY2VpdmVzIHRoZSBtZXJnZWRcbiAqICAgICB2YWx1ZSBvZiB0aGUgcHJvcGVydHkgc28gZmFyIGFuZCB0aGUgbmV4dCB2YWx1ZSB0byBiZSBtZXJnZWQgdG8gaXQuXG4gKiAgICAgU2hvdWxkIHJldHVybiB0aGVzZSB0d28gbWVyZ2VkIHRvZ2V0aGVyLiBJZiBub3QgcGFzc2VkIHRoZSBmaW5hbCBwcm9wZXJ0eVxuICogICAgIHdpbGwgYmUgdGhlIGZpcnN0IHRydXRoeSB2YWx1ZSBhbW9uZyBhbmNlc3RvcnMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRTdGF0aWNQcm9wZXJ0eShjdG9yLCBwcm9wZXJ0eU5hbWUsIG9wdF9tZXJnZUZuKSB7XG5cdGNvbnN0IG1lcmdlZE5hbWUgPSBwcm9wZXJ0eU5hbWUgKyAnX01FUkdFRCc7XG5cdGlmICghY3Rvci5oYXNPd25Qcm9wZXJ0eShtZXJnZWROYW1lKSkge1xuXHRcdGxldCBtZXJnZWQgPSBjdG9yLmhhc093blByb3BlcnR5KHByb3BlcnR5TmFtZSkgPyBjdG9yW3Byb3BlcnR5TmFtZV0gOiBudWxsO1xuXHRcdGlmIChjdG9yLl9fcHJvdG9fXyAmJiAhY3Rvci5fX3Byb3RvX18uaXNQcm90b3R5cGVPZihGdW5jdGlvbikpIHtcblx0XHRcdGNvbnN0IG1lcmdlRm4gPSBvcHRfbWVyZ2VGbiB8fCBnZXRGaXJzdFRydXRoeV87XG5cdFx0XHRtZXJnZWQgPSBtZXJnZUZuKFxuXHRcdFx0XHRtZXJnZWQsXG5cdFx0XHRcdGdldFN0YXRpY1Byb3BlcnR5KGN0b3IuX19wcm90b19fLCBwcm9wZXJ0eU5hbWUsIG1lcmdlRm4pXG5cdFx0XHQpO1xuXHRcdH1cblx0XHRjdG9yW21lcmdlZE5hbWVdID0gbWVyZ2VkO1xuXHR9XG5cdHJldHVybiBjdG9yW21lcmdlZE5hbWVdO1xufVxuXG4vKipcbiAqIEdldHMgYW4gdW5pcXVlIGlkLiBJZiBgb3B0X29iamVjdGAgYXJndW1lbnQgaXMgcGFzc2VkLCB0aGUgb2JqZWN0IGlzXG4gKiBtdXRhdGVkIHdpdGggYW4gdW5pcXVlIGlkLiBDb25zZWN1dGl2ZSBjYWxscyB3aXRoIHRoZSBzYW1lIG9iamVjdFxuICogcmVmZXJlbmNlIHdvbid0IG11dGF0ZSB0aGUgb2JqZWN0IGFnYWluLCBpbnN0ZWFkIHRoZSBjdXJyZW50IG9iamVjdCB1aWRcbiAqIHJldHVybnMuIFNlZSB7QGxpbmsgVUlEX1BST1BFUlRZfS5cbiAqIEBwYXJhbSB7T2JqZWN0PX0gb3B0X29iamVjdCBPcHRpb25hbCBvYmplY3QgdG8gYmUgbXV0YXRlZCB3aXRoIHRoZSB1aWQuIElmXG4gKiAgICAgbm90IHNwZWNpZmllZCB0aGlzIG1ldGhvZCBvbmx5IHJldHVybnMgdGhlIHVpZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9ub0luaGVyaXRhbmNlIE9wdGlvbmFsIGZsYWcgaW5kaWNhdGluZyBpZiB0aGlzXG4gKiAgICAgb2JqZWN0J3MgdWlkIHByb3BlcnR5IGNhbiBiZSBpbmhlcml0ZWQgZnJvbSBwYXJlbnRzIG9yIG5vdC5cbiAqIEB0aHJvd3Mge0Vycm9yfSB3aGVuIGludm9rZWQgdG8gaW5kaWNhdGUgdGhlIG1ldGhvZCBzaG91bGQgYmUgb3ZlcnJpZGRlbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFVpZChvcHRfb2JqZWN0LCBvcHRfbm9Jbmhlcml0YW5jZSkge1xuXHRpZiAob3B0X29iamVjdCkge1xuXHRcdGxldCBpZCA9IG9wdF9vYmplY3RbVUlEX1BST1BFUlRZXTtcblx0XHRpZiAob3B0X25vSW5oZXJpdGFuY2UgJiYgIW9wdF9vYmplY3QuaGFzT3duUHJvcGVydHkoVUlEX1BST1BFUlRZKSkge1xuXHRcdFx0aWQgPSBudWxsO1xuXHRcdH1cblx0XHRyZXR1cm4gaWQgfHwgKG9wdF9vYmplY3RbVUlEX1BST1BFUlRZXSA9IHVuaXF1ZUlkQ291bnRlcl8rKyk7XG5cdH1cblx0cmV0dXJuIHVuaXF1ZUlkQ291bnRlcl8rKztcbn1cblxuLyoqXG4gKiBUaGUgaWRlbnRpdHkgZnVuY3Rpb24uIFJldHVybnMgaXRzIGZpcnN0IGFyZ3VtZW50LlxuICogQHBhcmFtIHsqPX0gb3B0X3JldHVyblZhbHVlIFRoZSBzaW5nbGUgdmFsdWUgdGhhdCB3aWxsIGJlIHJldHVybmVkLlxuICogQHJldHVybiB7P30gVGhlIGZpcnN0IGFyZ3VtZW50LlxuICovXG5leHBvcnQgZnVuY3Rpb24gaWRlbnRpdHlGdW5jdGlvbihvcHRfcmV0dXJuVmFsdWUpIHtcblx0cmV0dXJuIG9wdF9yZXR1cm5WYWx1ZTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIHNwZWNpZmllZCB2YWx1ZSBpcyBhIGJvb2xlYW4uXG4gKiBAcGFyYW0gez99IHZhbCBWYXJpYWJsZSB0byB0ZXN0LlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB2YXJpYWJsZSBpcyBib29sZWFuLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNCb29sZWFuKHZhbCkge1xuXHRyZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ2Jvb2xlYW4nO1xufVxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgc3BlY2lmaWVkIHZhbHVlIGlzIG5vdCB1bmRlZmluZWQuXG4gKiBAcGFyYW0gez99IHZhbCBWYXJpYWJsZSB0byB0ZXN0LlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB2YXJpYWJsZSBpcyBkZWZpbmVkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNEZWYodmFsKSB7XG5cdHJldHVybiB2YWwgIT09IHVuZGVmaW5lZDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdmFsdWUgaXMgbm90IHVuZGVmaW5lZCBvciBudWxsLlxuICogQHBhcmFtIHsqfSB2YWxcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0RlZkFuZE5vdE51bGwodmFsKSB7XG5cdHJldHVybiBpc0RlZih2YWwpICYmICFpc051bGwodmFsKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdmFsdWUgaXMgYSBkb2N1bWVudC5cbiAqIEBwYXJhbSB7Kn0gdmFsXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNEb2N1bWVudCh2YWwpIHtcblx0cmV0dXJuIHZhbCAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0JyAmJiB2YWwubm9kZVR5cGUgPT09IDk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHZhbHVlIGlzIGEgZG9jdW1lbnQtZnJhZ21lbnQuXG4gKiBAcGFyYW0geyp9IHZhbFxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzRG9jdW1lbnRGcmFnbWVudCh2YWwpIHtcblx0cmV0dXJuIHZhbCAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0JyAmJiB2YWwubm9kZVR5cGUgPT09IDExO1xufVxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB2YWx1ZSBpcyBhIGRvbSBlbGVtZW50LlxuICogQHBhcmFtIHsqfSB2YWxcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0VsZW1lbnQodmFsKSB7XG5cdHJldHVybiB2YWwgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCcgJiYgdmFsLm5vZGVUeXBlID09PSAxO1xufVxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgc3BlY2lmaWVkIHZhbHVlIGlzIGEgZnVuY3Rpb24uXG4gKiBAcGFyYW0gez99IHZhbCBWYXJpYWJsZSB0byB0ZXN0LlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB2YXJpYWJsZSBpcyBhIGZ1bmN0aW9uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNGdW5jdGlvbih2YWwpIHtcblx0cmV0dXJuIHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbic7XG59XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHZhbHVlIGlzIG51bGwuXG4gKiBAcGFyYW0geyp9IHZhbFxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzTnVsbCh2YWwpIHtcblx0cmV0dXJuIHZhbCA9PT0gbnVsbDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIHNwZWNpZmllZCB2YWx1ZSBpcyBhIG51bWJlci5cbiAqIEBwYXJhbSB7P30gdmFsIFZhcmlhYmxlIHRvIHRlc3QuXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHZhcmlhYmxlIGlzIGEgbnVtYmVyLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNOdW1iZXIodmFsKSB7XG5cdHJldHVybiB0eXBlb2YgdmFsID09PSAnbnVtYmVyJztcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdmFsdWUgaXMgYSB3aW5kb3cuXG4gKiBAcGFyYW0geyp9IHZhbFxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzV2luZG93KHZhbCkge1xuXHRyZXR1cm4gdmFsICE9PSBudWxsICYmIHZhbCA9PT0gdmFsLndpbmRvdztcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIHNwZWNpZmllZCB2YWx1ZSBpcyBhbiBvYmplY3QuIFRoaXMgaW5jbHVkZXMgYXJyYXlzXG4gKiBhbmQgZnVuY3Rpb25zLlxuICogQHBhcmFtIHs/fSB2YWwgVmFyaWFibGUgdG8gdGVzdC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdmFyaWFibGUgaXMgYW4gb2JqZWN0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNPYmplY3QodmFsKSB7XG5cdGNvbnN0IHR5cGUgPSB0eXBlb2YgdmFsO1xuXHRyZXR1cm4gdHlwZSA9PT0gJ29iamVjdCcgJiYgdmFsICE9PSBudWxsIHx8IHR5cGUgPT09ICdmdW5jdGlvbic7XG59XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHZhbHVlIGlzIGEgUHJvbWlzZS5cbiAqIEBwYXJhbSB7Kn0gdmFsXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNQcm9taXNlKHZhbCkge1xuXHRyZXR1cm4gdmFsICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnICYmIHR5cGVvZiB2YWwudGhlbiA9PT0gJ2Z1bmN0aW9uJztcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdmFsdWUgaXMgYSBzdHJpbmcuXG4gKiBAcGFyYW0geyp9IHZhbFxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzU3RyaW5nKHZhbCkge1xuXHRyZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ3N0cmluZycgfHwgdmFsIGluc3RhbmNlb2YgU3RyaW5nO1xufVxuXG4vKipcbiAqIE51bGwgZnVuY3Rpb24gdXNlZCBmb3IgZGVmYXVsdCB2YWx1ZXMgb2YgY2FsbGJhY2tzLCBldGMuXG4gKiBAcmV0dXJuIHt2b2lkfSBOb3RoaW5nLlxuICovXG5leHBvcnQgZnVuY3Rpb24gbnVsbEZ1bmN0aW9uKCkge1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vLyBUaGlzIGZpbGUgZXhpc3RzIGp1c3QgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LCBtYWtpbmcgc3VyZSB0aGF0IG9sZFxuLy8gZGVmYXVsdCBpbXBvcnRzIGZvciB0aGlzIGZpbGUgc3RpbGwgd29yay4gSXQncyBiZXN0IHRvIHVzZSB0aGUgbmFtZWQgZXhwb3J0c1xuLy8gZm9yIGVhY2ggZnVuY3Rpb24gaW5zdGVhZCB0aG91Z2gsIHNpbmNlIHRoYXQgYWxsb3dzIGJ1bmRsZXJzIGxpa2UgUm9sbHVwIHRvXG4vLyByZWR1Y2UgdGhlIGJ1bmRsZSBzaXplIGJ5IHJlbW92aW5nIHVudXNlZCBjb2RlLlxuaW1wb3J0ICogYXMgY29yZSBmcm9tICcuL2NvcmVOYW1lZCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNvcmU7XG5leHBvcnQgeyBjb3JlIH07XG5leHBvcnQgKiBmcm9tICcuL2NvcmVOYW1lZCc7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB7IGlzRGVmIH0gZnJvbSAnLi4vY29yZSc7XG5cbmNsYXNzIGFycmF5IHtcblx0LyoqXG5cdCAqIENoZWNrcyBpZiB0aGUgZ2l2ZW4gYXJyYXlzIGhhdmUgdGhlIHNhbWUgY29udGVudC5cblx0ICogQHBhcmFtIHshQXJyYXk8Kj59IGFycjFcblx0ICogQHBhcmFtIHshQXJyYXk8Kj59IGFycjJcblx0ICogQHJldHVybiB7Ym9vbGVhbn1cblx0ICovXG5cdHN0YXRpYyBlcXVhbChhcnIxLCBhcnIyKSB7XG5cdFx0aWYgKGFycjEgPT09IGFycjIpIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0XHRpZiAoYXJyMS5sZW5ndGggIT09IGFycjIubGVuZ3RoKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgYXJyMS5sZW5ndGg7IGkrKykge1xuXHRcdFx0aWYgKGFycjFbaV0gIT09IGFycjJbaV0pIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBmaXJzdCB2YWx1ZSBpbiB0aGUgZ2l2ZW4gYXJyYXkgdGhhdCBpc24ndCB1bmRlZmluZWQuXG5cdCAqIEBwYXJhbSB7IUFycmF5fSBhcnJcblx0ICogQHJldHVybiB7Kn1cblx0ICovXG5cdHN0YXRpYyBmaXJzdERlZmluZWRWYWx1ZShhcnIpIHtcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuXHRcdFx0aWYgKGFycltpXSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdHJldHVybiBhcnJbaV07XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIFRyYW5zZm9ybXMgdGhlIGlucHV0IG5lc3RlZCBhcnJheSB0byBiZWNvbWUgZmxhdC5cblx0ICogQHBhcmFtIHtBcnJheS48KnxBcnJheS48Kj4+fSBhcnIgTmVzdGVkIGFycmF5IHRvIGZsYXR0ZW4uXG5cdCAqIEBwYXJhbSB7QXJyYXkuPCo+fSBvcHRfb3V0cHV0IE9wdGlvbmFsIG91dHB1dCBhcnJheS5cblx0ICogQHJldHVybiB7QXJyYXkuPCo+fSBGbGF0IGFycmF5LlxuXHQgKi9cblx0c3RhdGljIGZsYXR0ZW4oYXJyLCBvcHRfb3V0cHV0KSB7XG5cdFx0dmFyIG91dHB1dCA9IG9wdF9vdXRwdXQgfHwgW107XG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcblx0XHRcdGlmIChBcnJheS5pc0FycmF5KGFycltpXSkpIHtcblx0XHRcdFx0YXJyYXkuZmxhdHRlbihhcnJbaV0sIG91dHB1dCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRvdXRwdXQucHVzaChhcnJbaV0pO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gb3V0cHV0O1xuXHR9XG5cblx0LyoqXG5cdCAqIFJlbW92ZXMgdGhlIGZpcnN0IG9jY3VycmVuY2Ugb2YgYSBwYXJ0aWN1bGFyIHZhbHVlIGZyb20gYW4gYXJyYXkuXG5cdCAqIEBwYXJhbSB7QXJyYXkuPFQ+fSBhcnIgQXJyYXkgZnJvbSB3aGljaCB0byByZW1vdmUgdmFsdWUuXG5cdCAqIEBwYXJhbSB7VH0gb2JqIE9iamVjdCB0byByZW1vdmUuXG5cdCAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgYW4gZWxlbWVudCB3YXMgcmVtb3ZlZC5cblx0ICogQHRlbXBsYXRlIFRcblx0ICovXG5cdHN0YXRpYyByZW1vdmUoYXJyLCBvYmopIHtcblx0XHRjb25zdCBpID0gYXJyLmluZGV4T2Yob2JqKTtcblx0XHRsZXQgcnY7XG5cdFx0aWYgKCAocnYgPSBpID49IDApICkge1xuXHRcdFx0YXJyYXkucmVtb3ZlQXQoYXJyLCBpKTtcblx0XHR9XG5cdFx0cmV0dXJuIHJ2O1xuXHR9XG5cblx0LyoqXG5cdCAqIFJlbW92ZXMgZnJvbSBhbiBhcnJheSB0aGUgZWxlbWVudCBhdCBpbmRleCBpXG5cdCAqIEBwYXJhbSB7QXJyYXl9IGFyciBBcnJheSBvciBhcnJheSBsaWtlIG9iamVjdCBmcm9tIHdoaWNoIHRvIHJlbW92ZSB2YWx1ZS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IGkgVGhlIGluZGV4IHRvIHJlbW92ZS5cblx0ICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBhbiBlbGVtZW50IHdhcyByZW1vdmVkLlxuXHQgKi9cblx0c3RhdGljIHJlbW92ZUF0KGFyciwgaSkge1xuXHRcdHJldHVybiBBcnJheS5wcm90b3R5cGUuc3BsaWNlLmNhbGwoYXJyLCBpLCAxKS5sZW5ndGggPT09IDE7XG5cdH1cblxuXHQvKipcblx0ICogU2xpY2VzIHRoZSBnaXZlbiBhcnJheSwganVzdCBsaWtlIEFycmF5LnByb3RvdHlwZS5zbGljZSwgYnV0IHRoaXNcblx0ICogaXMgZmFzdGVyIGFuZCB3b3JraW5nIG9uIGFsbCBhcnJheS1saWtlIG9iamVjdHMgKGxpa2UgYXJndW1lbnRzKS5cblx0ICogQHBhcmFtIHshT2JqZWN0fSBhcnIgQXJyYXktbGlrZSBvYmplY3QgdG8gc2xpY2UuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCBUaGUgaW5kZXggdGhhdCBzaG91bGQgc3RhcnQgdGhlIHNsaWNlLlxuXHQgKiBAcGFyYW0ge251bWJlcj19IG9wdF9lbmQgVGhlIGluZGV4IHdoZXJlIHRoZSBzbGljZSBzaG91bGQgZW5kLCBub3Rcblx0ICogICBpbmNsdWRlZCBpbiB0aGUgZmluYWwgYXJyYXkuIElmIG5vdCBnaXZlbiwgYWxsIGVsZW1lbnRzIGFmdGVyIHRoZVxuXHQgKiAgIHN0YXJ0IGluZGV4IHdpbGwgYmUgaW5jbHVkZWQuXG5cdCAqIEByZXR1cm4geyFBcnJheX1cblx0ICovXG5cdHN0YXRpYyBzbGljZShhcnIsIHN0YXJ0LCBvcHRfZW5kKSB7XG5cdFx0Y29uc3Qgc2xpY2VkID0gW107XG5cdFx0Y29uc3QgZW5kID0gaXNEZWYob3B0X2VuZCkgPyBvcHRfZW5kIDogYXJyLmxlbmd0aDtcblx0XHRmb3IgKGxldCBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkrKykge1xuXHRcdFx0c2xpY2VkLnB1c2goYXJyW2ldKTtcblx0XHR9XG5cdFx0cmV0dXJuIHNsaWNlZDtcblx0fVxufVxuXG5leHBvcnQgZGVmYXVsdCBhcnJheTtcbiIsIi8qIVxuICogUG9seWZpbGwgZnJvbSBHb29nbGUncyBDbG9zdXJlIExpYnJhcnkuXG4gKiBDb3B5cmlnaHQgMjAxMyBUaGUgQ2xvc3VyZSBMaWJyYXJ5IEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBhc3luYyA9IHt9O1xuXG5cbi8qKlxuICogVGhyb3cgYW4gaXRlbSB3aXRob3V0IGludGVycnVwdGluZyB0aGUgY3VycmVudCBleGVjdXRpb24gY29udGV4dC4gIEZvclxuICogZXhhbXBsZSwgaWYgcHJvY2Vzc2luZyBhIGdyb3VwIG9mIGl0ZW1zIGluIGEgbG9vcCwgc29tZXRpbWVzIGl0IGlzIHVzZWZ1bFxuICogdG8gcmVwb3J0IGFuIGVycm9yIHdoaWxlIHN0aWxsIGFsbG93aW5nIHRoZSByZXN0IG9mIHRoZSBiYXRjaCB0byBiZVxuICogcHJvY2Vzc2VkLlxuICogQHBhcmFtIHsqfSBleGNlcHRpb25cbiAqL1xuYXN5bmMudGhyb3dFeGNlcHRpb24gPSBmdW5jdGlvbihleGNlcHRpb24pIHtcblx0Ly8gRWFjaCB0aHJvdyBuZWVkcyB0byBiZSBpbiBpdHMgb3duIGNvbnRleHQuXG5cdGFzeW5jLm5leHRUaWNrKGZ1bmN0aW9uKCkge1xuXHRcdHRocm93IGV4Y2VwdGlvbjtcblx0fSk7XG59O1xuXG5cbi8qKlxuICogRmlyZXMgdGhlIHByb3ZpZGVkIGNhbGxiYWNrIGp1c3QgYmVmb3JlIHRoZSBjdXJyZW50IGNhbGxzdGFjayB1bndpbmRzLCBvciBhc1xuICogc29vbiBhcyBwb3NzaWJsZSBhZnRlciB0aGUgY3VycmVudCBKUyBleGVjdXRpb24gY29udGV4dC5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24odGhpczpUSElTKX0gY2FsbGJhY2tcbiAqIEBwYXJhbSB7VEhJUz19IG9wdF9jb250ZXh0IE9iamVjdCB0byB1c2UgYXMgdGhlIFwidGhpcyB2YWx1ZVwiIHdoZW4gY2FsbGluZ1xuICogICAgIHRoZSBwcm92aWRlZCBmdW5jdGlvbi5cbiAqIEB0ZW1wbGF0ZSBUSElTXG4gKi9cbmFzeW5jLnJ1biA9IGZ1bmN0aW9uKGNhbGxiYWNrLCBvcHRfY29udGV4dCkge1xuXHRpZiAoIWFzeW5jLnJ1bi53b3JrUXVldWVTY2hlZHVsZWRfKSB7XG5cdFx0Ly8gTm90aGluZyBpcyBjdXJyZW50bHkgc2NoZWR1bGVkLCBzY2hlZHVsZSBpdCBub3cuXG5cdFx0YXN5bmMubmV4dFRpY2soYXN5bmMucnVuLnByb2Nlc3NXb3JrUXVldWUpO1xuXHRcdGFzeW5jLnJ1bi53b3JrUXVldWVTY2hlZHVsZWRfID0gdHJ1ZTtcblx0fVxuXG5cdGFzeW5jLnJ1bi53b3JrUXVldWVfLnB1c2goXG5cdFx0bmV3IGFzeW5jLnJ1bi5Xb3JrSXRlbV8oY2FsbGJhY2ssIG9wdF9jb250ZXh0KSk7XG59O1xuXG5cbi8qKiBAcHJpdmF0ZSB7Ym9vbGVhbn0gKi9cbmFzeW5jLnJ1bi53b3JrUXVldWVTY2hlZHVsZWRfID0gZmFsc2U7XG5cblxuLyoqIEBwcml2YXRlIHshQXJyYXkuPCFhc3luYy5ydW4uV29ya0l0ZW1fPn0gKi9cbmFzeW5jLnJ1bi53b3JrUXVldWVfID0gW107XG5cbi8qKlxuICogUnVuIGFueSBwZW5kaW5nIGFzeW5jLnJ1biB3b3JrIGl0ZW1zLiBUaGlzIGZ1bmN0aW9uIGlzIG5vdCBpbnRlbmRlZFxuICogZm9yIGdlbmVyYWwgdXNlLCBidXQgZm9yIHVzZSBieSBlbnRyeSBwb2ludCBoYW5kbGVycyB0byBydW4gaXRlbXMgYWhlYWQgb2ZcbiAqIGFzeW5jLm5leHRUaWNrLlxuICovXG5hc3luYy5ydW4ucHJvY2Vzc1dvcmtRdWV1ZSA9IGZ1bmN0aW9uKCkge1xuXHQvLyBOT1RFOiBhZGRpdGlvbmFsIHdvcmsgcXVldWUgaXRlbXMgbWF5IGJlIHB1c2hlZCB3aGlsZSBwcm9jZXNzaW5nLlxuXHR3aGlsZSAoYXN5bmMucnVuLndvcmtRdWV1ZV8ubGVuZ3RoKSB7XG5cdFx0Ly8gRG9uJ3QgbGV0IHRoZSB3b3JrIHF1ZXVlIGdyb3cgaW5kZWZpbml0ZWx5LlxuXHRcdGNvbnN0IHdvcmtJdGVtcyA9IGFzeW5jLnJ1bi53b3JrUXVldWVfO1xuXHRcdGFzeW5jLnJ1bi53b3JrUXVldWVfID0gW107XG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCB3b3JrSXRlbXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdGNvbnN0IHdvcmtJdGVtID0gd29ya0l0ZW1zW2ldO1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0d29ya0l0ZW0uZm4uY2FsbCh3b3JrSXRlbS5zY29wZSk7XG5cdFx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRcdGFzeW5jLnRocm93RXhjZXB0aW9uKGUpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFRoZXJlIGFyZSBubyBtb3JlIHdvcmsgaXRlbXMsIHJlc2V0IHRoZSB3b3JrIHF1ZXVlLlxuXHRhc3luYy5ydW4ud29ya1F1ZXVlU2NoZWR1bGVkXyA9IGZhbHNlO1xufTtcblxuXG4vKipcbiAqIEBjb25zdHJ1Y3RvclxuICogQGZpbmFsXG4gKiBAc3RydWN0XG4gKiBAcHJpdmF0ZVxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oKX0gZm5cbiAqIEBwYXJhbSB7T2JqZWN0fG51bGx8dW5kZWZpbmVkfSBzY29wZVxuICovXG5hc3luYy5ydW4uV29ya0l0ZW1fID0gZnVuY3Rpb24oZm4sIHNjb3BlKSB7XG5cdC8qKiBAY29uc3QgKi9cblx0dGhpcy5mbiA9IGZuO1xuXHQvKiogQGNvbnN0ICovXG5cdHRoaXMuc2NvcGUgPSBzY29wZTtcbn07XG5cblxuLyoqXG4gKiBGaXJlcyB0aGUgcHJvdmlkZWQgY2FsbGJhY2tzIGFzIHNvb24gYXMgcG9zc2libGUgYWZ0ZXIgdGhlIGN1cnJlbnQgSlNcbiAqIGV4ZWN1dGlvbiBjb250ZXh0LiBzZXRUaW1lb3V0KOKApiwgMCkgYWx3YXlzIHRha2VzIGF0IGxlYXN0IDVtcyBmb3IgbGVnYWN5XG4gKiByZWFzb25zLlxuICogQHBhcmFtIHtmdW5jdGlvbih0aGlzOlNDT1BFKX0gY2FsbGJhY2sgQ2FsbGJhY2sgZnVuY3Rpb24gdG8gZmlyZSBhcyBzb29uIGFzXG4gKiAgICAgcG9zc2libGUuXG4gKiBAcGFyYW0ge1NDT1BFPX0gb3B0X2NvbnRleHQgT2JqZWN0IGluIHdob3NlIHNjb3BlIHRvIGNhbGwgdGhlIGxpc3RlbmVyLlxuICogQHRlbXBsYXRlIFNDT1BFXG4gKi9cbmFzeW5jLm5leHRUaWNrID0gZnVuY3Rpb24oY2FsbGJhY2ssIG9wdF9jb250ZXh0KSB7XG5cdGxldCBjYiA9IGNhbGxiYWNrO1xuXHRpZiAob3B0X2NvbnRleHQpIHtcblx0XHRjYiA9IGNhbGxiYWNrLmJpbmQob3B0X2NvbnRleHQpO1xuXHR9XG5cdGNiID0gYXN5bmMubmV4dFRpY2sud3JhcENhbGxiYWNrXyhjYik7XG5cdC8vIEludHJvZHVjZWQgYW5kIGN1cnJlbnRseSBvbmx5IHN1cHBvcnRlZCBieSBJRTEwLlxuXHQvLyBWZXJpZnkgaWYgdmFyaWFibGUgaXMgZGVmaW5lZCBvbiB0aGUgY3VycmVudCBydW50aW1lIChpLmUuLCBub2RlLCBicm93c2VyKS5cblx0Ly8gQ2FuJ3QgdXNlIHR5cGVvZiBlbmNsb3NlZCBpbiBhIGZ1bmN0aW9uIChzdWNoIGFzIGNvcmUuaXNGdW5jdGlvbikgb3IgYW5cblx0Ly8gZXhjZXB0aW9uIHdpbGwgYmUgdGhyb3duIHdoZW4gdGhlIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbiBhbiBlbnZpcm9ubWVudFxuXHQvLyB3aGVyZSB0aGUgdmFyaWFibGUgaXMgdW5kZWZpbmVkLlxuXHRpZiAodHlwZW9mIHNldEltbWVkaWF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdHNldEltbWVkaWF0ZShjYik7XG5cdFx0cmV0dXJuO1xuXHR9XG5cdC8vIExvb2sgZm9yIGFuZCBjYWNoZSB0aGUgY3VzdG9tIGZhbGxiYWNrIHZlcnNpb24gb2Ygc2V0SW1tZWRpYXRlLlxuXHRpZiAoIWFzeW5jLm5leHRUaWNrLnNldEltbWVkaWF0ZV8pIHtcblx0XHRhc3luYy5uZXh0VGljay5zZXRJbW1lZGlhdGVfID0gYXN5bmMubmV4dFRpY2suZ2V0U2V0SW1tZWRpYXRlRW11bGF0b3JfKCk7XG5cdH1cblx0YXN5bmMubmV4dFRpY2suc2V0SW1tZWRpYXRlXyhjYik7XG59O1xuXG5cbi8qKlxuICogQ2FjaGUgZm9yIHRoZSBzZXRJbW1lZGlhdGUgaW1wbGVtZW50YXRpb24uXG4gKiBAdHlwZSB7ZnVuY3Rpb24oZnVuY3Rpb24oKSl9XG4gKiBAcHJpdmF0ZVxuICovXG5hc3luYy5uZXh0VGljay5zZXRJbW1lZGlhdGVfID0gbnVsbDtcblxuXG4vKipcbiAqIERldGVybWluZXMgdGhlIGJlc3QgcG9zc2libGUgaW1wbGVtZW50YXRpb24gdG8gcnVuIGEgZnVuY3Rpb24gYXMgc29vbiBhc1xuICogdGhlIEpTIGV2ZW50IGxvb3AgaXMgaWRsZS5cbiAqIEByZXR1cm4ge2Z1bmN0aW9uKGZ1bmN0aW9uKCkpfSBUaGUgXCJzZXRJbW1lZGlhdGVcIiBpbXBsZW1lbnRhdGlvbi5cbiAqIEBwcml2YXRlXG4gKi9cbmFzeW5jLm5leHRUaWNrLmdldFNldEltbWVkaWF0ZUVtdWxhdG9yXyA9IGZ1bmN0aW9uKCkge1xuXHQvLyBDcmVhdGUgYSBwcml2YXRlIG1lc3NhZ2UgY2hhbm5lbCBhbmQgdXNlIGl0IHRvIHBvc3RNZXNzYWdlIGVtcHR5IG1lc3NhZ2VzXG5cdC8vIHRvIG91cnNlbHZlcy5cblx0bGV0IENoYW5uZWw7XG5cblx0Ly8gVmVyaWZ5IGlmIHZhcmlhYmxlIGlzIGRlZmluZWQgb24gdGhlIGN1cnJlbnQgcnVudGltZSAoaS5lLiwgbm9kZSwgYnJvd3NlcikuXG5cdC8vIENhbid0IHVzZSB0eXBlb2YgZW5jbG9zZWQgaW4gYSBmdW5jdGlvbiAoc3VjaCBhcyBjb3JlLmlzRnVuY3Rpb24pIG9yIGFuXG5cdC8vIGV4Y2VwdGlvbiB3aWxsIGJlIHRocm93biB3aGVuIHRoZSBmdW5jdGlvbiBpcyBjYWxsZWQgb24gYW4gZW52aXJvbm1lbnRcblx0Ly8gd2hlcmUgdGhlIHZhcmlhYmxlIGlzIHVuZGVmaW5lZC5cblx0aWYgKHR5cGVvZiBNZXNzYWdlQ2hhbm5lbCA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdENoYW5uZWwgPSBNZXNzYWdlQ2hhbm5lbDtcblx0fVxuXG5cdC8vIElmIE1lc3NhZ2VDaGFubmVsIGlzIG5vdCBhdmFpbGFibGUgYW5kIHdlIGFyZSBpbiBhIGJyb3dzZXIsIGltcGxlbWVudFxuXHQvLyBhbiBpZnJhbWUgYmFzZWQgcG9seWZpbGwgaW4gYnJvd3NlcnMgdGhhdCBoYXZlIHBvc3RNZXNzYWdlIGFuZFxuXHQvLyBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyLiBUaGUgbGF0dGVyIGV4Y2x1ZGVzIElFOCBiZWNhdXNlIGl0IGhhcyBhXG5cdC8vIHN5bmNocm9ub3VzIHBvc3RNZXNzYWdlIGltcGxlbWVudGF0aW9uLlxuXHRpZiAodHlwZW9mIENoYW5uZWwgPT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmXG5cdFx0d2luZG93LnBvc3RNZXNzYWdlICYmIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKSB7XG5cdFx0LyoqIEBjb25zdHJ1Y3RvciAqL1xuXHRcdENoYW5uZWwgPSBmdW5jdGlvbigpIHtcblx0XHRcdC8vIE1ha2UgYW4gZW1wdHksIGludmlzaWJsZSBpZnJhbWUuXG5cdFx0XHRjb25zdCBpZnJhbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpZnJhbWUnKTtcblx0XHRcdGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuXHRcdFx0aWZyYW1lLnNyYyA9ICcnO1xuXHRcdFx0ZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmFwcGVuZENoaWxkKGlmcmFtZSk7XG5cdFx0XHRjb25zdCB3aW4gPSBpZnJhbWUuY29udGVudFdpbmRvdztcblx0XHRcdGNvbnN0IGRvYyA9IHdpbi5kb2N1bWVudDtcblx0XHRcdGRvYy5vcGVuKCk7XG5cdFx0XHRkb2Mud3JpdGUoJycpO1xuXHRcdFx0ZG9jLmNsb3NlKCk7XG5cdFx0XHRjb25zdCBtZXNzYWdlID0gJ2NhbGxJbW1lZGlhdGUnICsgTWF0aC5yYW5kb20oKTtcblx0XHRcdGNvbnN0IG9yaWdpbiA9IHdpbi5sb2NhdGlvbi5wcm90b2NvbCArICcvLycgKyB3aW4ubG9jYXRpb24uaG9zdDtcblx0XHRcdGNvbnN0IG9ubWVzc2FnZSA9IGZ1bmN0aW9uKGUpIHtcblx0XHRcdFx0Ly8gVmFsaWRhdGUgb3JpZ2luIGFuZCBtZXNzYWdlIHRvIG1ha2Ugc3VyZSB0aGF0IHRoaXMgbWVzc2FnZSB3YXNcblx0XHRcdFx0Ly8gaW50ZW5kZWQgZm9yIHVzLlxuXHRcdFx0XHRpZiAoZS5vcmlnaW4gIT09IG9yaWdpbiAmJiBlLmRhdGEgIT09IG1lc3NhZ2UpIHtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdFx0dGhpcy5wb3J0MS5vbm1lc3NhZ2UoKTtcblx0XHRcdH0uYmluZCh0aGlzKTtcblx0XHRcdHdpbi5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgb25tZXNzYWdlLCBmYWxzZSk7XG5cdFx0XHR0aGlzLnBvcnQxID0ge307XG5cdFx0XHR0aGlzLnBvcnQyID0ge1xuXHRcdFx0XHRwb3N0TWVzc2FnZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0d2luLnBvc3RNZXNzYWdlKG1lc3NhZ2UsIG9yaWdpbik7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0fTtcblx0fVxuXHRpZiAodHlwZW9mIENoYW5uZWwgIT09ICd1bmRlZmluZWQnKSB7XG5cdFx0Y29uc3QgY2hhbm5lbCA9IG5ldyBDaGFubmVsKCk7XG5cdFx0Ly8gVXNlIGEgZmlmbyBsaW5rZWQgbGlzdCB0byBjYWxsIGNhbGxiYWNrcyBpbiB0aGUgcmlnaHQgb3JkZXIuXG5cdFx0bGV0IGhlYWQgPSB7fTtcblx0XHRsZXQgdGFpbCA9IGhlYWQ7XG5cdFx0Y2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBmdW5jdGlvbigpIHtcblx0XHRcdGhlYWQgPSBoZWFkLm5leHQ7XG5cdFx0XHRjb25zdCBjYiA9IGhlYWQuY2I7XG5cdFx0XHRoZWFkLmNiID0gbnVsbDtcblx0XHRcdGNiKCk7XG5cdFx0fTtcblx0XHRyZXR1cm4gZnVuY3Rpb24oY2IpIHtcblx0XHRcdHRhaWwubmV4dCA9IHtcblx0XHRcdFx0Y2I6IGNiXG5cdFx0XHR9O1xuXHRcdFx0dGFpbCA9IHRhaWwubmV4dDtcblx0XHRcdGNoYW5uZWwucG9ydDIucG9zdE1lc3NhZ2UoMCk7XG5cdFx0fTtcblx0fVxuXHQvLyBJbXBsZW1lbnRhdGlvbiBmb3IgSUU2LTg6IFNjcmlwdCBlbGVtZW50cyBmaXJlIGFuIGFzeW5jaHJvbm91c1xuXHQvLyBvbnJlYWR5c3RhdGVjaGFuZ2UgZXZlbnQgd2hlbiBpbnNlcnRlZCBpbnRvIHRoZSBET00uXG5cdGlmICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmICdvbnJlYWR5c3RhdGVjaGFuZ2UnIGluXG5cdFx0ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0JykpIHtcblx0XHRyZXR1cm4gZnVuY3Rpb24oY2IpIHtcblx0XHRcdGxldCBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcblx0XHRcdHNjcmlwdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0Ly8gQ2xlYW4gdXAgYW5kIGNhbGwgdGhlIGNhbGxiYWNrLlxuXHRcdFx0XHRzY3JpcHQub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDtcblx0XHRcdFx0c2NyaXB0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc2NyaXB0KTtcblx0XHRcdFx0c2NyaXB0ID0gbnVsbDtcblx0XHRcdFx0Y2IoKTtcblx0XHRcdFx0Y2IgPSBudWxsO1xuXHRcdFx0fTtcblx0XHRcdGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5hcHBlbmRDaGlsZChzY3JpcHQpO1xuXHRcdH07XG5cdH1cblx0Ly8gRmFsbCBiYWNrIHRvIHNldFRpbWVvdXQgd2l0aCAwLiBJbiBicm93c2VycyB0aGlzIGNyZWF0ZXMgYSBkZWxheSBvZiA1bXNcblx0Ly8gb3IgbW9yZS5cblx0cmV0dXJuIGZ1bmN0aW9uKGNiKSB7XG5cdFx0c2V0VGltZW91dChjYiwgMCk7XG5cdH07XG59O1xuXG5cbi8qKlxuICogSGVscGVyIGZ1bmN0aW9uIHRoYXQgaXMgb3ZlcnJpZGVkIHRvIHByb3RlY3QgY2FsbGJhY2tzIHdpdGggZW50cnkgcG9pbnRcbiAqIG1vbml0b3IgaWYgdGhlIGFwcGxpY2F0aW9uIG1vbml0b3JzIGVudHJ5IHBvaW50cy5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oKX0gY2FsbGJhY2sgQ2FsbGJhY2sgZnVuY3Rpb24gdG8gZmlyZSBhcyBzb29uIGFzIHBvc3NpYmxlLlxuICogQHJldHVybiB7ZnVuY3Rpb24oKX0gVGhlIHdyYXBwZWQgY2FsbGJhY2suXG4gKiBAcHJpdmF0ZVxuICovXG5hc3luYy5uZXh0VGljay53cmFwQ2FsbGJhY2tfID0gZnVuY3Rpb24ob3B0X3JldHVyblZhbHVlKSB7XG5cdHJldHVybiBvcHRfcmV0dXJuVmFsdWU7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBhc3luYztcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBEaXNwb3NhYmxlIHV0aWxpdHkuIFdoZW4gaW5oZXJpdGVkIHByb3ZpZGVzIHRoZSBgZGlzcG9zZWAgZnVuY3Rpb24gdG8gaXRzXG4gKiBzdWJjbGFzcywgd2hpY2ggaXMgcmVzcG9uc2libGUgZm9yIGRpc3Bvc2luZyBvZiBhbnkgb2JqZWN0IHJlZmVyZW5jZXNcbiAqIHdoZW4gYW4gaW5zdGFuY2Ugd29uJ3QgYmUgdXNlZCBhbnltb3JlLiBTdWJjbGFzc2VzIHNob3VsZCBvdmVycmlkZVxuICogYGRpc3Bvc2VJbnRlcm5hbGAgdG8gaW1wbGVtZW50IGFueSBzcGVjaWZpYyBkaXNwb3NpbmcgbG9naWMuXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuY2xhc3MgRGlzcG9zYWJsZSB7XG5cdGNvbnN0cnVjdG9yKCkge1xuXHRcdC8qKlxuXHRcdCAqIEZsYWcgaW5kaWNhdGluZyBpZiB0aGlzIGluc3RhbmNlIGhhcyBhbHJlYWR5IGJlZW4gZGlzcG9zZWQuXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQHByb3RlY3RlZFxuXHRcdCAqL1xuXHRcdHRoaXMuZGlzcG9zZWRfID0gZmFsc2U7XG5cdH1cblxuXHQvKipcblx0ICogRGlzcG9zZXMgb2YgdGhpcyBpbnN0YW5jZSdzIG9iamVjdCByZWZlcmVuY2VzLiBDYWxscyBgZGlzcG9zZUludGVybmFsYC5cblx0ICovXG5cdGRpc3Bvc2UoKSB7XG5cdFx0aWYgKCF0aGlzLmRpc3Bvc2VkXykge1xuXHRcdFx0dGhpcy5kaXNwb3NlSW50ZXJuYWwoKTtcblx0XHRcdHRoaXMuZGlzcG9zZWRfID0gdHJ1ZTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogU3ViY2xhc3NlcyBzaG91bGQgb3ZlcnJpZGUgdGhpcyBtZXRob2QgdG8gaW1wbGVtZW50IGFueSBzcGVjaWZpY1xuXHQgKiBkaXNwb3NpbmcgbG9naWMgKGxpa2UgY2xlYXJpbmcgcmVmZXJlbmNlcyBhbmQgY2FsbGluZyBgZGlzcG9zZWAgb24gb3RoZXJcblx0ICogZGlzcG9zYWJsZXMpLlxuXHQgKi9cblx0ZGlzcG9zZUludGVybmFsKCkge31cblxuXHQvKipcblx0ICogQ2hlY2tzIGlmIHRoaXMgaW5zdGFuY2UgaGFzIGFscmVhZHkgYmVlbiBkaXNwb3NlZC5cblx0ICogQHJldHVybiB7Ym9vbGVhbn1cblx0ICovXG5cdGlzRGlzcG9zZWQoKSB7XG5cdFx0cmV0dXJuIHRoaXMuZGlzcG9zZWRfO1xuXHR9XG59XG5cbmV4cG9ydCBkZWZhdWx0IERpc3Bvc2FibGU7XG4iLCIndXNlIHN0cmljdCc7XG5cbmNsYXNzIG9iamVjdCB7XG5cdC8qKlxuXHQgKiBDb3BpZXMgYWxsIHRoZSBtZW1iZXJzIG9mIGEgc291cmNlIG9iamVjdCB0byBhIHRhcmdldCBvYmplY3QuXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSB0YXJnZXQgVGFyZ2V0IG9iamVjdC5cblx0ICogQHBhcmFtIHsuLi5PYmplY3R9IHZhcl9hcmdzIFRoZSBvYmplY3RzIGZyb20gd2hpY2ggdmFsdWVzIHdpbGwgYmUgY29waWVkLlxuXHQgKiBAcmV0dXJuIHtPYmplY3R9IFJldHVybnMgdGhlIHRhcmdldCBvYmplY3QgcmVmZXJlbmNlLlxuXHQgKi9cblx0c3RhdGljIG1peGluKHRhcmdldCkge1xuXHRcdGxldCBrZXksIHNvdXJjZTtcblx0XHRmb3IgKGxldCBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0c291cmNlID0gYXJndW1lbnRzW2ldO1xuXHRcdFx0Zm9yIChrZXkgaW4gc291cmNlKSB7XG5cdFx0XHRcdHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiB0YXJnZXQ7XG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBhbiBvYmplY3QgYmFzZWQgb24gaXRzIGZ1bGx5IHF1YWxpZmllZCBleHRlcm5hbCBuYW1lLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgZnVsbHkgcXVhbGlmaWVkIG5hbWUuXG5cdCAqIEBwYXJhbSB7b2JqZWN0PX0gb3B0X29iaiBUaGUgb2JqZWN0IHdpdGhpbiB3aGljaCB0byBsb29rOyBkZWZhdWx0IGlzXG5cdCAqICAgICA8Y29kZT53aW5kb3c8L2NvZGU+LlxuXHQgKiBAcmV0dXJuIHs/fSBUaGUgdmFsdWUgKG9iamVjdCBvciBwcmltaXRpdmUpIG9yLCBpZiBub3QgZm91bmQsIHVuZGVmaW5lZC5cblx0ICovXG5cdHN0YXRpYyBnZXRPYmplY3RCeU5hbWUobmFtZSwgb3B0X29iaikge1xuXHRcdGNvbnN0IHNjb3BlID0gb3B0X29iaiB8fCB3aW5kb3c7XG5cdFx0Y29uc3QgcGFydHMgPSBuYW1lLnNwbGl0KCcuJyk7XG5cdFx0cmV0dXJuIHBhcnRzLnJlZHVjZSgocGFydCwga2V5KSA9PiBwYXJ0W2tleV0sIHNjb3BlKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGEgbmV3IG9iamVjdCB3aXRoIHRoZSBzYW1lIGtleXMgYXMgdGhlIGdpdmVuIG9uZSwgYnV0IHdpdGhcblx0ICogdGhlaXIgdmFsdWVzIHNldCB0byB0aGUgcmV0dXJuIHZhbHVlcyBvZiB0aGUgc3BlY2lmaWVkIGZ1bmN0aW9uLlxuXHQgKiBAcGFyYW0geyFPYmplY3R9IG9ialxuXHQgKiBAcGFyYW0geyFmdW5jdGlvbihzdHJpbmcsICopfSBmblxuXHQgKiBAcmV0dXJuIHshT2JqZWN0fVxuXHQgKi9cblx0c3RhdGljIG1hcChvYmosIGZuKSB7XG5cdFx0Y29uc3QgbWFwcGVkT2JqID0ge307XG5cdFx0Y29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKG9iaik7XG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRtYXBwZWRPYmpba2V5c1tpXV0gPSBmbihrZXlzW2ldLCBvYmpba2V5c1tpXV0pO1xuXHRcdH1cblx0XHRyZXR1cm4gbWFwcGVkT2JqO1xuXHR9XG5cblx0LyoqXG5cdCAqIENoZWNrcyBpZiB0aGUgdHdvIGdpdmVuIG9iamVjdHMgYXJlIGVxdWFsLiBUaGlzIGlzIGRvbmUgdmlhIGEgc2hhbGxvd1xuXHQgKiBjaGVjaywgaW5jbHVkaW5nIG9ubHkgdGhlIGtleXMgZGlyZWN0bHkgY29udGFpbmVkIGJ5IHRoZSAyIG9iamVjdHMuXG5cdCAqIEByZXR1cm4ge2Jvb2xlYW59XG5cdCAqL1xuXHRzdGF0aWMgc2hhbGxvd0VxdWFsKG9iajEsIG9iajIpIHtcblx0XHRpZiAob2JqMSA9PT0gb2JqMikge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXG5cdFx0Y29uc3Qga2V5czEgPSBPYmplY3Qua2V5cyhvYmoxKTtcblx0XHRjb25zdCBrZXlzMiA9IE9iamVjdC5rZXlzKG9iajIpO1xuXHRcdGlmIChrZXlzMS5sZW5ndGggIT09IGtleXMyLmxlbmd0aCkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwga2V5czEubGVuZ3RoOyBpKyspIHtcblx0XHRcdGlmIChvYmoxW2tleXMxW2ldXSAhPT0gb2JqMltrZXlzMVtpXV0pIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxufVxuXG5leHBvcnQgZGVmYXVsdCBvYmplY3Q7XG4iLCIndXNlIHN0cmljdCc7XG5cbmNsYXNzIHN0cmluZyB7XG5cdC8qKlxuXHQgKiBDb21wYXJlcyB0aGUgZ2l2ZW4gc3RyaW5ncyB3aXRob3V0IHRha2luZyB0aGUgY2FzZSBpbnRvIGFjY291bnQuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcn0gc3RyMVxuXHQgKiBAcGFyYW0ge3N0cmluZ3xudW1iZXJ9IHN0cjJcblx0ICogQHJldHVybiB7bnVtYmVyfSBFaXRoZXIgLTEsIDAgb3IgMSwgYWNjb3JkaW5nIHRvIGlmIHRoZSBmaXJzdCBzdHJpbmcgaXNcblx0ICogICAgIFwic21hbGxlclwiLCBlcXVhbCBvciBcImJpZ2dlclwiIHRoYW4gdGhlIHNlY29uZCBnaXZlbiBzdHJpbmcuXG5cdCAqL1xuXHRzdGF0aWMgY2FzZUluc2Vuc2l0aXZlQ29tcGFyZShzdHIxLCBzdHIyKSB7XG5cdFx0Y29uc3QgdGVzdDEgPSBTdHJpbmcoc3RyMSkudG9Mb3dlckNhc2UoKTtcblx0XHRjb25zdCB0ZXN0MiA9IFN0cmluZyhzdHIyKS50b0xvd2VyQ2FzZSgpO1xuXG5cdFx0aWYgKHRlc3QxIDwgdGVzdDIpIHtcblx0XHRcdHJldHVybiAtMTtcblx0XHR9IGVsc2UgaWYgKHRlc3QxID09PSB0ZXN0Mikge1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiAxO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBSZW1vdmVzIHRoZSBicmVha2luZyBzcGFjZXMgZnJvbSB0aGUgbGVmdCBhbmQgcmlnaHQgb2YgdGhlIHN0cmluZyBhbmRcblx0ICogY29sbGFwc2VzIHRoZSBzZXF1ZW5jZXMgb2YgYnJlYWtpbmcgc3BhY2VzIGluIHRoZSBtaWRkbGUgaW50byBzaW5nbGUgc3BhY2VzLlxuXHQgKiBUaGUgb3JpZ2luYWwgYW5kIHRoZSByZXN1bHQgc3RyaW5ncyByZW5kZXIgdGhlIHNhbWUgd2F5IGluIEhUTUwuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgQSBzdHJpbmcgaW4gd2hpY2ggdG8gY29sbGFwc2Ugc3BhY2VzLlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IENvcHkgb2YgdGhlIHN0cmluZyB3aXRoIG5vcm1hbGl6ZWQgYnJlYWtpbmcgc3BhY2VzLlxuXHQgKi9cblx0c3RhdGljIGNvbGxhcHNlQnJlYWtpbmdTcGFjZXMoc3RyKSB7XG5cdFx0cmV0dXJuIHN0ci5yZXBsYWNlKC9bXFx0XFxyXFxuIF0rL2csICcgJykucmVwbGFjZSgvXltcXHRcXHJcXG4gXSt8W1xcdFxcclxcbiBdKyQvZywgJycpO1xuXHR9XG5cblx0LyoqXG5cdCogRXNjYXBlcyBjaGFyYWN0ZXJzIGluIHRoZSBzdHJpbmcgdGhhdCBhcmUgbm90IHNhZmUgdG8gdXNlIGluIGEgUmVnRXhwLlxuXHQqIEBwYXJhbSB7Kn0gc3RyIFRoZSBzdHJpbmcgdG8gZXNjYXBlLiBJZiBub3QgYSBzdHJpbmcsIGl0IHdpbGwgYmUgY2FzdGVkXG5cdCogICAgIHRvIG9uZS5cblx0KiBAcmV0dXJuIHtzdHJpbmd9IEEgUmVnRXhwIHNhZmUsIGVzY2FwZWQgY29weSBvZiB7QGNvZGUgc30uXG5cdCovXG5cdHN0YXRpYyBlc2NhcGVSZWdleChzdHIpIHtcblx0XHRyZXR1cm4gU3RyaW5nKHN0cilcblx0XHRcdC5yZXBsYWNlKC8oWy0oKVxcW1xcXXt9Kz8qLiRcXF58LDojPCFcXFxcXSkvZywgJ1xcXFwkMScpXG5cdFx0XHQucmVwbGFjZSgvXFx4MDgvZywgJ1xcXFx4MDgnKTtcblx0fVxuXG5cdC8qKlxuXHQqIFJldHVybnMgYSBzdHJpbmcgd2l0aCBhdCBsZWFzdCA2NC1iaXRzIG9mIHJhbmRvbW5lc3MuXG5cdCogQHJldHVybiB7c3RyaW5nfSBBIHJhbmRvbSBzdHJpbmcsIGUuZy4gc24xczd2YjRnY2ljLlxuXHQqL1xuXHRzdGF0aWMgZ2V0UmFuZG9tU3RyaW5nKCkge1xuXHRcdGNvbnN0IHggPSAyMTQ3NDgzNjQ4O1xuXHRcdHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiB4KS50b1N0cmluZygzNikgK1xuXHRcdFx0TWF0aC5hYnMoTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogeCkgXiBEYXRlLm5vdygpKS50b1N0cmluZygzNik7XG5cdH1cblxuXHQvKipcblx0ICogQ2FsY3VsYXRlcyB0aGUgaGFzaGNvZGUgZm9yIGEgc3RyaW5nLiBUaGUgaGFzaGNvZGUgdmFsdWUgaXMgY29tcHV0ZWQgYnlcblx0ICogdGhlIHN1bSBhbGdvcml0aG06IHNbMF0qMzFeKG4tMSkgKyBzWzFdKjMxXihuLTIpICsgLi4uICsgc1tuLTFdLiBBIG5pY2Vcblx0ICogcHJvcGVydHkgb2YgdXNpbmcgMzEgcHJpbWUgaXMgdGhhdCB0aGUgbXVsdGlwbGljYXRpb24gY2FuIGJlIHJlcGxhY2VkIGJ5XG5cdCAqIGEgc2hpZnQgYW5kIGEgc3VidHJhY3Rpb24gZm9yIGJldHRlciBwZXJmb3JtYW5jZTogMzEqaSA9PSAoaTw8NSktaS5cblx0ICogTW9kZXJuIFZNcyBkbyB0aGlzIHNvcnQgb2Ygb3B0aW1pemF0aW9uIGF1dG9tYXRpY2FsbHkuXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSB2YWwgVGFyZ2V0IHN0cmluZy5cblx0ICogQHJldHVybiB7TnVtYmVyfSBSZXR1cm5zIHRoZSBzdHJpbmcgaGFzaGNvZGUuXG5cdCAqL1xuXHRzdGF0aWMgaGFzaENvZGUodmFsKSB7XG5cdFx0bGV0IGhhc2ggPSAwO1xuXHRcdGZvciAobGV0IGkgPSAwLCBsZW4gPSB2YWwubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcblx0XHRcdGhhc2ggPSAzMSAqIGhhc2ggKyB2YWwuY2hhckNvZGVBdChpKTtcblx0XHRcdGhhc2ggJT0gMHgxMDAwMDAwMDA7XG5cdFx0fVxuXHRcdHJldHVybiBoYXNoO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJlcGxhY2VzIGludGVydmFsIGludG8gdGhlIHN0cmluZyB3aXRoIHNwZWNpZmllZCB2YWx1ZSwgZS5nLlxuXHQgKiBgcmVwbGFjZUludGVydmFsKFwiYWJjZGVcIiwgMSwgNCwgXCJcIilgIHJldHVybnMgXCJhZVwiLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gc3RyIFRoZSBpbnB1dCBzdHJpbmcuXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBzdGFydCBTdGFydCBpbnRlcnZhbCBwb3NpdGlvbiB0byBiZSByZXBsYWNlZC5cblx0ICogQHBhcmFtIHtOdW1iZXJ9IGVuZCBFbmQgaW50ZXJ2YWwgcG9zaXRpb24gdG8gYmUgcmVwbGFjZWQuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSBUaGUgdmFsdWUgdGhhdCByZXBsYWNlcyB0aGUgc3BlY2lmaWVkIGludGVydmFsLlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9XG5cdCAqL1xuXHRzdGF0aWMgcmVwbGFjZUludGVydmFsKHN0ciwgc3RhcnQsIGVuZCwgdmFsdWUpIHtcblx0XHRyZXR1cm4gc3RyLnN1YnN0cmluZygwLCBzdGFydCkgKyB2YWx1ZSArIHN0ci5zdWJzdHJpbmcoZW5kKTtcblx0fVxufVxuXG5leHBvcnQgZGVmYXVsdCBzdHJpbmc7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogUGFyc2VzIHRoZSBnaXZlbiB1cmkgc3RyaW5nIGludG8gYW4gb2JqZWN0LlxuICogQHBhcmFtIHsqPX0gb3B0X3VyaSBPcHRpb25hbCBzdHJpbmcgVVJJIHRvIHBhcnNlXG4gKi9cbmZ1bmN0aW9uIHBhcnNlRnJvbUFuY2hvcihvcHRfdXJpKSB7XG5cdHZhciBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuXHRsaW5rLmhyZWYgPSBvcHRfdXJpO1xuXHRyZXR1cm4ge1xuXHRcdGhhc2g6IGxpbmsuaGFzaCxcblx0XHRob3N0bmFtZTogbGluay5ob3N0bmFtZSxcblx0XHRwYXNzd29yZDogbGluay5wYXNzd29yZCxcblx0XHRwYXRobmFtZTogbGluay5wYXRobmFtZVswXSA9PT0gJy8nID8gbGluay5wYXRobmFtZSA6ICcvJyArIGxpbmsucGF0aG5hbWUsXG5cdFx0cG9ydDogbGluay5wb3J0LFxuXHRcdHByb3RvY29sOiBsaW5rLnByb3RvY29sLFxuXHRcdHNlYXJjaDogbGluay5zZWFyY2gsXG5cdFx0dXNlcm5hbWU6IGxpbmsudXNlcm5hbWVcblx0fTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgcGFyc2VGcm9tQW5jaG9yO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnbWV0YWwnO1xuaW1wb3J0IHBhcnNlRnJvbUFuY2hvciBmcm9tICcuL3BhcnNlRnJvbUFuY2hvcic7XG5cbi8qKlxuICogUGFyc2VzIHRoZSBnaXZlbiB1cmkgc3RyaW5nIGludG8gYW4gb2JqZWN0LiBUaGUgVVJMIGZ1bmN0aW9uIHdpbGwgYmUgdXNlZFxuICogd2hlbiBwcmVzZW50LCBvdGhlcndpc2Ugd2UnbGwgZmFsbCBiYWNrIHRvIHRoZSBhbmNob3Igbm9kZSBlbGVtZW50LlxuICogQHBhcmFtIHsqPX0gb3B0X3VyaSBPcHRpb25hbCBzdHJpbmcgVVJJIHRvIHBhcnNlXG4gKi9cbmZ1bmN0aW9uIHBhcnNlKG9wdF91cmkpIHtcblx0aWYgKGlzRnVuY3Rpb24oVVJMKSAmJiBVUkwubGVuZ3RoKSB7XG5cdFx0cmV0dXJuIG5ldyBVUkwob3B0X3VyaSk7XG5cdH0gZWxzZSB7XG5cdFx0cmV0dXJuIHBhcnNlRnJvbUFuY2hvcihvcHRfdXJpKTtcblx0fVxufVxuXG5leHBvcnQgZGVmYXVsdCBwYXJzZTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHsgRGlzcG9zYWJsZSB9IGZyb20gJ21ldGFsJztcblxuLyoqXG4gKiBBIGNhY2hlZCByZWZlcmVuY2UgdG8gdGhlIGNyZWF0ZSBmdW5jdGlvbi5cbiAqL1xudmFyIGNyZWF0ZSA9IE9iamVjdC5jcmVhdGU7XG5cbi8qKlxuICogQ2FzZSBpbnNlbnNpdGl2ZSBzdHJpbmcgTXVsdGltYXAgaW1wbGVtZW50YXRpb24uIEFsbG93cyBtdWx0aXBsZSB2YWx1ZXMgZm9yXG4gKiB0aGUgc2FtZSBrZXkgbmFtZS5cbiAqIEBleHRlbmRzIHtEaXNwb3NhYmxlfVxuICovXG5jbGFzcyBNdWx0aU1hcCBleHRlbmRzIERpc3Bvc2FibGUge1xuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHRzdXBlcigpO1xuXHRcdHRoaXMua2V5cyA9IGNyZWF0ZShudWxsKTtcblx0XHR0aGlzLnZhbHVlcyA9IGNyZWF0ZShudWxsKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBBZGRzIHZhbHVlIHRvIGEga2V5IG5hbWUuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG5cdCAqIEBwYXJhbSB7Kn0gdmFsdWVcblx0ICogQGNoYWluYWJsZVxuXHQgKi9cblx0YWRkKG5hbWUsIHZhbHVlKSB7XG5cdFx0dGhpcy5rZXlzW25hbWUudG9Mb3dlckNhc2UoKV0gPSBuYW1lO1xuXHRcdHRoaXMudmFsdWVzW25hbWUudG9Mb3dlckNhc2UoKV0gPSB0aGlzLnZhbHVlc1tuYW1lLnRvTG93ZXJDYXNlKCldIHx8IFtdO1xuXHRcdHRoaXMudmFsdWVzW25hbWUudG9Mb3dlckNhc2UoKV0ucHVzaCh2YWx1ZSk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHQvKipcblx0ICogQ2xlYXJzIG1hcCBuYW1lcyBhbmQgdmFsdWVzLlxuXHQgKiBAY2hhaW5hYmxlXG5cdCAqL1xuXHRjbGVhcigpIHtcblx0XHR0aGlzLmtleXMgPSBjcmVhdGUobnVsbCk7XG5cdFx0dGhpcy52YWx1ZXMgPSBjcmVhdGUobnVsbCk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHQvKipcblx0ICogQ2hlY2tzIGlmIG1hcCBjb250YWlucyBhIHZhbHVlIHRvIHRoZSBrZXkgbmFtZS5cblx0ICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcblx0ICogQHJldHVybiB7Ym9vbGVhbn1cblx0ICogQGNoYWluYWJsZVxuXHQgKi9cblx0Y29udGFpbnMobmFtZSkge1xuXHRcdHJldHVybiBuYW1lLnRvTG93ZXJDYXNlKCkgaW4gdGhpcy52YWx1ZXM7XG5cdH1cblxuXHQvKipcblx0ICogQGluaGVyaXREb2Ncblx0ICovXG5cdGRpc3Bvc2VJbnRlcm5hbCgpIHtcblx0XHR0aGlzLnZhbHVlcyA9IG51bGw7XG5cdH1cblxuXHQvKipcblx0ICogQ3JlYXRlcyBhIGBNdWx0aU1hcGAgaW5zdGFuY2UgZnJvbSB0aGUgZ2l2ZW4gb2JqZWN0LlxuXHQgKiBAcGFyYW0geyFPYmplY3R9IG9ialxuXHQgKiBAcmV0dXJuIHshTXVsdGlNYXB9XG5cdCAqL1xuXHRzdGF0aWMgZnJvbU9iamVjdChvYmopIHtcblx0XHR2YXIgbWFwID0gbmV3IE11bHRpTWFwKCk7XG5cdFx0dmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0bWFwLnNldChrZXlzW2ldLCBvYmpba2V5c1tpXV0pO1xuXHRcdH1cblx0XHRyZXR1cm4gbWFwO1xuXHR9XG5cblx0LyoqXG5cdCAqIEdldHMgdGhlIGZpcnN0IGFkZGVkIHZhbHVlIGZyb20gYSBrZXkgbmFtZS5cblx0ICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcblx0ICogQHJldHVybiB7Kn1cblx0ICogQGNoYWluYWJsZVxuXHQgKi9cblx0Z2V0KG5hbWUpIHtcblx0XHR2YXIgdmFsdWVzID0gdGhpcy52YWx1ZXNbbmFtZS50b0xvd2VyQ2FzZSgpXTtcblx0XHRpZiAodmFsdWVzKSB7XG5cdFx0XHRyZXR1cm4gdmFsdWVzWzBdO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBHZXRzIGFsbCB2YWx1ZXMgZnJvbSBhIGtleSBuYW1lLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuXHQgKiBAcmV0dXJuIHtBcnJheS48Kj59XG5cdCAqL1xuXHRnZXRBbGwobmFtZSkge1xuXHRcdHJldHVybiB0aGlzLnZhbHVlc1tuYW1lLnRvTG93ZXJDYXNlKCldO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgbWFwIGlzIGVtcHR5LCBmYWxzZSBvdGhlcndpc2UuXG5cdCAqIEByZXR1cm4ge2Jvb2xlYW59XG5cdCAqL1xuXHRpc0VtcHR5KCkge1xuXHRcdHJldHVybiB0aGlzLnNpemUoKSA9PT0gMDtcblx0fVxuXG5cdC8qKlxuXHQgKiBHZXRzIGFycmF5IG9mIGtleSBuYW1lcy5cblx0ICogQHJldHVybiB7QXJyYXkuPHN0cmluZz59XG5cdCAqL1xuXHRuYW1lcygpIHtcblx0XHRyZXR1cm4gT2JqZWN0LmtleXModGhpcy52YWx1ZXMpLm1hcCgoa2V5KSA9PiB0aGlzLmtleXNba2V5XSk7XG5cdH1cblxuXHQvKipcblx0ICogUmVtb3ZlcyBhbGwgdmFsdWVzIGZyb20gYSBrZXkgbmFtZS5cblx0ICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcblx0ICogQGNoYWluYWJsZVxuXHQgKi9cblx0cmVtb3ZlKG5hbWUpIHtcblx0XHRkZWxldGUgdGhpcy5rZXlzW25hbWUudG9Mb3dlckNhc2UoKV07XG5cdFx0ZGVsZXRlIHRoaXMudmFsdWVzW25hbWUudG9Mb3dlckNhc2UoKV07XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgdmFsdWUgb2YgYSBrZXkgbmFtZS4gUmVsZXZhbnQgdG8gcmVwbGFjZSB0aGUgY3VycmVudCB2YWx1ZXMgd2l0aFxuXHQgKiBhIG5ldyBvbmUuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG5cdCAqIEBwYXJhbSB7Kn0gdmFsdWVcblx0ICogQGNoYWluYWJsZVxuXHQgKi9cblx0c2V0KG5hbWUsIHZhbHVlKSB7XG5cdFx0dGhpcy5rZXlzW25hbWUudG9Mb3dlckNhc2UoKV0gPSBuYW1lO1xuXHRcdHRoaXMudmFsdWVzW25hbWUudG9Mb3dlckNhc2UoKV0gPSBbdmFsdWVdO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0LyoqXG5cdCAqIEdldHMgdGhlIHNpemUgb2YgdGhlIG1hcCBrZXkgbmFtZXMuXG5cdCAqIEByZXR1cm4ge251bWJlcn1cblx0ICovXG5cdHNpemUoKSB7XG5cdFx0cmV0dXJuIHRoaXMubmFtZXMoKS5sZW5ndGg7XG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgcGFyc2VkIHZhbHVlcyBhcyBhIHN0cmluZy5cblx0ICogQHJldHVybiB7c3RyaW5nfVxuXHQgKi9cblx0dG9TdHJpbmcoKSB7XG5cdFx0cmV0dXJuIEpTT04uc3RyaW5naWZ5KHRoaXMudmFsdWVzKTtcblx0fVxufVxuXG5leHBvcnQgZGVmYXVsdCBNdWx0aU1hcDtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHsgYXJyYXkgfSBmcm9tICdtZXRhbCc7XG5cbi8qKlxuICogR2VuZXJpYyB0cmVlIG5vZGUgZGF0YSBzdHJ1Y3R1cmUgd2l0aCBhcmJpdHJhcnkgbnVtYmVyIG9mIGNoaWxkIG5vZGVzLlxuICogQHBhcmFtIHtWfSB2YWx1ZSBWYWx1ZS5cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5jbGFzcyBUcmVlTm9kZSB7XG5cblx0Y29uc3RydWN0b3IodmFsdWUpIHtcblx0XHQvKipcblx0XHQgKiBUaGUgdmFsdWUuXG5cdFx0ICogQHByaXZhdGUge1Z9XG5cdFx0ICovXG5cdFx0dGhpcy52YWx1ZV8gPSB2YWx1ZTtcblxuXHRcdC8qKlxuXHRcdCAqIFJlZmVyZW5jZSB0byB0aGUgcGFyZW50IG5vZGUgb3IgbnVsbCBpZiBpdCBoYXMgbm8gcGFyZW50LlxuXHRcdCAqIEBwcml2YXRlIHtUcmVlTm9kZX1cblx0XHQgKi9cblx0XHR0aGlzLnBhcmVudF8gPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogQ2hpbGQgbm9kZXMgb3IgbnVsbCBpbiBjYXNlIG9mIGxlYWYgbm9kZS5cblx0XHQgKiBAcHJpdmF0ZSB7QXJyYXk8IVRyZWVOb2RlPn1cblx0XHQgKi9cblx0XHR0aGlzLmNoaWxkcmVuXyA9IG51bGw7XG5cdH1cblxuXHQvKipcblx0ICogQXBwZW5kcyBhIGNoaWxkIG5vZGUgdG8gdGhpcyBub2RlLlxuXHQgKiBAcGFyYW0geyFUcmVlTm9kZX0gY2hpbGQgT3JwaGFuIGNoaWxkIG5vZGUuXG5cdCAqL1xuXHRhZGRDaGlsZChjaGlsZCkge1xuXHRcdGFzc2VydENoaWxkSGFzTm9QYXJlbnQoY2hpbGQpO1xuXHRcdGNoaWxkLnNldFBhcmVudCh0aGlzKTtcblx0XHR0aGlzLmNoaWxkcmVuXyA9IHRoaXMuY2hpbGRyZW5fIHx8IFtdO1xuXHRcdHRoaXMuY2hpbGRyZW5fLnB1c2goY2hpbGQpO1xuXHR9XG5cblx0LyoqXG5cdCAqIFRlbGxzIHdoZXRoZXIgdGhpcyBub2RlIGlzIHRoZSBhbmNlc3RvciBvZiB0aGUgZ2l2ZW4gbm9kZS5cblx0ICogQHBhcmFtIHshVHJlZU5vZGV9IG5vZGUgQSBub2RlLlxuXHQgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoaXMgbm9kZSBpcyB0aGUgYW5jZXN0b3Igb2Yge0Bjb2RlIG5vZGV9LlxuXHQgKi9cblx0Y29udGFpbnMobm9kZSkge1xuXHRcdGxldCBjdXJyZW50ID0gbm9kZS5nZXRQYXJlbnQoKTtcblx0XHR3aGlsZSAoY3VycmVudCkge1xuXHRcdFx0aWYgKGN1cnJlbnQgPT09IHRoaXMpIHtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0XHRjdXJyZW50ID0gY3VycmVudC5nZXRQYXJlbnQoKTtcblx0XHR9XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0LyoqXG5cdCAqIEByZXR1cm4geyFBcnJheTxUcmVlTm9kZT59IEFsbCBhbmNlc3RvciBub2RlcyBpbiBib3R0b20tdXAgb3JkZXIuXG5cdCAqL1xuXHRnZXRBbmNlc3RvcnMoKSB7XG5cdFx0bGV0IGFuY2VzdG9ycyA9IFtdO1xuXHRcdGxldCBub2RlID0gdGhpcy5nZXRQYXJlbnQoKTtcblx0XHR3aGlsZSAobm9kZSkge1xuXHRcdFx0YW5jZXN0b3JzLnB1c2gobm9kZSk7XG5cdFx0XHRub2RlID0gbm9kZS5nZXRQYXJlbnQoKTtcblx0XHR9XG5cdFx0cmV0dXJuIGFuY2VzdG9ycztcblx0fVxuXG5cdC8qKlxuXHQgKiBHZXRzIHRoZSBjaGlsZCBub2RlIG9mIHRoaXMgbm9kZSBhdCB0aGUgZ2l2ZW4gaW5kZXguXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCBDaGlsZCBpbmRleC5cblx0ICogQHJldHVybiB7P1RyZWVOb2RlfSBUaGUgbm9kZSBhdCB0aGUgZ2l2ZW4gaW5kZXhcblx0ICogb3IgbnVsbCBpZiBub3QgZm91bmQuXG5cdCAqL1xuXHRnZXRDaGlsZEF0KGluZGV4KSB7XG5cdFx0cmV0dXJuIHRoaXMuZ2V0Q2hpbGRyZW4oKVtpbmRleF0gfHwgbnVsbDtcblx0fVxuXG5cdC8qKlxuXHQgKiBAcmV0dXJuIHs/QXJyYXk8IVRyZWVOb2RlPn0gQ2hpbGQgbm9kZXMgb3IgbnVsbCBpbiBjYXNlIG9mIGxlYWYgbm9kZS5cblx0ICovXG5cdGdldENoaWxkcmVuKCkge1xuXHRcdHJldHVybiB0aGlzLmNoaWxkcmVuXyB8fCBUcmVlTm9kZS5FTVBUWV9BUlJBWTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBudW1iZXIgb2YgY2hpbGRyZW4uXG5cdCAqL1xuXHRnZXRDaGlsZENvdW50KCkge1xuXHRcdHJldHVybiB0aGlzLmdldENoaWxkcmVuKCkubGVuZ3RoO1xuXHR9XG5cblx0LyoqXG5cdCAqIEByZXR1cm4ge251bWJlcn0gVGhlIG51bWJlciBvZiBhbmNlc3RvcnMgb2YgdGhlIG5vZGUuXG5cdCAqL1xuXHRnZXREZXB0aCgpIHtcblx0XHRsZXQgZGVwdGggPSAwO1xuXHRcdGxldCBub2RlID0gdGhpcztcblx0XHR3aGlsZSAobm9kZS5nZXRQYXJlbnQoKSkge1xuXHRcdFx0ZGVwdGgrKztcblx0XHRcdG5vZGUgPSBub2RlLmdldFBhcmVudCgpO1xuXHRcdH1cblx0XHRyZXR1cm4gZGVwdGg7XG5cdH1cblxuXHQvKipcblx0ICogQHJldHVybiB7P1RyZWVOb2RlfSBQYXJlbnQgbm9kZSBvciBudWxsIGlmIGl0IGhhcyBubyBwYXJlbnQuXG5cdCAqL1xuXHRnZXRQYXJlbnQoKSB7XG5cdFx0cmV0dXJuIHRoaXMucGFyZW50Xztcblx0fVxuXG5cdC8qKlxuXHQgKiBAcmV0dXJuIHshVHJlZU5vZGV9IFRoZSByb290IG9mIHRoZSB0cmVlIHN0cnVjdHVyZSwgaS5lLiB0aGUgZmFydGhlc3Rcblx0ICogYW5jZXN0b3Igb2YgdGhlIG5vZGUgb3IgdGhlIG5vZGUgaXRzZWxmIGlmIGl0IGhhcyBubyBwYXJlbnRzLlxuXHQgKi9cblx0Z2V0Um9vdCgpIHtcblx0XHRsZXQgcm9vdCA9IHRoaXM7XG5cdFx0d2hpbGUgKHJvb3QuZ2V0UGFyZW50KCkpIHtcblx0XHRcdHJvb3QgPSByb290LmdldFBhcmVudCgpO1xuXHRcdH1cblx0XHRyZXR1cm4gcm9vdDtcblx0fVxuXG5cdC8qKlxuXHQgKiBHZXRzIHRoZSB2YWx1ZS5cblx0ICogQHJldHVybiB7Vn0gVGhlIHZhbHVlLlxuXHQgKi9cblx0Z2V0VmFsdWUoKSB7XG5cdFx0cmV0dXJuIHRoaXMudmFsdWVfO1xuXHR9XG5cblx0LyoqXG5cdCAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIG5vZGUgaXMgYSBsZWFmIG5vZGUuXG5cdCAqL1xuXHRpc0xlYWYoKSB7XG5cdFx0cmV0dXJuICF0aGlzLmdldENoaWxkQ291bnQoKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZW1vdmVzIHRoZSBnaXZlbiBjaGlsZCBub2RlIG9mIHRoaXMgbm9kZS5cblx0ICogQHBhcmFtIHtUcmVlTm9kZX0gY2hpbGQgVGhlIG5vZGUgdG8gcmVtb3ZlLlxuXHQgKiBAcmV0dXJuIHtUcmVlTm9kZX0gVGhlIHJlbW92ZWQgbm9kZSBpZiBhbnksIG51bGwgb3RoZXJ3aXNlLlxuXHQgKi9cblx0cmVtb3ZlQ2hpbGQoY2hpbGQpIHtcblx0XHRpZiAoYXJyYXkucmVtb3ZlKHRoaXMuZ2V0Q2hpbGRyZW4oKSwgY2hpbGQpKSB7XG5cdFx0XHRyZXR1cm4gY2hpbGQ7XG5cdFx0fVxuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIHBhcmVudCBub2RlIG9mIHRoaXMgbm9kZS4gVGhlIGNhbGxlcnMgbXVzdCBlbnN1cmUgdGhhdCB0aGVcblx0ICogcGFyZW50IG5vZGUgYW5kIG9ubHkgdGhhdCBoYXMgdGhpcyBub2RlIGFtb25nIGl0cyBjaGlsZHJlbi5cblx0ICogQHBhcmFtIHtUcmVlTm9kZX0gcGFyZW50IFRoZSBwYXJlbnQgdG8gc2V0LiBJZiBudWxsLCB0aGUgbm9kZSB3aWxsIGJlXG5cdCAqIGRldGFjaGVkIGZyb20gdGhlIHRyZWUuXG5cdCAqIEBwcm90ZWN0ZWRcblx0ICovXG5cdHNldFBhcmVudChwYXJlbnQpIHtcblx0XHR0aGlzLnBhcmVudF8gPSBwYXJlbnQ7XG5cdH1cblxuXHQvKipcblx0ICogVHJhdmVyc2VzIHRoZSBzdWJ0cmVlLiBUaGUgZmlyc3QgY2FsbGJhY2sgc3RhcnRzIHdpdGggdGhpcyBub2RlLFxuXHQgKiBhbmQgdmlzaXRzIHRoZSBkZXNjZW5kYW50IG5vZGVzIGRlcHRoLWZpcnN0LCBpbiBwcmVvcmRlci5cblx0ICogVGhlIHNlY29uZCBjYWxsYmFjaywgc3RhcnRzIHdpdGggZGVlcGVzdCBjaGlsZCB0aGVuIHZpc2l0c1xuXHQgKiB0aGUgYW5jZXN0b3Igbm9kZXMgZGVwdGgtZmlyc3QsIGluIHBvc3RvcmRlci4gRS5nLlxuXHQgKlxuXHQgKiAgXHQgQVxuXHQgKiAgICAvIFxcXG5cdCAqICAgQiAgIENcblx0ICogIC8gICAvIFxcXG5cdCAqIEQgICBFICAgRlxuXHQgKlxuXHQgKiBwcmVvcmRlciAtPiBbJ0EnLCAnQicsICdEJywgJ0MnLCAnRScsICdGJ11cblx0ICogcG9zdG9yZGVyIC0+IFsnRCcsICdCJywgJ0UnLCAnRicsICdDJywgJ0EnXVxuXHQgKlxuXHQgKiBAcGFyYW0ge2Z1bmN0aW9uPX0gb3B0X3ByZW9yZGVyRm4gVGhlIGNhbGxiYWNrIHRvIGV4ZWN1dGUgd2hlbiB2aXNpdGluZyBhIG5vZGUuXG5cdCAqIEBwYXJhbSB7ZnVuY3Rpb249fSBvcHRfcG9zdG9yZGVyRm4gVGhlIGNhbGxiYWNrIHRvIGV4ZWN1dGUgYmVmb3JlIGxlYXZpbmcgYSBub2RlLlxuXHQgKi9cblx0dHJhdmVyc2Uob3B0X3ByZW9yZGVyRm4sIG9wdF9wb3N0b3JkZXJGbikge1xuXHRcdGlmIChvcHRfcHJlb3JkZXJGbikge1xuXHRcdFx0b3B0X3ByZW9yZGVyRm4odGhpcyk7XG5cdFx0fVxuXHRcdHRoaXMuZ2V0Q2hpbGRyZW4oKS5mb3JFYWNoKChjaGlsZCkgPT4gY2hpbGQudHJhdmVyc2Uob3B0X3ByZW9yZGVyRm4sIG9wdF9wb3N0b3JkZXJGbikpO1xuXHRcdGlmIChvcHRfcG9zdG9yZGVyRm4pIHtcblx0XHRcdG9wdF9wb3N0b3JkZXJGbih0aGlzKTtcblx0XHR9XG5cdH1cblxufVxuXG4vKipcbiAqIENvbnN0YW50IGZvciBlbXB0eSBhcnJheSB0byBhdm9pZCB1bm5lY2Vzc2FyeSBhbGxvY2F0aW9ucy5cbiAqIEBwcml2YXRlXG4gKi9cblRyZWVOb2RlLkVNUFRZX0FSUkFZID0gW107XG5cbi8qKlxuICogQXNzZXJ0cyB0aGF0IGNoaWxkIGhhcyBubyBwYXJlbnQuXG4gKiBAcGFyYW0ge1RyZWVOb2RlfSBjaGlsZCBBIGNoaWxkLlxuICogQHByaXZhdGVcbiAqL1xuY29uc3QgYXNzZXJ0Q2hpbGRIYXNOb1BhcmVudCA9IGZ1bmN0aW9uKGNoaWxkKSB7XG5cdGlmIChjaGlsZC5nZXRQYXJlbnQoKSkge1xuXHRcdHRocm93IG5ldyBFcnJvcignQ2Fubm90IGFkZCBjaGlsZCB3aXRoIHBhcmVudC4nKTtcblx0fVxufTtcblxuZXhwb3J0IGRlZmF1bHQgVHJlZU5vZGU7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB7IGlzRGVmLCBzdHJpbmcgfSBmcm9tICdtZXRhbCc7XG5pbXBvcnQgcGFyc2UgZnJvbSAnLi9wYXJzZSc7XG5pbXBvcnQgeyBNdWx0aU1hcCB9IGZyb20gJ21ldGFsLXN0cnVjdHMnO1xuXG52YXIgcGFyc2VGbl8gPSBwYXJzZTtcblxuY2xhc3MgVXJpIHtcblxuXHQvKipcblx0ICogVGhpcyBjbGFzcyBjb250YWlucyBzZXR0ZXJzIGFuZCBnZXR0ZXJzIGZvciB0aGUgcGFydHMgb2YgdGhlIFVSSS5cblx0ICogVGhlIGZvbGxvd2luZyBmaWd1cmUgZGlzcGxheXMgYW4gZXhhbXBsZSBVUklzIGFuZCB0aGVpciBjb21wb25lbnQgcGFydHMuXG5cdCAqXG5cdCAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdGhcblx0ICpcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAg4pSM4pSA4pSA4pSA4pS04pSA4pSA4pSA4pSA4pSQXG5cdCAqXHQgIGFiYzovL2V4YW1wbGUuY29tOjEyMy9wYXRoL2RhdGE/a2V5PXZhbHVlI2ZyYWdpZDFcblx0ICpcdCAg4pSU4pSs4pSYICAg4pSU4pSA4pSA4pSA4pSA4pSs4pSA4pSA4pSA4pSA4pSYIOKUlOKUrOKUmCAgICAgICAgICAg4pSU4pSA4pSA4pSA4pSs4pSA4pSA4pSA4pSYIOKUlOKUgOKUgOKUrOKUgOKUgOKUmFxuXHQgKiBwcm90b2NvbCAgaG9zdG5hbWUgIHBvcnQgICAgICAgICAgICBzZWFyY2ggICAgaGFzaFxuXHQgKiAgICAgICAgICDilJTilIDilIDilIDilIDilIDilIDilKzilIDilIDilIDilIDilIDilIDilIDilJhcblx0ICogICAgICAgICAgICAgICAgaG9zdFxuXHQgKlxuXHQgKiBAcGFyYW0geyo9fSBvcHRfdXJpIE9wdGlvbmFsIHN0cmluZyBVUkkgdG8gcGFyc2Vcblx0ICogQGNvbnN0cnVjdG9yXG5cdCAqL1xuXHRjb25zdHJ1Y3RvcihvcHRfdXJpID0gJycpIHtcblx0XHR0aGlzLnVybCA9IFVyaS5wYXJzZSh0aGlzLm1heWJlQWRkUHJvdG9jb2xBbmRIb3N0bmFtZV8ob3B0X3VyaSkpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEFkZHMgcGFyYW1ldGVycyB0byB1cmkgZnJvbSBhIDxjb2RlPk11bHRpTWFwPC9jb2RlPiBhcyBzb3VyY2UuXG5cdCAqIEBwYXJhbSB7TXVsdGlNYXB9IG11bHRpbWFwIFRoZSA8Y29kZT5NdWx0aU1hcDwvY29kZT4gY29udGFpbmluZyB0aGVcblx0ICogICBwYXJhbWV0ZXJzLlxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqIEBjaGFpbmFibGVcblx0ICovXG5cdGFkZFBhcmFtZXRlcnNGcm9tTXVsdGlNYXAobXVsdGltYXApIHtcblx0XHRtdWx0aW1hcC5uYW1lcygpLmZvckVhY2goKG5hbWUpID0+IHtcblx0XHRcdG11bHRpbWFwLmdldEFsbChuYW1lKS5mb3JFYWNoKCh2YWx1ZSkgPT4ge1xuXHRcdFx0XHR0aGlzLmFkZFBhcmFtZXRlclZhbHVlKG5hbWUsIHZhbHVlKTtcblx0XHRcdH0pO1xuXHRcdH0pO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0LyoqXG5cdCAqIEFkZHMgdGhlIHZhbHVlIG9mIHRoZSBuYW1lZCBxdWVyeSBwYXJhbWV0ZXJzLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBwYXJhbWV0ZXIgdG8gc2V0LlxuXHQgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSBuZXcgdmFsdWUuIFdpbGwgYmUgZXhwbGljaXRseSBjYXN0ZWQgdG8gU3RyaW5nLlxuXHQgKiBAY2hhaW5hYmxlXG5cdCAqL1xuXHRhZGRQYXJhbWV0ZXJWYWx1ZShuYW1lLCB2YWx1ZSkge1xuXHRcdHRoaXMuZW5zdXJlUXVlcnlJbml0aWFsaXplZF8oKTtcblx0XHRpZiAoaXNEZWYodmFsdWUpKSB7XG5cdFx0XHR2YWx1ZSA9IFN0cmluZyh2YWx1ZSk7XG5cdFx0fVxuXHRcdHRoaXMucXVlcnkuYWRkKG5hbWUsIHZhbHVlKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdC8qKlxuXHQgKiBBZGRzIHRoZSB2YWx1ZXMgb2YgdGhlIG5hbWVkIHF1ZXJ5IHBhcmFtZXRlci5cblx0ICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUgcGFyYW1ldGVyIHRvIHNldC5cblx0ICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgbmV3IHZhbHVlLlxuXHQgKiBAY2hhaW5hYmxlXG5cdCAqL1xuXHRhZGRQYXJhbWV0ZXJWYWx1ZXMobmFtZSwgdmFsdWVzKSB7XG5cdFx0dmFsdWVzLmZvckVhY2goKHZhbHVlKSA9PiB0aGlzLmFkZFBhcmFtZXRlclZhbHVlKG5hbWUsIHZhbHVlKSk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHQvKipcblx0ICogRW5zdXJlcyBxdWVyeSBpbnRlcm5hbCBtYXAgaXMgaW5pdGlhbGl6ZWQgYW5kIHN5bmNlZCB3aXRoIGluaXRpYWwgdmFsdWVcblx0ICogZXh0cmFjdGVkIGZyb20gVVJJIHNlYXJjaCBwYXJ0LlxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqL1xuXHRlbnN1cmVRdWVyeUluaXRpYWxpemVkXygpIHtcblx0XHRpZiAodGhpcy5xdWVyeSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHR0aGlzLnF1ZXJ5ID0gbmV3IE11bHRpTWFwKCk7XG5cdFx0dmFyIHNlYXJjaCA9IHRoaXMudXJsLnNlYXJjaDtcblx0XHRpZiAoc2VhcmNoKSB7XG5cdFx0XHRzZWFyY2guc3Vic3RyaW5nKDEpLnNwbGl0KCcmJykuZm9yRWFjaCgocGFyYW0pID0+IHtcblx0XHRcdFx0dmFyIFtrZXksIHZhbHVlXSA9IHBhcmFtLnNwbGl0KCc9Jyk7XG5cdFx0XHRcdGlmIChpc0RlZih2YWx1ZSkpIHtcblx0XHRcdFx0XHR2YWx1ZSA9IFVyaS51cmxEZWNvZGUodmFsdWUpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRoaXMuYWRkUGFyYW1ldGVyVmFsdWUoa2V5LCB2YWx1ZSk7XG5cdFx0XHR9KTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogR2V0cyB0aGUgaGFzaCBwYXJ0IG9mIHVyaS5cblx0ICogQHJldHVybiB7c3RyaW5nfVxuXHQgKi9cblx0Z2V0SGFzaCgpIHtcblx0XHRyZXR1cm4gdGhpcy51cmwuaGFzaCB8fCAnJztcblx0fVxuXG5cdC8qKlxuXHQgKiBHZXRzIHRoZSBob3N0IHBhcnQgb2YgdXJpLiBFLmcuIDxjb2RlPltob3N0bmFtZV06W3BvcnRdPC9jb2RlPi5cblx0ICogQHJldHVybiB7c3RyaW5nfVxuXHQgKi9cblx0Z2V0SG9zdCgpIHtcblx0XHR2YXIgaG9zdCA9IHRoaXMuZ2V0SG9zdG5hbWUoKTtcblx0XHRpZiAoaG9zdCkge1xuXHRcdFx0dmFyIHBvcnQgPSB0aGlzLmdldFBvcnQoKTtcblx0XHRcdGlmIChwb3J0ICYmIHBvcnQgIT09ICc4MCcpIHtcblx0XHRcdFx0aG9zdCArPSAnOicgKyBwb3J0O1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gaG9zdDtcblx0fVxuXG5cdC8qKlxuXHQgKiBHZXRzIHRoZSBob3N0bmFtZSBwYXJ0IG9mIHVyaSB3aXRob3V0IHByb3RvY29sIGFuZCBwb3J0LlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9XG5cdCAqL1xuXHRnZXRIb3N0bmFtZSgpIHtcblx0XHR2YXIgaG9zdG5hbWUgPSB0aGlzLnVybC5ob3N0bmFtZTtcblx0XHRpZiAoaG9zdG5hbWUgPT09IFVyaS5IT1NUTkFNRV9QTEFDRUhPTERFUikge1xuXHRcdFx0cmV0dXJuICcnO1xuXHRcdH1cblx0XHRyZXR1cm4gaG9zdG5hbWU7XG5cdH1cblxuXHQvKipcblx0ICogR2V0cyB0aGUgb3JpZ2luIHBhcnQgb2YgdXJpLiBFLmcuIDxjb2RlPmh0dHA6Ly9baG9zdG5hbWVdOltwb3J0XTwvY29kZT4uXG5cdCAqIEByZXR1cm4ge3N0cmluZ31cblx0ICovXG5cdGdldE9yaWdpbigpIHtcblx0XHR2YXIgaG9zdCA9IHRoaXMuZ2V0SG9zdCgpO1xuXHRcdGlmIChob3N0KSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5nZXRQcm90b2NvbCgpICsgJy8vJyArIGhvc3Q7XG5cdFx0fVxuXHRcdHJldHVybiAnJztcblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBmaXJzdCB2YWx1ZSBmb3IgYSBnaXZlbiBwYXJhbWV0ZXIgb3IgdW5kZWZpbmVkIGlmIHRoZSBnaXZlblxuXHQgKiBwYXJhbWV0ZXIgbmFtZSBkb2VzIG5vdCBhcHBlYXIgaW4gdGhlIHF1ZXJ5IHN0cmluZy5cblx0ICogQHBhcmFtIHtzdHJpbmd9IHBhcmFtTmFtZSBVbmVzY2FwZWQgcGFyYW1ldGVyIG5hbWUuXG5cdCAqIEByZXR1cm4ge3N0cmluZ3x1bmRlZmluZWR9IFRoZSBmaXJzdCB2YWx1ZSBmb3IgYSBnaXZlbiBwYXJhbWV0ZXIgb3Jcblx0ICogICB1bmRlZmluZWQgaWYgdGhlIGdpdmVuIHBhcmFtZXRlciBuYW1lIGRvZXMgbm90IGFwcGVhciBpbiB0aGUgcXVlcnlcblx0ICogICBzdHJpbmcuXG5cdCAqL1xuXHRnZXRQYXJhbWV0ZXJWYWx1ZShuYW1lKSB7XG5cdFx0dGhpcy5lbnN1cmVRdWVyeUluaXRpYWxpemVkXygpO1xuXHRcdHJldHVybiB0aGlzLnF1ZXJ5LmdldChuYW1lKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSB2YWx1ZTxiPnM8L2I+IGZvciBhIGdpdmVuIHBhcmFtZXRlciBhcyBhIGxpc3Qgb2YgZGVjb2RlZFxuXHQgKiBxdWVyeSBwYXJhbWV0ZXIgdmFsdWVzLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgcGFyYW1ldGVyIHRvIGdldCB2YWx1ZXMgZm9yLlxuXHQgKiBAcmV0dXJuIHshQXJyYXk8Pz59IFRoZSB2YWx1ZXMgZm9yIGEgZ2l2ZW4gcGFyYW1ldGVyIGFzIGEgbGlzdCBvZiBkZWNvZGVkXG5cdCAqICAgcXVlcnkgcGFyYW1ldGVyIHZhbHVlcy5cblx0ICovXG5cdGdldFBhcmFtZXRlclZhbHVlcyhuYW1lKSB7XG5cdFx0dGhpcy5lbnN1cmVRdWVyeUluaXRpYWxpemVkXygpO1xuXHRcdHJldHVybiB0aGlzLnF1ZXJ5LmdldEFsbChuYW1lKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBuYW1lPGI+czwvYj4gb2YgdGhlIHBhcmFtZXRlcnMuXG5cdCAqIEByZXR1cm4geyFBcnJheTxzdHJpbmc+fSBUaGUgbmFtZXMgZm9yIHRoZSBwYXJhbWV0ZXJzIGFzIGEgbGlzdCBvZlxuXHQgKiAgIHN0cmluZ3MuXG5cdCAqL1xuXHRnZXRQYXJhbWV0ZXJOYW1lcygpIHtcblx0XHR0aGlzLmVuc3VyZVF1ZXJ5SW5pdGlhbGl6ZWRfKCk7XG5cdFx0cmV0dXJuIHRoaXMucXVlcnkubmFtZXMoKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBHZXRzIHRoZSBmdW5jdGlvbiBjdXJyZW50bHkgYmVpbmcgdXNlZCB0byBwYXJzZSBVUklzLlxuXHQgKiBAcmV0dXJuIHshZnVuY3Rpb24oKX1cblx0ICovXG5cdHN0YXRpYyBnZXRQYXJzZUZuKCkge1xuXHRcdHJldHVybiBwYXJzZUZuXztcblx0fVxuXG5cdC8qKlxuXHQgKiBHZXRzIHRoZSBwYXRobmFtZSBwYXJ0IG9mIHVyaS5cblx0ICogQHJldHVybiB7c3RyaW5nfVxuXHQgKi9cblx0Z2V0UGF0aG5hbWUoKSB7XG5cdFx0cmV0dXJuIHRoaXMudXJsLnBhdGhuYW1lO1xuXHR9XG5cblx0LyoqXG5cdCAqIEdldHMgdGhlIHBvcnQgbnVtYmVyIHBhcnQgb2YgdXJpIGFzIHN0cmluZy5cblx0ICogQHJldHVybiB7c3RyaW5nfVxuXHQgKi9cblx0Z2V0UG9ydCgpIHtcblx0XHRyZXR1cm4gdGhpcy51cmwucG9ydDtcblx0fVxuXG5cdC8qKlxuXHQgKiBHZXRzIHRoZSBwcm90b2NvbCBwYXJ0IG9mIHVyaS4gRS5nLiA8Y29kZT5odHRwOjwvY29kZT4uXG5cdCAqIEByZXR1cm4ge3N0cmluZ31cblx0ICovXG5cdGdldFByb3RvY29sKCkge1xuXHRcdHJldHVybiB0aGlzLnVybC5wcm90b2NvbDtcblx0fVxuXG5cdC8qKlxuXHQgKiBHZXRzIHRoZSBzZWFyY2ggcGFydCBvZiB1cmkuIFNlYXJjaCB2YWx1ZSBpcyByZXRyaWV2ZWQgZnJvbSBxdWVyeVxuXHQgKiBwYXJhbWV0ZXJzLlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9XG5cdCAqL1xuXHRnZXRTZWFyY2goKSB7XG5cdFx0dmFyIHNlYXJjaCA9ICcnO1xuXHRcdHZhciBxdWVyeXN0cmluZyA9ICcnO1xuXHRcdHRoaXMuZ2V0UGFyYW1ldGVyTmFtZXMoKS5mb3JFYWNoKChuYW1lKSA9PiB7XG5cdFx0XHR0aGlzLmdldFBhcmFtZXRlclZhbHVlcyhuYW1lKS5mb3JFYWNoKCh2YWx1ZSkgPT4ge1xuXHRcdFx0XHRxdWVyeXN0cmluZyArPSBuYW1lO1xuXHRcdFx0XHRpZiAoaXNEZWYodmFsdWUpKSB7XG5cdFx0XHRcdFx0cXVlcnlzdHJpbmcgKz0gJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRxdWVyeXN0cmluZyArPSAnJic7XG5cdFx0XHR9KTtcblx0XHR9KTtcblx0XHRxdWVyeXN0cmluZyA9IHF1ZXJ5c3RyaW5nLnNsaWNlKDAsIC0xKTtcblx0XHRpZiAocXVlcnlzdHJpbmcpIHtcblx0XHRcdHNlYXJjaCArPSAnPycgKyBxdWVyeXN0cmluZztcblx0XHR9XG5cdFx0cmV0dXJuIHNlYXJjaDtcblx0fVxuXG5cdC8qKlxuXHQgKiBDaGVja3MgaWYgdXJpIGNvbnRhaW5zIHRoZSBwYXJhbWV0ZXIuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG5cdCAqIEByZXR1cm4ge2Jvb2xlYW59XG5cdCAqL1xuXHRoYXNQYXJhbWV0ZXIobmFtZSkge1xuXHRcdHRoaXMuZW5zdXJlUXVlcnlJbml0aWFsaXplZF8oKTtcblx0XHRyZXR1cm4gdGhpcy5xdWVyeS5jb250YWlucyhuYW1lKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBNYWtlcyB0aGlzIFVSTCB1bmlxdWUgYnkgYWRkaW5nIGEgcmFuZG9tIHBhcmFtIHRvIGl0LiBVc2VmdWwgZm9yIGF2b2lkaW5nXG5cdCAqIGNhY2hlLlxuXHQgKi9cblx0bWFrZVVuaXF1ZSgpIHtcblx0XHR0aGlzLnNldFBhcmFtZXRlclZhbHVlKFVyaS5SQU5ET01fUEFSQU0sIHN0cmluZy5nZXRSYW5kb21TdHJpbmcoKSk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHQvKipcblx0ICogTWF5YmUgYWRkcyBwcm90b2NvbCBhbmQgYSBob3N0bmFtZSBwbGFjZWhvbGRlciBvbiBhIHBhcmlhbCBVUkkgaWYgbmVlZGVkLlxuXHQgKiBSZWxldmVudCBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIDxjb2RlPlVSTDwvY29kZT4gbmF0aXZlIG9iamVjdC5cblx0ICogQHBhcmFtIHtzdHJpbmc9fSBvcHRfdXJpXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gVVJJIHdpdGggcHJvdG9jb2wgYW5kIGhvc3RuYW1lIHBsYWNlaG9sZGVyLlxuXHQgKi9cblx0bWF5YmVBZGRQcm90b2NvbEFuZEhvc3RuYW1lXyhvcHRfdXJpKSB7XG5cdFx0dmFyIHVybCA9IG9wdF91cmk7XG5cdFx0aWYgKG9wdF91cmkuaW5kZXhPZignOi8vJykgPT09IC0xICYmXG5cdFx0XHRvcHRfdXJpLmluZGV4T2YoJ2phdmFzY3JpcHQ6JykgIT09IDApIHsgLy8ganNoaW50IGlnbm9yZTpsaW5lXG5cblx0XHRcdHVybCA9IFVyaS5ERUZBVUxUX1BST1RPQ09MO1xuXHRcdFx0aWYgKG9wdF91cmlbMF0gIT09ICcvJyB8fCBvcHRfdXJpWzFdICE9PSAnLycpIHtcblx0XHRcdFx0dXJsICs9ICcvLyc7XG5cdFx0XHR9XG5cblx0XHRcdHN3aXRjaCAob3B0X3VyaS5jaGFyQXQoMCkpIHtcblx0XHRcdFx0Y2FzZSAnLic6XG5cdFx0XHRcdGNhc2UgJz8nOlxuXHRcdFx0XHRjYXNlICcjJzpcblx0XHRcdFx0XHR1cmwgKz0gVXJpLkhPU1ROQU1FX1BMQUNFSE9MREVSO1xuXHRcdFx0XHRcdHVybCArPSAnLyc7XG5cdFx0XHRcdFx0dXJsICs9IG9wdF91cmk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgJyc6XG5cdFx0XHRcdGNhc2UgJy8nOlxuXHRcdFx0XHRcdGlmIChvcHRfdXJpWzFdICE9PSAnLycpIHtcblx0XHRcdFx0XHRcdHVybCArPSBVcmkuSE9TVE5BTUVfUExBQ0VIT0xERVI7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHVybCArPSBvcHRfdXJpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdHVybCArPSBvcHRfdXJpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gdXJsO1xuXHR9XG5cblx0LyoqXG5cdCAqIE5vcm1hbGl6ZXMgdGhlIHBhcnNlZCBvYmplY3QgdG8gYmUgaW4gdGhlIGV4cGVjdGVkIHN0YW5kYXJkLlxuXHQgKiBAcGFyYW0geyFPYmplY3R9XG5cdCAqL1xuXHRzdGF0aWMgbm9ybWFsaXplT2JqZWN0KHBhcnNlZCkge1xuXHRcdHZhciBsZW5ndGggPSBwYXJzZWQucGF0aG5hbWUgPyBwYXJzZWQucGF0aG5hbWUubGVuZ3RoIDogMDtcblx0XHRpZiAobGVuZ3RoID4gMSAmJiBwYXJzZWQucGF0aG5hbWVbbGVuZ3RoIC0gMV0gPT09ICcvJykge1xuXHRcdFx0cGFyc2VkLnBhdGhuYW1lID0gcGFyc2VkLnBhdGhuYW1lLnN1YnN0cigwLCBsZW5ndGggLSAxKTtcblx0XHR9XG5cdFx0cmV0dXJuIHBhcnNlZDtcblx0fVxuXG5cdC8qKlxuXHQgKiBQYXJzZXMgdGhlIGdpdmVuIHVyaSBzdHJpbmcgaW50byBhbiBvYmplY3QuXG5cdCAqIEBwYXJhbSB7Kj19IG9wdF91cmkgT3B0aW9uYWwgc3RyaW5nIFVSSSB0byBwYXJzZVxuXHQgKi9cblx0c3RhdGljIHBhcnNlKG9wdF91cmkpIHtcblx0XHRyZXR1cm4gVXJpLm5vcm1hbGl6ZU9iamVjdChwYXJzZUZuXyhvcHRfdXJpKSk7XG5cdH1cblxuXHQvKipcblx0ICogUmVtb3ZlcyB0aGUgbmFtZWQgcXVlcnkgcGFyYW1ldGVyLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgcGFyYW1ldGVyIHRvIHJlbW92ZS5cblx0ICogQGNoYWluYWJsZVxuXHQgKi9cblx0cmVtb3ZlUGFyYW1ldGVyKG5hbWUpIHtcblx0XHR0aGlzLmVuc3VyZVF1ZXJ5SW5pdGlhbGl6ZWRfKCk7XG5cdFx0dGhpcy5xdWVyeS5yZW1vdmUobmFtZSk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHQvKipcblx0ICogUmVtb3ZlcyB1bmlxdWVuZXNzIHBhcmFtZXRlciBvZiB0aGUgdXJpLlxuXHQgKiBAY2hhaW5hYmxlXG5cdCAqL1xuXHRyZW1vdmVVbmlxdWUoKSB7XG5cdFx0dGhpcy5yZW1vdmVQYXJhbWV0ZXIoVXJpLlJBTkRPTV9QQVJBTSk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgaGFzaC5cblx0ICogQHBhcmFtIHtzdHJpbmd9IGhhc2hcblx0ICogQGNoYWluYWJsZVxuXHQgKi9cblx0c2V0SGFzaChoYXNoKSB7XG5cdFx0dGhpcy51cmwuaGFzaCA9IGhhc2g7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgaG9zdG5hbWUuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBob3N0bmFtZVxuXHQgKiBAY2hhaW5hYmxlXG5cdCAqL1xuXHRzZXRIb3N0bmFtZShob3N0bmFtZSkge1xuXHRcdHRoaXMudXJsLmhvc3RuYW1lID0gaG9zdG5hbWU7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgdmFsdWUgb2YgdGhlIG5hbWVkIHF1ZXJ5IHBhcmFtZXRlcnMsIGNsZWFyaW5nIHByZXZpb3VzIHZhbHVlc1xuXHQgKiBmb3IgdGhhdCBrZXkuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIHBhcmFtZXRlciB0byBzZXQuXG5cdCAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIG5ldyB2YWx1ZS5cblx0ICogQGNoYWluYWJsZVxuXHQgKi9cblx0c2V0UGFyYW1ldGVyVmFsdWUobmFtZSwgdmFsdWUpIHtcblx0XHR0aGlzLnJlbW92ZVBhcmFtZXRlcihuYW1lKTtcblx0XHR0aGlzLmFkZFBhcmFtZXRlclZhbHVlKG5hbWUsIHZhbHVlKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSB2YWx1ZXMgb2YgdGhlIG5hbWVkIHF1ZXJ5IHBhcmFtZXRlcnMsIGNsZWFyaW5nIHByZXZpb3VzIHZhbHVlc1xuXHQgKiBmb3IgdGhhdCBrZXkuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIHBhcmFtZXRlciB0byBzZXQuXG5cdCAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIG5ldyB2YWx1ZS5cblx0ICogQGNoYWluYWJsZVxuXHQgKi9cblx0c2V0UGFyYW1ldGVyVmFsdWVzKG5hbWUsIHZhbHVlcykge1xuXHRcdHRoaXMucmVtb3ZlUGFyYW1ldGVyKG5hbWUpO1xuXHRcdHZhbHVlcy5mb3JFYWNoKCh2YWx1ZSkgPT4gdGhpcy5hZGRQYXJhbWV0ZXJWYWx1ZShuYW1lLCB2YWx1ZSkpO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIHBhdGhuYW1lLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gcGF0aG5hbWVcblx0ICogQGNoYWluYWJsZVxuXHQgKi9cblx0c2V0UGF0aG5hbWUocGF0aG5hbWUpIHtcblx0XHR0aGlzLnVybC5wYXRobmFtZSA9IHBhdGhuYW1lO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIHBvcnQgbnVtYmVyLlxuXHQgKiBAcGFyYW0geyp9IHBvcnQgUG9ydCBudW1iZXIuXG5cdCAqIEBjaGFpbmFibGVcblx0ICovXG5cdHNldFBvcnQocG9ydCkge1xuXHRcdHRoaXMudXJsLnBvcnQgPSBwb3J0O1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSB1c2VkIGZvciBwYXJzaW5nIHRoZSBvcmlnaW5hbCBzdHJpbmcgdXJpXG5cdCAqIGludG8gYW4gb2JqZWN0LlxuXHQgKiBAcGFyYW0geyFmdW5jdGlvbigpfSBwYXJzZUZuXG5cdCAqL1xuXHRzdGF0aWMgc2V0UGFyc2VGbihwYXJzZUZuKSB7XG5cdFx0cGFyc2VGbl8gPSBwYXJzZUZuO1xuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIHByb3RvY29sLiBJZiBtaXNzaW5nIDxjb2RlPmh0dHA6PC9jb2RlPiBpcyB1c2VkIGFzIGRlZmF1bHQuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBwcm90b2NvbFxuXHQgKiBAY2hhaW5hYmxlXG5cdCAqL1xuXHRzZXRQcm90b2NvbChwcm90b2NvbCkge1xuXHRcdHRoaXMudXJsLnByb3RvY29sID0gcHJvdG9jb2w7XG5cdFx0aWYgKHRoaXMudXJsLnByb3RvY29sW3RoaXMudXJsLnByb3RvY29sLmxlbmd0aCAtIDFdICE9PSAnOicpIHtcblx0XHRcdHRoaXMudXJsLnByb3RvY29sICs9ICc6Jztcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHQvKipcblx0ICogQHJldHVybiB7c3RyaW5nfSBUaGUgc3RyaW5nIGZvcm0gb2YgdGhlIHVybC5cblx0ICogQG92ZXJyaWRlXG5cdCAqL1xuXHR0b1N0cmluZygpIHtcblx0XHR2YXIgaHJlZiA9ICcnO1xuXHRcdHZhciBob3N0ID0gdGhpcy5nZXRIb3N0KCk7XG5cdFx0aWYgKGhvc3QpIHtcblx0XHRcdGhyZWYgKz0gdGhpcy5nZXRQcm90b2NvbCgpICsgJy8vJztcblx0XHR9XG5cdFx0aHJlZiArPSBob3N0ICsgdGhpcy5nZXRQYXRobmFtZSgpICsgdGhpcy5nZXRTZWFyY2goKSArIHRoaXMuZ2V0SGFzaCgpO1xuXHRcdHJldHVybiBocmVmO1xuXHR9XG5cblx0LyoqXG5cdCAqIEpvaW5zIHRoZSBnaXZlbiBwYXRocy5cblx0ICogQHBhcmFtIHtzdHJpbmd9IGJhc2VQYXRoXG5cdCAqIEBwYXJhbSB7Li4uc3RyaW5nfSAuLi5wYXRocyBBbnkgbnVtYmVyIG9mIHBhdGhzIHRvIGJlIGpvaW5lZCB3aXRoIHRoZSBiYXNlIHVybC5cblx0ICogQHN0YXRpY1xuXHQgKi9cblx0c3RhdGljIGpvaW5QYXRocyhiYXNlUGF0aCwgLi4ucGF0aHMpIHtcblx0XHRpZiAoYmFzZVBhdGguY2hhckF0KGJhc2VQYXRoLmxlbmd0aCAtIDEpID09PSAnLycpIHtcblx0XHRcdGJhc2VQYXRoID0gYmFzZVBhdGguc3Vic3RyaW5nKDAsIGJhc2VQYXRoLmxlbmd0aCAtIDEpO1xuXHRcdH1cblx0XHRwYXRocyA9IHBhdGhzLm1hcChwYXRoID0+IHBhdGguY2hhckF0KDApID09PSAnLycgPyBwYXRoLnN1YnN0cmluZygxKSA6IHBhdGgpO1xuXHRcdHJldHVybiBbYmFzZVBhdGhdLmNvbmNhdChwYXRocykuam9pbignLycpLnJlcGxhY2UoL1xcLyQvLCAnJyk7XG5cdH1cblxuXHQvKipcblx0ICogVVJMLWRlY29kZXMgdGhlIHN0cmluZy4gV2UgbmVlZCB0byBzcGVjaWFsbHkgaGFuZGxlICcrJ3MgYmVjYXVzZVxuXHQgKiB0aGUgamF2YXNjcmlwdCBsaWJyYXJ5IGRvZXNuJ3QgY29udmVydCB0aGVtIHRvIHNwYWNlcy5cblx0ICogQHBhcmFtIHtzdHJpbmd9IHN0ciBUaGUgc3RyaW5nIHRvIHVybCBkZWNvZGUuXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGRlY29kZWQge0Bjb2RlIHN0cn0uXG5cdCAqL1xuXHRzdGF0aWMgdXJsRGVjb2RlKHN0cikge1xuXHRcdHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoc3RyLnJlcGxhY2UoL1xcKy9nLCAnICcpKTtcblx0fVxuXG59XG5cbi8qKlxuICogRGVmYXVsdCBwcm90b2NvbCB2YWx1ZS5cbiAqIEB0eXBlIHtzdHJpbmd9XG4gKiBAZGVmYXVsdCBodHRwOlxuICogQHN0YXRpY1xuICovXG5VcmkuREVGQVVMVF9QUk9UT0NPTCA9ICdodHRwOic7XG5cbi8qKlxuICogSG9zdG5hbWUgcGxhY2Vob2xkZXIuIFJlbGV2YW50IHRvIGludGVybmFsIHVzYWdlIG9ubHkuXG4gKiBAdHlwZSB7c3RyaW5nfVxuICogQHN0YXRpY1xuICovXG5VcmkuSE9TVE5BTUVfUExBQ0VIT0xERVIgPSAnaG9zdG5hbWUnICsgRGF0ZS5ub3coKTtcblxuLyoqXG4gKiBOYW1lIHVzZWQgYnkgdGhlIHBhcmFtIGdlbmVyYXRlZCBieSBgbWFrZVVuaXF1ZWAuXG4gKiBAdHlwZSB7c3RyaW5nfVxuICogQHN0YXRpY1xuICovXG5VcmkuUkFORE9NX1BBUkFNID0gJ3p4JztcblxuZXhwb3J0IGRlZmF1bHQgVXJpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgZ2xvYmFscyBmcm9tICcuLi9nbG9iYWxzL2dsb2JhbHMnO1xuaW1wb3J0IFVyaSBmcm9tICdtZXRhbC11cmknO1xuXG4vKipcbiAqIEEgY29sbGVjdGlvbiBvZiBzdGF0aWMgdXRpbGl0eSBmdW5jdGlvbnMuXG4gKiBAY29uc3RcbiAqL1xuY2xhc3MgdXRpbHMge1xuXG5cdC8qKlxuXHQgKiBDb3BpZXMgYXR0cmlidXRlcyBmb3JtIHNvdXJjZSBub2RlIHRvIHRhcmdldCBub2RlLlxuXHQgKiBAcmV0dXJuIHt2b2lkfVxuXHQgKiBAc3RhdGljXG5cdCAqL1xuXHRzdGF0aWMgY29weU5vZGVBdHRyaWJ1dGVzKHNvdXJjZSwgdGFyZ2V0KSB7XG5cdFx0QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoc291cmNlLmF0dHJpYnV0ZXMpLmZvckVhY2goKGF0dHJpYnV0ZSkgPT4gdGFyZ2V0LnNldEF0dHJpYnV0ZShhdHRyaWJ1dGUubmFtZSwgYXR0cmlidXRlLnZhbHVlKSk7XG5cdH1cblxuXHQvKipcblx0ICogR2V0cyB0aGUgY3VycmVudCBicm93c2VyIHBhdGggaW5jbHVkaW5nIGhhc2hiYW5nLlxuXHQgKiBAcmV0dXJuIHshc3RyaW5nfVxuXHQgKiBAc3RhdGljXG5cdCAqL1xuXHRzdGF0aWMgZ2V0Q3VycmVudEJyb3dzZXJQYXRoKCkge1xuXHRcdHJldHVybiB0aGlzLmdldEN1cnJlbnRCcm93c2VyUGF0aFdpdGhvdXRIYXNoKCkgKyBnbG9iYWxzLndpbmRvdy5sb2NhdGlvbi5oYXNoO1xuXHR9XG5cblx0LyoqXG5cdCAqIEdldHMgdGhlIGN1cnJlbnQgYnJvd3NlciBwYXRoIGV4Y2x1ZGluZyBoYXNoYmFuZy5cblx0ICogQHJldHVybiB7IXN0cmluZ31cblx0ICogQHN0YXRpY1xuXHQgKi9cblx0c3RhdGljIGdldEN1cnJlbnRCcm93c2VyUGF0aFdpdGhvdXRIYXNoKCkge1xuXHRcdHJldHVybiBnbG9iYWxzLndpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSArIGdsb2JhbHMud2luZG93LmxvY2F0aW9uLnNlYXJjaDtcblx0fVxuXG5cdC8qKlxuXHQgKiBHZXRzIHRoZSBnaXZlbiBub2RlIG9mZnNldCBjb29yZGluYXRlcy5cblx0ICogQHJldHVybiB7IW9iamVjdH1cblx0ICogQHN0YXRpY1xuXHQgKi9cblx0c3RhdGljIGdldE5vZGVPZmZzZXQobm9kZSkge1xuXHRcdGxldCBbb2Zmc2V0TGVmdCwgb2Zmc2V0VG9wXSA9IFswLCAwXTtcblx0XHRkbyB7XG5cdFx0XHRvZmZzZXRMZWZ0ICs9IG5vZGUub2Zmc2V0TGVmdDtcblx0XHRcdG9mZnNldFRvcCArPSBub2RlLm9mZnNldFRvcDtcblx0XHRcdG5vZGUgPSBub2RlLm9mZnNldFBhcmVudDtcblx0XHR9IHdoaWxlIChub2RlKTtcblx0XHRyZXR1cm4ge1xuXHRcdFx0b2Zmc2V0TGVmdCxcblx0XHRcdG9mZnNldFRvcFxuXHRcdH07XG5cdH1cblxuXHQvKipcblx0ICogRXh0cmFjdHMgdGhlIHBhdGggcGFydCBvZiBhbiB1cmwuXG5cdCAqIEByZXR1cm4geyFzdHJpbmd9XG5cdCAqIEBzdGF0aWNcblx0ICovXG5cdHN0YXRpYyBnZXRVcmxQYXRoKHVybCkge1xuXHRcdHZhciB1cmkgPSBuZXcgVXJpKHVybCk7XG5cdFx0cmV0dXJuIHVyaS5nZXRQYXRobmFtZSgpICsgdXJpLmdldFNlYXJjaCgpICsgdXJpLmdldEhhc2goKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBFeHRyYWN0cyB0aGUgcGF0aCBwYXJ0IG9mIGFuIHVybCB3aXRob3V0IGhhc2hiYW5nLlxuXHQgKiBAcmV0dXJuIHshc3RyaW5nfVxuXHQgKiBAc3RhdGljXG5cdCAqL1xuXHRzdGF0aWMgZ2V0VXJsUGF0aFdpdGhvdXRIYXNoKHVybCkge1xuXHRcdHZhciB1cmkgPSBuZXcgVXJpKHVybCk7XG5cdFx0cmV0dXJuIHVyaS5nZXRQYXRobmFtZSgpICsgdXJpLmdldFNlYXJjaCgpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEV4dHJhY3RzIHRoZSBwYXRoIHBhcnQgb2YgYW4gdXJsIHdpdGhvdXQgaGFzaGJhbmcgYW5kIHF1ZXJ5IHNlYXJjaC5cblx0ICogQHJldHVybiB7IXN0cmluZ31cblx0ICogQHN0YXRpY1xuXHQgKi9cblx0c3RhdGljIGdldFVybFBhdGhXaXRob3V0SGFzaEFuZFNlYXJjaCh1cmwpIHtcblx0XHR2YXIgdXJpID0gbmV3IFVyaSh1cmwpO1xuXHRcdHJldHVybiB1cmkuZ2V0UGF0aG5hbWUoKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDaGVja3MgaWYgdXJsIGlzIGluIHRoZSBzYW1lIGJyb3dzZXIgY3VycmVudCB1cmwgZXhjbHVkaW5nIHRoZSBoYXNoYmFuZy5cblx0ICogQHBhcmFtICB7IXN0cmluZ30gdXJsXG5cdCAqIEByZXR1cm4ge2Jvb2xlYW59XG5cdCAqIEBzdGF0aWNcblx0ICovXG5cdHN0YXRpYyBpc0N1cnJlbnRCcm93c2VyUGF0aCh1cmwpIHtcblx0XHRpZiAodXJsKSB7XG5cdFx0XHRjb25zdCBjdXJyZW50QnJvd3NlclBhdGggPSB0aGlzLmdldEN1cnJlbnRCcm93c2VyUGF0aFdpdGhvdXRIYXNoKCk7XG5cdFx0XHQvLyB0aGUgZ2V0VXJsUGF0aCB3aWxsIGNyZWF0ZSBhIFVyaSBhbmQgd2lsbCBub3JtYWxpemUgdGhlIHBhdGggYW5kXG5cdFx0XHQvLyByZW1vdmUgdGhlIHRyYWlsbGluZyAnLycgZm9yIHByb3Blcmx5IGNvbXBhcmluZyBwYXRocy5cblx0XHRcdHJldHVybiB1dGlscy5nZXRVcmxQYXRoV2l0aG91dEhhc2godXJsKSA9PT0gdGhpcy5nZXRVcmxQYXRoKGN1cnJlbnRCcm93c2VyUGF0aCk7XG5cdFx0fVxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRydWUgaWYgSFRNTDUgSGlzdG9yeSBhcGkgaXMgc3VwcG9ydGVkLlxuXHQgKiBAcmV0dXJuIHtib29sZWFufVxuXHQgKiBAc3RhdGljXG5cdCAqL1xuXHRzdGF0aWMgaXNIdG1sNUhpc3RvcnlTdXBwb3J0ZWQoKSB7XG5cdFx0cmV0dXJuICEhKGdsb2JhbHMud2luZG93Lmhpc3RvcnkgJiYgZ2xvYmFscy53aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUpO1xuXHR9XG5cblx0LyoqXG5cdCAqIENoZWNrcyBpZiBhIGdpdmVuIHVybCBpcyBhIHZhbGlkIGh0dHAocykgdXJpIGFuZCByZXR1cm5zIHRoZSBmb3JtZWQgVXJpXG5cdCAqIG9yIGZhbHNlIGlmIHRoZSBwYXJzaW5nIGZhaWxlZFxuXHQgKiBAcmV0dXJuIHtVcml8Ym9vbGVhbn1cblx0ICogQHN0YXRpY1xuXHQgKi9cblx0c3RhdGljIGlzV2ViVXJpKHVybCkge1xuXHRcdHRyeSB7XG5cdFx0XHRyZXR1cm4gbmV3IFVyaSh1cmwpO1xuXHRcdH0gY2F0Y2ggKGVycikge1xuXHRcdFx0Y29uc29sZS5lcnJvcihgJHtlcnIubWVzc2FnZX0gJHt1cmx9YCk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIFJlbW92ZXMgYWxsIGF0dHJpYnV0ZXMgZm9ybSBub2RlLlxuXHQgKiBAcmV0dXJuIHt2b2lkfVxuXHQgKiBAc3RhdGljXG5cdCAqL1xuXHRzdGF0aWMgY2xlYXJOb2RlQXR0cmlidXRlcyhub2RlKSB7XG5cdFx0QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwobm9kZS5hdHRyaWJ1dGVzKS5mb3JFYWNoKChhdHRyaWJ1dGUpID0+IG5vZGUucmVtb3ZlQXR0cmlidXRlKGF0dHJpYnV0ZS5uYW1lKSk7XG5cdH1cblxuXHQvKipcblx0KiBSZW1vdmVzIHRyYWlsaW5nIHNsYXNoIGluIHBhdGguXG5cdCogQHBhcmFtIHshc3RyaW5nfVxuXHQqIEByZXR1cm4ge3N0cmluZ31cblx0Ki9cblx0c3RhdGljIHJlbW92ZVBhdGhUcmFpbGluZ1NsYXNoKHBhdGgpIHtcblx0XHR2YXIgbGVuZ3RoID0gcGF0aCA/IHBhdGgubGVuZ3RoIDogMDtcblx0XHRpZiAobGVuZ3RoID4gMSAmJiBwYXRoW2xlbmd0aCAtIDFdID09PSAnLycpIHtcblx0XHRcdHBhdGggPSBwYXRoLnN1YnN0cigwLCBsZW5ndGggLSAxKTtcblx0XHR9XG5cdFx0cmV0dXJuIHBhdGg7XG5cdH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgdXRpbHM7XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcblx0YmFzZVBhdGg6ICdkYXRhLXNlbm5hLWJhc2UtcGF0aCcsXG5cdGxpbmtTZWxlY3RvcjogJ2RhdGEtc2VubmEtbGluay1zZWxlY3RvcicsXG5cdGxvYWRpbmdDc3NDbGFzczogJ2RhdGEtc2VubmEtbG9hZGluZy1jc3MtY2xhc3MnLFxuXHRzZW5uYTogJ2RhdGEtc2VubmEnLFxuXHRkaXNwYXRjaDogJ2RhdGEtc2VubmEtZGlzcGF0Y2gnLFxuXHRzdXJmYWNlOiAnZGF0YS1zZW5uYS1zdXJmYWNlJyxcblx0dXBkYXRlU2Nyb2xsUG9zaXRpb246ICdkYXRhLXNlbm5hLXVwZGF0ZS1zY3JvbGwtcG9zaXRpb24nXG59OyIsIid1c2Ugc3RyaWN0JztcblxuY29uc3QgTUVUQUxfREFUQSA9ICdfX21ldGFsX2RhdGFfXyc7XG5cbmNsYXNzIGRvbURhdGEge1xuXHQvKipcblx0ICogR2V0cyBNZXRhbC5qcydzIGRhdGEgZm9yIHRoZSBnaXZlbiBlbGVtZW50LlxuXHQgKiBAcGFyYW0geyFFbGVtZW50fSBlbGVtZW50XG5cdCAqIEBwYXJhbSB7c3RyaW5nPX0gb3B0X25hbWUgT3B0aW9uYWwgcHJvcGVydHkgZnJvbSB0aGUgZGF0YSB0byBiZSByZXR1cm5lZC5cblx0ICogQHBhcmFtIHsqfSBvcHRfaW5pdGlhbFZhbCBPcHRpbmFsIHZhbHVlIHRvIHRoZSBzZXQgdGhlIHJlcXVlc3RlZCBwcm9wZXJ0eVxuXHQgKiAgICAgdG8gaWYgaXQgZG9lc24ndCBleGlzdCB5ZXQgaW4gdGhlIGRhdGEuXG5cdCAqIEByZXR1cm4geyFPYmplY3R9XG5cdCAqL1xuXHRzdGF0aWMgZ2V0KGVsZW1lbnQsIG9wdF9uYW1lLCBvcHRfaW5pdGlhbFZhbCkge1xuXHRcdGlmICghZWxlbWVudFtNRVRBTF9EQVRBXSkge1xuXHRcdFx0ZWxlbWVudFtNRVRBTF9EQVRBXSA9IHt9O1xuXHRcdH1cblx0XHRpZiAoIW9wdF9uYW1lKSB7XG5cdFx0XHRyZXR1cm4gZWxlbWVudFtNRVRBTF9EQVRBXTtcblx0XHR9XG5cdFx0aWYgKCFlbGVtZW50W01FVEFMX0RBVEFdW29wdF9uYW1lXSAmJiBvcHRfaW5pdGlhbFZhbCkge1xuXHRcdFx0ZWxlbWVudFtNRVRBTF9EQVRBXVtvcHRfbmFtZV0gPSBvcHRfaW5pdGlhbFZhbDtcblx0XHR9XG5cdFx0cmV0dXJuIGVsZW1lbnRbTUVUQUxfREFUQV1bb3B0X25hbWVdO1xuXHR9XG5cblx0LyoqXG5cdCAqIENoZWNrcyBpZiB0aGUgZ2l2ZW4gZWxlbWVudCBoYXMgZGF0YSBzdG9yZWQgaW4gaXQuXG5cdCAqIEBwYXJhbSB7IUVsZW1lbnR9IGVsZW1lbnRcblx0ICogQHJldHVybiB7Ym9vbGVhbn1cblx0ICovXG5cdHN0YXRpYyBoYXMoZWxlbWVudCkge1xuXHRcdHJldHVybiAhIWVsZW1lbnRbTUVUQUxfREFUQV07XG5cdH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZG9tRGF0YTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHsgRGlzcG9zYWJsZSB9IGZyb20gJ21ldGFsJztcblxuLyoqXG4gKiBFdmVudEhhbmRsZSB1dGlsaXR5LiBIb2xkcyBpbmZvcm1hdGlvbiBhYm91dCBhbiBldmVudCBzdWJzY3JpcHRpb24sIGFuZFxuICogYWxsb3dzIHJlbW92aW5nIHRoZW0gZWFzaWx5LlxuICogRXZlbnRIYW5kbGUgaXMgYSBEaXNwb3NhYmxlLCBidXQgaXQncyBpbXBvcnRhbnQgdG8gbm90ZSB0aGF0IHRoZVxuICogRXZlbnRFbWl0dGVyIHRoYXQgY3JlYXRlZCBpdCBpcyBub3QgdGhlIG9uZSByZXNwb25zaWJsZSBmb3IgZGlzcG9zaW5nIGl0LlxuICogVGhhdCByZXNwb25zaWJpbGl0eSBpcyBmb3IgdGhlIGNvZGUgdGhhdCBob2xkcyBhIHJlZmVyZW5jZSB0byBpdC5cbiAqIEBwYXJhbSB7IUV2ZW50RW1pdHRlcn0gZW1pdHRlciBFbWl0dGVyIHRoZSBldmVudCB3YXMgc3Vic2NyaWJlZCB0by5cbiAqIEBwYXJhbSB7c3RyaW5nfSBldmVudCBUaGUgbmFtZSBvZiB0aGUgZXZlbnQgdGhhdCB3YXMgc3Vic2NyaWJlZCB0by5cbiAqIEBwYXJhbSB7IUZ1bmN0aW9ufSBsaXN0ZW5lciBUaGUgbGlzdGVuZXIgc3Vic2NyaWJlZCB0byB0aGUgZXZlbnQuXG4gKiBAY29uc3RydWN0b3JcbiAqIEBleHRlbmRzIHtEaXNwb3NhYmxlfVxuICovXG5jbGFzcyBFdmVudEhhbmRsZSBleHRlbmRzIERpc3Bvc2FibGUge1xuXHRjb25zdHJ1Y3RvcihlbWl0dGVyLCBldmVudCwgbGlzdGVuZXIpIHtcblx0XHRzdXBlcigpO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIEV2ZW50RW1pdHRlciBpbnN0YW5jZSB0aGF0IHRoZSBldmVudCB3YXMgc3Vic2NyaWJlZCB0by5cblx0XHQgKiBAdHlwZSB7RXZlbnRFbWl0dGVyfVxuXHRcdCAqIEBwcm90ZWN0ZWRcblx0XHQgKi9cblx0XHR0aGlzLmVtaXR0ZXJfID0gZW1pdHRlcjtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBuYW1lIG9mIHRoZSBldmVudCB0aGF0IHdhcyBzdWJzY3JpYmVkIHRvLlxuXHRcdCAqIEB0eXBlIHtzdHJpbmd9XG5cdFx0ICogQHByb3RlY3RlZFxuXHRcdCAqL1xuXHRcdHRoaXMuZXZlbnRfID0gZXZlbnQ7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgbGlzdGVuZXIgc3Vic2NyaWJlZCB0byB0aGUgZXZlbnQuXG5cdFx0ICogQHR5cGUge0Z1bmN0aW9ufVxuXHRcdCAqIEBwcm90ZWN0ZWRcblx0XHQgKi9cblx0XHR0aGlzLmxpc3RlbmVyXyA9IGxpc3RlbmVyO1xuXHR9XG5cblx0LyoqXG5cdCAqIERpc3Bvc2VzIG9mIHRoaXMgaW5zdGFuY2UncyBvYmplY3QgcmVmZXJlbmNlcy5cblx0ICogQG92ZXJyaWRlXG5cdCAqL1xuXHRkaXNwb3NlSW50ZXJuYWwoKSB7XG5cdFx0dGhpcy5yZW1vdmVMaXN0ZW5lcigpO1xuXHRcdHRoaXMuZW1pdHRlcl8gPSBudWxsO1xuXHRcdHRoaXMubGlzdGVuZXJfID0gbnVsbDtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZW1vdmVzIHRoZSBsaXN0ZW5lciBzdWJzY3JpcHRpb24gZnJvbSB0aGUgZW1pdHRlci5cblx0ICovXG5cdHJlbW92ZUxpc3RlbmVyKCkge1xuXHRcdGlmICghdGhpcy5lbWl0dGVyXy5pc0Rpc3Bvc2VkKCkpIHtcblx0XHRcdHRoaXMuZW1pdHRlcl8ucmVtb3ZlTGlzdGVuZXIodGhpcy5ldmVudF8sIHRoaXMubGlzdGVuZXJfKTtcblx0XHR9XG5cdH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRXZlbnRIYW5kbGU7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB7IGFycmF5LCBEaXNwb3NhYmxlLCBpc0Z1bmN0aW9uLCBpc1N0cmluZyB9IGZyb20gJ21ldGFsJztcbmltcG9ydCBFdmVudEhhbmRsZSBmcm9tICcuL0V2ZW50SGFuZGxlJztcblxuY29uc3Qgc2luZ2xlQXJyYXlfID0gWzBdO1xuXG4vKipcbiAqIEV2ZW50RW1pdHRlciB1dGlsaXR5LlxuICogQGNvbnN0cnVjdG9yXG4gKiBAZXh0ZW5kcyB7RGlzcG9zYWJsZX1cbiAqL1xuY2xhc3MgRXZlbnRFbWl0dGVyIGV4dGVuZHMgRGlzcG9zYWJsZSB7XG5cdGNvbnN0cnVjdG9yKCkge1xuXHRcdHN1cGVyKCk7XG5cblx0XHQvKipcblx0XHQgKiBIb2xkcyBldmVudCBsaXN0ZW5lcnMgc2NvcGVkIGJ5IGV2ZW50IHR5cGUuXG5cdFx0ICogQHR5cGUge09iamVjdDxzdHJpbmcsICFBcnJheTwhZnVuY3Rpb24oKT4+fVxuXHRcdCAqIEBwcm90ZWN0ZWRcblx0XHQgKi9cblx0XHR0aGlzLmV2ZW50c18gPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogSGFuZGxlcnMgdGhhdCBhcmUgdHJpZ2dlcmVkIHdoZW4gYW4gZXZlbnQgaXMgbGlzdGVuZWQgdG8uXG5cdFx0ICogQHR5cGUge0FycmF5fVxuXHRcdCAqL1xuXHRcdHRoaXMubGlzdGVuZXJIYW5kbGVyc18gPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogQ29uZmlndXJhdGlvbiBvcHRpb24gd2hpY2ggZGV0ZXJtaW5lcyBpZiBhbiBldmVudCBmYWNhZGUgc2hvdWxkIGJlIHNlbnRcblx0XHQgKiBhcyBhIHBhcmFtIG9mIGxpc3RlbmVycyB3aGVuIGVtaXR0aW5nIGV2ZW50cy4gSWYgc2V0IHRvIHRydWUsIHRoZSBmYWNhZGVcblx0XHQgKiB3aWxsIGJlIHBhc3NlZCBhcyB0aGUgZmlyc3QgYXJndW1lbnQgb2YgdGhlIGxpc3RlbmVyLlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEBwcm90ZWN0ZWRcblx0XHQgKi9cblx0XHR0aGlzLnNob3VsZFVzZUZhY2FkZV8gPSBmYWxzZTtcblx0fVxuXG5cdC8qKlxuXHQgKiBBZGRzIGEgaGFuZGxlciB0byBnaXZlbiBob2xkZXIgdmFyaWFibGUuIElmIHRoZSBob2xkZXIgZG9lc24ndCBoYXZlIGFcblx0ICogdmFsdWUgeWV0LCBpdCB3aWxsIHJlY2VpdmUgdGhlIGhhbmRsZXIgZGlyZWN0bHkuIElmIHRoZSBob2xkZXIgaXMgYW4gYXJyYXksXG5cdCAqIHRoZSB2YWx1ZSB3aWxsIGp1c3QgYmUgYWRkZWQgdG8gaXQuIE90aGVyd2lzZSwgdGhlIGhvbGRlciB3aWxsIGJlIHNldCB0byBhXG5cdCAqIG5ldyBhcnJheSBjb250YWluaW5nIGl0cyBwcmV2aW91cyB2YWx1ZSBwbHVzIHRoZSBuZXcgaGFuZGxlci5cblx0ICogQHBhcmFtIHsqfSBob2xkZXJcblx0ICogQHBhcmFtIHshZnVuY3Rpb24oKXxPYmplY3R9IGhhbmRsZXJcblx0ICogQHJldHVybiB7Kn0gVGhlIGhvbGRlcidzIG5ldyB2YWx1ZS5cblx0ICogQHByb3RlY3RlZFxuXHQgKi9cblx0YWRkSGFuZGxlcl8oaG9sZGVyLCBoYW5kbGVyKSB7XG5cdFx0aWYgKCFob2xkZXIpIHtcblx0XHRcdGhvbGRlciA9IGhhbmRsZXI7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmICghQXJyYXkuaXNBcnJheShob2xkZXIpKSB7XG5cdFx0XHRcdGhvbGRlciA9IFtob2xkZXJdO1xuXHRcdFx0fVxuXHRcdFx0aG9sZGVyLnB1c2goaGFuZGxlcik7XG5cdFx0fVxuXHRcdHJldHVybiBob2xkZXI7XG5cdH1cblxuXHQvKipcblx0ICogQWRkcyBhIGxpc3RlbmVyIHRvIHRoZSBlbmQgb2YgdGhlIGxpc3RlbmVycyBhcnJheSBmb3IgdGhlIHNwZWNpZmllZCBldmVudHMuXG5cdCAqIEBwYXJhbSB7IShBcnJheXxzdHJpbmcpfSBldmVudFxuXHQgKiBAcGFyYW0geyFGdW5jdGlvbn0gbGlzdGVuZXJcblx0ICogQHBhcmFtIHtib29sZWFufSBvcHRfZGVmYXVsdCBGbGFnIGluZGljYXRpbmcgaWYgdGhpcyBsaXN0ZW5lciBpcyBhIGRlZmF1bHRcblx0ICogICBhY3Rpb24gZm9yIHRoaXMgZXZlbnQuIERlZmF1bHQgYWN0aW9ucyBhcmUgcnVuIGxhc3QsIGFuZCBvbmx5IGlmIG5vIHByZXZpb3VzXG5cdCAqICAgbGlzdGVuZXIgY2FsbCBgcHJldmVudERlZmF1bHQoKWAgb24gdGhlIHJlY2VpdmVkIGV2ZW50IGZhY2FkZS5cblx0ICogQHJldHVybiB7IUV2ZW50SGFuZGxlfSBDYW4gYmUgdXNlZCB0byByZW1vdmUgdGhlIGxpc3RlbmVyLlxuXHQgKi9cblx0YWRkTGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVyLCBvcHRfZGVmYXVsdCkge1xuXHRcdHRoaXMudmFsaWRhdGVMaXN0ZW5lcl8obGlzdGVuZXIpO1xuXG5cdFx0Y29uc3QgZXZlbnRzID0gdGhpcy50b0V2ZW50c0FycmF5XyhldmVudCk7XG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBldmVudHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHRoaXMuYWRkU2luZ2xlTGlzdGVuZXJfKGV2ZW50c1tpXSwgbGlzdGVuZXIsIG9wdF9kZWZhdWx0KTtcblx0XHR9XG5cblx0XHRyZXR1cm4gbmV3IEV2ZW50SGFuZGxlKHRoaXMsIGV2ZW50LCBsaXN0ZW5lcik7XG5cdH1cblxuXHQvKipcblx0ICogQWRkcyBhIGxpc3RlbmVyIHRvIHRoZSBlbmQgb2YgdGhlIGxpc3RlbmVycyBhcnJheSBmb3IgYSBzaW5nbGUgZXZlbnQuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBldmVudFxuXHQgKiBAcGFyYW0geyFGdW5jdGlvbn0gbGlzdGVuZXJcblx0ICogQHBhcmFtIHtib29sZWFufSBvcHRfZGVmYXVsdCBGbGFnIGluZGljYXRpbmcgaWYgdGhpcyBsaXN0ZW5lciBpcyBhIGRlZmF1bHRcblx0ICogICBhY3Rpb24gZm9yIHRoaXMgZXZlbnQuIERlZmF1bHQgYWN0aW9ucyBhcmUgcnVuIGxhc3QsIGFuZCBvbmx5IGlmIG5vIHByZXZpb3VzXG5cdCAqICAgbGlzdGVuZXIgY2FsbCBgcHJldmVudERlZmF1bHQoKWAgb24gdGhlIHJlY2VpdmVkIGV2ZW50IGZhY2FkZS5cblx0ICogQHJldHVybiB7IUV2ZW50SGFuZGxlfSBDYW4gYmUgdXNlZCB0byByZW1vdmUgdGhlIGxpc3RlbmVyLlxuXHQgKiBAcGFyYW0ge0Z1bmN0aW9uPX0gb3B0X29yaWdpbiBUaGUgb3JpZ2luYWwgZnVuY3Rpb24gdGhhdCB3YXMgYWRkZWQgYXMgYVxuXHQgKiAgIGxpc3RlbmVyLCBpZiB0aGVyZSBpcyBhbnkuXG5cdCAqIEBwcm90ZWN0ZWRcblx0ICovXG5cdGFkZFNpbmdsZUxpc3RlbmVyXyhldmVudCwgbGlzdGVuZXIsIG9wdF9kZWZhdWx0LCBvcHRfb3JpZ2luKSB7XG5cdFx0dGhpcy5ydW5MaXN0ZW5lckhhbmRsZXJzXyhldmVudCk7XG5cdFx0aWYgKG9wdF9kZWZhdWx0IHx8IG9wdF9vcmlnaW4pIHtcblx0XHRcdGxpc3RlbmVyID0ge1xuXHRcdFx0XHRkZWZhdWx0OiBvcHRfZGVmYXVsdCxcblx0XHRcdFx0Zm46IGxpc3RlbmVyLFxuXHRcdFx0XHRvcmlnaW46IG9wdF9vcmlnaW5cblx0XHRcdH07XG5cdFx0fVxuXHRcdHRoaXMuZXZlbnRzXyA9IHRoaXMuZXZlbnRzXyB8fCB7fTtcblx0XHR0aGlzLmV2ZW50c19bZXZlbnRdID0gdGhpcy5hZGRIYW5kbGVyXyh0aGlzLmV2ZW50c19bZXZlbnRdLCBsaXN0ZW5lcik7XG5cdH1cblxuXHQvKipcblx0ICogQnVpbGRzIGZhY2FkZSBmb3IgdGhlIGdpdmVuIGV2ZW50LlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnRcblx0ICogQHJldHVybiB7T2JqZWN0fVxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqL1xuXHRidWlsZEZhY2FkZV8oZXZlbnQpIHtcblx0XHRpZiAodGhpcy5nZXRTaG91bGRVc2VGYWNhZGUoKSkge1xuXHRcdFx0Y29uc3QgZmFjYWRlID0ge1xuXHRcdFx0XHRwcmV2ZW50RGVmYXVsdDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0ZmFjYWRlLnByZXZlbnRlZERlZmF1bHQgPSB0cnVlO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHR0YXJnZXQ6IHRoaXMsXG5cdFx0XHRcdHR5cGU6IGV2ZW50XG5cdFx0XHR9O1xuXHRcdFx0cmV0dXJuIGZhY2FkZTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogRGlzcG9zZXMgb2YgdGhpcyBpbnN0YW5jZSdzIG9iamVjdCByZWZlcmVuY2VzLlxuXHQgKiBAb3ZlcnJpZGVcblx0ICovXG5cdGRpc3Bvc2VJbnRlcm5hbCgpIHtcblx0XHR0aGlzLmV2ZW50c18gPSBudWxsO1xuXHR9XG5cblx0LyoqXG5cdCAqIEV4ZWN1dGUgZWFjaCBvZiB0aGUgbGlzdGVuZXJzIGluIG9yZGVyIHdpdGggdGhlIHN1cHBsaWVkIGFyZ3VtZW50cy5cblx0ICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50XG5cdCAqIEBwYXJhbSB7Kn0gb3B0X2FyZ3MgW2FyZzFdLCBbYXJnMl0sIFsuLi5dXG5cdCAqIEByZXR1cm4ge2Jvb2xlYW59IFJldHVybnMgdHJ1ZSBpZiBldmVudCBoYWQgbGlzdGVuZXJzLCBmYWxzZSBvdGhlcndpc2UuXG5cdCAqL1xuXHRlbWl0KGV2ZW50KSB7XG5cdFx0Y29uc3QgbGlzdGVuZXJzID0gdGhpcy5nZXRSYXdMaXN0ZW5lcnNfKGV2ZW50KTtcblx0XHRpZiAobGlzdGVuZXJzLmxlbmd0aCA9PT0gMCkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdGNvbnN0IGFyZ3MgPSBhcnJheS5zbGljZShhcmd1bWVudHMsIDEpO1xuXHRcdHRoaXMucnVuTGlzdGVuZXJzXyhsaXN0ZW5lcnMsIGFyZ3MsIHRoaXMuYnVpbGRGYWNhZGVfKGV2ZW50KSk7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHQvKipcblx0ICogR2V0cyB0aGUgbGlzdGVuZXIgb2JqZWN0cyBmb3IgdGhlIGdpdmVuIGV2ZW50LCBpZiB0aGVyZSBhcmUgYW55LlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnRcblx0ICogQHJldHVybiB7IUFycmF5fVxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqL1xuXHRnZXRSYXdMaXN0ZW5lcnNfKGV2ZW50KSB7XG5cdFx0Y29uc3QgZGlyZWN0TGlzdGVuZXJzID0gdG9BcnJheSh0aGlzLmV2ZW50c18gJiYgdGhpcy5ldmVudHNfW2V2ZW50XSk7XG5cdFx0cmV0dXJuIGRpcmVjdExpc3RlbmVycy5jb25jYXQodG9BcnJheSh0aGlzLmV2ZW50c18gJiYgdGhpcy5ldmVudHNfWycqJ10pKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBHZXRzIHRoZSBjb25maWd1cmF0aW9uIG9wdGlvbiB3aGljaCBkZXRlcm1pbmVzIGlmIGFuIGV2ZW50IGZhY2FkZSBzaG91bGRcblx0ICogYmUgc2VudCBhcyBhIHBhcmFtIG9mIGxpc3RlbmVycyB3aGVuIGVtaXR0aW5nIGV2ZW50cy4gSWYgc2V0IHRvIHRydWUsIHRoZVxuXHQgKiBmYWNhZGUgd2lsbCBiZSBwYXNzZWQgYXMgdGhlIGZpcnN0IGFyZ3VtZW50IG9mIHRoZSBsaXN0ZW5lci5cblx0ICogQHJldHVybiB7Ym9vbGVhbn1cblx0ICovXG5cdGdldFNob3VsZFVzZUZhY2FkZSgpIHtcblx0XHRyZXR1cm4gdGhpcy5zaG91bGRVc2VGYWNhZGVfO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYW4gYXJyYXkgb2YgbGlzdGVuZXJzIGZvciB0aGUgc3BlY2lmaWVkIGV2ZW50LlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnRcblx0ICogQHJldHVybiB7QXJyYXl9IEFycmF5IG9mIGxpc3RlbmVycy5cblx0ICovXG5cdGxpc3RlbmVycyhldmVudCkge1xuXHRcdHJldHVybiB0aGlzLmdldFJhd0xpc3RlbmVyc18oZXZlbnQpLm1hcChcblx0XHRcdGxpc3RlbmVyID0+IGxpc3RlbmVyLmZuID8gbGlzdGVuZXIuZm4gOiBsaXN0ZW5lclxuXHRcdCk7XG5cdH1cblxuXHQvKipcblx0ICogQWRkcyBhIGxpc3RlbmVyIHRoYXQgd2lsbCBiZSBpbnZva2VkIGEgZml4ZWQgbnVtYmVyIG9mIHRpbWVzIGZvciB0aGVcblx0ICogZXZlbnRzLiBBZnRlciBlYWNoIGV2ZW50IGlzIHRyaWdnZXJlZCB0aGUgc3BlY2lmaWVkIGFtb3VudCBvZiB0aW1lcywgdGhlXG5cdCAqIGxpc3RlbmVyIGlzIHJlbW92ZWQgZm9yIGl0LlxuXHQgKiBAcGFyYW0geyEoQXJyYXl8c3RyaW5nKX0gZXZlbnRcblx0ICogQHBhcmFtIHtudW1iZXJ9IGFtb3VudCBUaGUgYW1vdW50IG9mIHRpbWVzIHRoaXMgZXZlbnQgc2hvdWxkIGJlIGxpc3RlbmVkXG5cdCAqIHRvLlxuXHQgKiBAcGFyYW0geyFGdW5jdGlvbn0gbGlzdGVuZXJcblx0ICogQHJldHVybiB7IUV2ZW50SGFuZGxlfSBDYW4gYmUgdXNlZCB0byByZW1vdmUgdGhlIGxpc3RlbmVyLlxuXHQgKi9cblx0bWFueShldmVudCwgYW1vdW50LCBsaXN0ZW5lcikge1xuXHRcdGNvbnN0IGV2ZW50cyA9IHRoaXMudG9FdmVudHNBcnJheV8oZXZlbnQpO1xuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgZXZlbnRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR0aGlzLm1hbnlfKGV2ZW50c1tpXSwgYW1vdW50LCBsaXN0ZW5lcik7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG5ldyBFdmVudEhhbmRsZSh0aGlzLCBldmVudCwgbGlzdGVuZXIpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEFkZHMgYSBsaXN0ZW5lciB0aGF0IHdpbGwgYmUgaW52b2tlZCBhIGZpeGVkIG51bWJlciBvZiB0aW1lcyBmb3IgYSBzaW5nbGVcblx0ICogZXZlbnQuIEFmdGVyIHRoZSBldmVudCBpcyB0cmlnZ2VyZWQgdGhlIHNwZWNpZmllZCBhbW91bnQgb2YgdGltZXMsIHRoZVxuXHQgKiBsaXN0ZW5lciBpcyByZW1vdmVkLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnRcblx0ICogQHBhcmFtIHtudW1iZXJ9IGFtb3VudCBUaGUgYW1vdW50IG9mIHRpbWVzIHRoaXMgZXZlbnQgc2hvdWxkIGJlIGxpc3RlbmVkXG5cdCAqIHRvLlxuXHQgKiBAcGFyYW0geyFGdW5jdGlvbn0gbGlzdGVuZXJcblx0ICogQHByb3RlY3RlZFxuXHQgKi9cblx0bWFueV8oZXZlbnQsIGFtb3VudCwgbGlzdGVuZXIpIHtcblx0XHRjb25zdCBzZWxmID0gdGhpcztcblxuXHRcdGlmIChhbW91bnQgPD0gMCkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGhhbmRsZXJJbnRlcm5hbCgpIHtcblx0XHRcdGlmICgtLWFtb3VudCA9PT0gMCkge1xuXHRcdFx0XHRzZWxmLnJlbW92ZUxpc3RlbmVyKGV2ZW50LCBoYW5kbGVySW50ZXJuYWwpO1xuXHRcdFx0fVxuXHRcdFx0bGlzdGVuZXIuYXBwbHkoc2VsZiwgYXJndW1lbnRzKTtcblx0XHR9XG5cblx0XHRzZWxmLmFkZFNpbmdsZUxpc3RlbmVyXyhldmVudCwgaGFuZGxlckludGVybmFsLCBmYWxzZSwgbGlzdGVuZXIpO1xuXHR9XG5cblx0LyoqXG5cdCAqIENoZWNrcyBpZiBhIGxpc3RlbmVyIG9iamVjdCBtYXRjaGVzIHRoZSBnaXZlbiBsaXN0ZW5lciBmdW5jdGlvbi4gVG8gbWF0Y2gsXG5cdCAqIGl0IG5lZWRzIHRvIGVpdGhlciBwb2ludCB0byB0aGF0IGxpc3RlbmVyIG9yIGhhdmUgaXQgYXMgaXRzIG9yaWdpbi5cblx0ICogQHBhcmFtIHshT2JqZWN0fSBsaXN0ZW5lck9ialxuXHQgKiBAcGFyYW0geyFGdW5jdGlvbn0gbGlzdGVuZXJcblx0ICogQHJldHVybiB7Ym9vbGVhbn1cblx0ICogQHByb3RlY3RlZFxuXHQgKi9cblx0bWF0Y2hlc0xpc3RlbmVyXyhsaXN0ZW5lck9iaiwgbGlzdGVuZXIpIHtcblx0XHRjb25zdCBmbiA9IGxpc3RlbmVyT2JqLmZuIHx8IGxpc3RlbmVyT2JqO1xuXHRcdHJldHVybiBmbiA9PT0gbGlzdGVuZXIgfHxcblx0XHRcdChsaXN0ZW5lck9iai5vcmlnaW4gJiYgbGlzdGVuZXJPYmoub3JpZ2luID09PSBsaXN0ZW5lcik7XG5cdH1cblxuXHQvKipcblx0ICogUmVtb3ZlcyBhIGxpc3RlbmVyIGZvciB0aGUgc3BlY2lmaWVkIGV2ZW50cy5cblx0ICogQ2F1dGlvbjogY2hhbmdlcyBhcnJheSBpbmRpY2VzIGluIHRoZSBsaXN0ZW5lciBhcnJheSBiZWhpbmQgdGhlIGxpc3RlbmVyLlxuXHQgKiBAcGFyYW0geyEoQXJyYXl8c3RyaW5nKX0gZXZlbnRzXG5cdCAqIEBwYXJhbSB7IUZ1bmN0aW9ufSBsaXN0ZW5lclxuXHQgKiBAcmV0dXJuIHshT2JqZWN0fSBSZXR1cm5zIGVtaXR0ZXIsIHNvIGNhbGxzIGNhbiBiZSBjaGFpbmVkLlxuXHQgKi9cblx0b2ZmKGV2ZW50LCBsaXN0ZW5lcikge1xuXHRcdHRoaXMudmFsaWRhdGVMaXN0ZW5lcl8obGlzdGVuZXIpO1xuXHRcdGlmICghdGhpcy5ldmVudHNfKSB7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cblx0XHRjb25zdCBldmVudHMgPSB0aGlzLnRvRXZlbnRzQXJyYXlfKGV2ZW50KTtcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGV2ZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dGhpcy5ldmVudHNfW2V2ZW50c1tpXV0gPSB0aGlzLnJlbW92ZU1hdGNoaW5nTGlzdGVuZXJPYmpzXyhcblx0XHRcdFx0dG9BcnJheSh0aGlzLmV2ZW50c19bZXZlbnRzW2ldXSksXG5cdFx0XHRcdGxpc3RlbmVyXG5cdFx0XHQpO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0LyoqXG5cdCAqIEFkZHMgYSBsaXN0ZW5lciB0byB0aGUgZW5kIG9mIHRoZSBsaXN0ZW5lcnMgYXJyYXkgZm9yIHRoZSBzcGVjaWZpZWQgZXZlbnRzLlxuXHQgKiBAcGFyYW0geyEoQXJyYXl8c3RyaW5nKX0gZXZlbnRzXG5cdCAqIEBwYXJhbSB7IUZ1bmN0aW9ufSBsaXN0ZW5lclxuXHQgKiBAcmV0dXJuIHshRXZlbnRIYW5kbGV9IENhbiBiZSB1c2VkIHRvIHJlbW92ZSB0aGUgbGlzdGVuZXIuXG5cdCAqL1xuXHRvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5hZGRMaXN0ZW5lci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEFkZHMgaGFuZGxlciB0aGF0IGdldHMgdHJpZ2dlcmVkIHdoZW4gYW4gZXZlbnQgaXMgbGlzdGVuZWQgdG8gb24gdGhpc1xuXHQgKiBpbnN0YW5jZS5cblx0ICogQHBhcmFtIHshZnVuY3Rpb24oKX1cblx0ICovXG5cdG9uTGlzdGVuZXIoaGFuZGxlcikge1xuXHRcdHRoaXMubGlzdGVuZXJIYW5kbGVyc18gPSB0aGlzLmFkZEhhbmRsZXJfKHRoaXMubGlzdGVuZXJIYW5kbGVyc18sIGhhbmRsZXIpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEFkZHMgYSBvbmUgdGltZSBsaXN0ZW5lciBmb3IgdGhlIGV2ZW50cy4gVGhpcyBsaXN0ZW5lciBpcyBpbnZva2VkIG9ubHkgdGhlXG5cdCAqIG5leHQgdGltZSBlYWNoIGV2ZW50IGlzIGZpcmVkLCBhZnRlciB3aGljaCBpdCBpcyByZW1vdmVkLlxuXHQgKiBAcGFyYW0geyEoQXJyYXl8c3RyaW5nKX0gZXZlbnRzXG5cdCAqIEBwYXJhbSB7IUZ1bmN0aW9ufSBsaXN0ZW5lclxuXHQgKiBAcmV0dXJuIHshRXZlbnRIYW5kbGV9IENhbiBiZSB1c2VkIHRvIHJlbW92ZSB0aGUgbGlzdGVuZXIuXG5cdCAqL1xuXHRvbmNlKGV2ZW50cywgbGlzdGVuZXIpIHtcblx0XHRyZXR1cm4gdGhpcy5tYW55KGV2ZW50cywgMSwgbGlzdGVuZXIpO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJlbW92ZXMgYWxsIGxpc3RlbmVycywgb3IgdGhvc2Ugb2YgdGhlIHNwZWNpZmllZCBldmVudHMuIEl0J3Mgbm90IGEgZ29vZFxuXHQgKiBpZGVhIHRvIHJlbW92ZSBsaXN0ZW5lcnMgdGhhdCB3ZXJlIGFkZGVkIGVsc2V3aGVyZSBpbiB0aGUgY29kZSxcblx0ICogZXNwZWNpYWxseSB3aGVuIGl0J3Mgb24gYW4gZW1pdHRlciB0aGF0IHlvdSBkaWRuJ3QgY3JlYXRlLlxuXHQgKiBAcGFyYW0geyhBcnJheXxzdHJpbmcpPX0gb3B0X2V2ZW50c1xuXHQgKiBAcmV0dXJuIHshT2JqZWN0fSBSZXR1cm5zIGVtaXR0ZXIsIHNvIGNhbGxzIGNhbiBiZSBjaGFpbmVkLlxuXHQgKi9cblx0cmVtb3ZlQWxsTGlzdGVuZXJzKG9wdF9ldmVudHMpIHtcblx0XHRpZiAodGhpcy5ldmVudHNfKSB7XG5cdFx0XHRpZiAob3B0X2V2ZW50cykge1xuXHRcdFx0XHRjb25zdCBldmVudHMgPSB0aGlzLnRvRXZlbnRzQXJyYXlfKG9wdF9ldmVudHMpO1xuXHRcdFx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGV2ZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRcdHRoaXMuZXZlbnRzX1tldmVudHNbaV1dID0gbnVsbDtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhpcy5ldmVudHNfID0gbnVsbDtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHQvKipcblx0ICogUmVtb3ZlcyBhbGwgbGlzdGVuZXIgb2JqZWN0cyBmcm9tIHRoZSBnaXZlbiBhcnJheSB0aGF0IG1hdGNoIHRoZSBnaXZlblxuXHQgKiBsaXN0ZW5lciBmdW5jdGlvbi5cblx0ICogQHBhcmFtIHtBcnJheS48T2JqZWN0Pn0gbGlzdGVuZXJPYmpzXG5cdCAqIEBwYXJhbSB7IUZ1bmN0aW9ufSBsaXN0ZW5lclxuXHQgKiBAcmV0dXJuIHtBcnJheS48T2JqZWN0PnxPYmplY3R9IFRoZSBuZXcgbGlzdGVuZXJzIGFycmF5IGZvciB0aGlzIGV2ZW50LlxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqL1xuXHRyZW1vdmVNYXRjaGluZ0xpc3RlbmVyT2Jqc18obGlzdGVuZXJPYmpzLCBsaXN0ZW5lcikge1xuXHRcdGNvbnN0IGZpbmFsTGlzdGVuZXJzID0gW107XG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBsaXN0ZW5lck9ianMubGVuZ3RoOyBpKyspIHtcblx0XHRcdGlmICghdGhpcy5tYXRjaGVzTGlzdGVuZXJfKGxpc3RlbmVyT2Jqc1tpXSwgbGlzdGVuZXIpKSB7XG5cdFx0XHRcdGZpbmFsTGlzdGVuZXJzLnB1c2gobGlzdGVuZXJPYmpzW2ldKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIGZpbmFsTGlzdGVuZXJzLmxlbmd0aCA+IDAgPyBmaW5hbExpc3RlbmVycyA6IG51bGw7XG5cdH1cblxuXHQvKipcblx0ICogUmVtb3ZlcyBhIGxpc3RlbmVyIGZvciB0aGUgc3BlY2lmaWVkIGV2ZW50cy5cblx0ICogQ2F1dGlvbjogY2hhbmdlcyBhcnJheSBpbmRpY2VzIGluIHRoZSBsaXN0ZW5lciBhcnJheSBiZWhpbmQgdGhlIGxpc3RlbmVyLlxuXHQgKiBAcGFyYW0geyEoQXJyYXl8c3RyaW5nKX0gZXZlbnRzXG5cdCAqIEBwYXJhbSB7IUZ1bmN0aW9ufSBsaXN0ZW5lclxuXHQgKiBAcmV0dXJuIHshT2JqZWN0fSBSZXR1cm5zIGVtaXR0ZXIsIHNvIGNhbGxzIGNhbiBiZSBjaGFpbmVkLlxuXHQgKi9cblx0cmVtb3ZlTGlzdGVuZXIoKSB7XG5cdFx0cmV0dXJuIHRoaXMub2ZmLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdH1cblxuXHQvKipcblx0ICogUnVucyB0aGUgaGFuZGxlcnMgd2hlbiBhbiBldmVudCBpcyBsaXN0ZW5lZCB0by5cblx0ICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50XG5cdCAqIEBwcm90ZWN0ZWRcblx0ICovXG5cdHJ1bkxpc3RlbmVySGFuZGxlcnNfKGV2ZW50KSB7XG5cdFx0bGV0IGhhbmRsZXJzID0gdGhpcy5saXN0ZW5lckhhbmRsZXJzXztcblx0XHRpZiAoaGFuZGxlcnMpIHtcblx0XHRcdGhhbmRsZXJzID0gdG9BcnJheShoYW5kbGVycyk7XG5cdFx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGhhbmRsZXJzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGhhbmRsZXJzW2ldKGV2ZW50KTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogUnVucyB0aGUgZ2l2ZW4gbGlzdGVuZXJzLlxuXHQgKiBAcGFyYW0geyFBcnJheX0gbGlzdGVuZXJzXG5cdCAqIEBwYXJhbSB7IUFycmF5fSBhcmdzXG5cdCAqIEBwYXJhbSAoT2JqZWN0KSBmYWNhZGVcblx0ICogQHByb3RlY3RlZFxuXHQgKi9cblx0cnVuTGlzdGVuZXJzXyhsaXN0ZW5lcnMsIGFyZ3MsIGZhY2FkZSkge1xuXHRcdGlmIChmYWNhZGUpIHtcblx0XHRcdGFyZ3MucHVzaChmYWNhZGUpO1xuXHRcdH1cblxuXHRcdGNvbnN0IGRlZmF1bHRMaXN0ZW5lcnMgPSBbXTtcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7IGkrKykge1xuXHRcdFx0Y29uc3QgbGlzdGVuZXIgPSBsaXN0ZW5lcnNbaV0uZm4gfHwgbGlzdGVuZXJzW2ldO1xuXHRcdFx0aWYgKGxpc3RlbmVyc1tpXS5kZWZhdWx0KSB7XG5cdFx0XHRcdGRlZmF1bHRMaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRsaXN0ZW5lci5hcHBseSh0aGlzLCBhcmdzKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYgKCFmYWNhZGUgfHwgIWZhY2FkZS5wcmV2ZW50ZWREZWZhdWx0KSB7XG5cdFx0XHRmb3IgKGxldCBqID0gMDsgaiA8IGRlZmF1bHRMaXN0ZW5lcnMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0ZGVmYXVsdExpc3RlbmVyc1tqXS5hcHBseSh0aGlzLCBhcmdzKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgY29uZmlndXJhdGlvbiBvcHRpb24gd2hpY2ggZGV0ZXJtaW5lcyBpZiBhbiBldmVudCBmYWNhZGUgc2hvdWxkXG5cdCAqIGJlIHNlbnQgYXMgYSBwYXJhbSBvZiBsaXN0ZW5lcnMgd2hlbiBlbWl0dGluZyBldmVudHMuIElmIHNldCB0byB0cnVlLCB0aGVcblx0ICogZmFjYWRlIHdpbGwgYmUgcGFzc2VkIGFzIHRoZSBmaXJzdCBhcmd1bWVudCBvZiB0aGUgbGlzdGVuZXIuXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gc2hvdWxkVXNlRmFjYWRlXG5cdCAqIEByZXR1cm4geyFPYmplY3R9IFJldHVybnMgZW1pdHRlciwgc28gY2FsbHMgY2FuIGJlIGNoYWluZWQuXG5cdCAqL1xuXHRzZXRTaG91bGRVc2VGYWNhZGUoc2hvdWxkVXNlRmFjYWRlKSB7XG5cdFx0dGhpcy5zaG91bGRVc2VGYWNhZGVfID0gc2hvdWxkVXNlRmFjYWRlO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0LyoqXG5cdCAqIENvbnZlcnRzIHRoZSBwYXJhbWV0ZXIgdG8gYW4gYXJyYXkgaWYgb25seSBvbmUgZXZlbnQgaXMgZ2l2ZW4uIFJldXNlcyB0aGVcblx0ICogc2FtZSBhcnJheSBlYWNoIHRpbWUgdGhpcyBjb252ZXJzaW9uIGlzIGRvbmUsIHRvIGF2b2lkIHVzaW5nIG1vcmUgbWVtb3J5XG5cdCAqIHRoYW4gbmVjZXNzYXJ5LlxuXHQgKiBAcGFyYW0gIHshKEFycmF5fHN0cmluZyl9IGV2ZW50c1xuXHQgKiBAcmV0dXJuIHshQXJyYXl9XG5cdCAqIEBwcm90ZWN0ZWRcblx0ICovXG5cdHRvRXZlbnRzQXJyYXlfKGV2ZW50cykge1xuXHRcdGlmIChpc1N0cmluZyhldmVudHMpKSB7XG5cdFx0XHRzaW5nbGVBcnJheV9bMF0gPSBldmVudHM7XG5cdFx0XHRldmVudHMgPSBzaW5nbGVBcnJheV87XG5cdFx0fVxuXHRcdHJldHVybiBldmVudHM7XG5cdH1cblxuXHQvKipcblx0ICogQ2hlY2tzIGlmIHRoZSBnaXZlbiBsaXN0ZW5lciBpcyB2YWxpZCwgdGhyb3dpbmcgYW4gZXhjZXB0aW9uIHdoZW4gaXQncyBub3QuXG5cdCAqIEBwYXJhbSAgeyp9IGxpc3RlbmVyXG5cdCAqIEBwcm90ZWN0ZWRcblx0ICovXG5cdHZhbGlkYXRlTGlzdGVuZXJfKGxpc3RlbmVyKSB7XG5cdFx0aWYgKCFpc0Z1bmN0aW9uKGxpc3RlbmVyKSkge1xuXHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignTGlzdGVuZXIgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIHRvQXJyYXkodmFsKSB7XG5cdHZhbCA9IHZhbCB8fCBbXTtcblx0cmV0dXJuIEFycmF5LmlzQXJyYXkodmFsKSA/IHZhbCA6IFt2YWxdO1xufVxuXG5leHBvcnQgZGVmYXVsdCBFdmVudEVtaXR0ZXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB7IERpc3Bvc2FibGUgfSBmcm9tICdtZXRhbCc7XG5cbi8qKlxuICogRXZlbnRFbWl0dGVyUHJveHkgdXRpbGl0eS4gSXQncyByZXNwb25zaWJsZSBmb3IgbGlua2luZyB0d28gRXZlbnRFbWl0dGVyXG4gKiBpbnN0YW5jZXMgdG9nZXRoZXIsIGVtaXR0aW5nIGV2ZW50cyBmcm9tIHRoZSBmaXJzdCBlbWl0dGVyIHRocm91Z2ggdGhlXG4gKiBzZWNvbmQgb25lLiBUaGF0IG1lYW5zIHRoYXQgbGlzdGVuaW5nIHRvIGEgc3VwcG9ydGVkIGV2ZW50IG9uIHRoZSB0YXJnZXRcbiAqIGVtaXR0ZXIgd2lsbCBtZWFuIGxpc3RlbmluZyB0byBpdCBvbiB0aGUgb3JpZ2luIGVtaXR0ZXIgYXMgd2VsbC5cbiAqIEBwYXJhbSB7RXZlbnRFbWl0dGVyfSBvcmlnaW5FbWl0dGVyIEV2ZW50cyBvcmlnaW5hdGVkIG9uIHRoaXMgZW1pdHRlclxuICogICB3aWxsIGJlIGZpcmVkIGZvciB0aGUgdGFyZ2V0IGVtaXR0ZXIncyBsaXN0ZW5lcnMgYXMgd2VsbC5cbiAqIEBwYXJhbSB7RXZlbnRFbWl0dGVyfSB0YXJnZXRFbWl0dGVyIEV2ZW50IGxpc3RlbmVycyBhdHRhY2hlZCB0byB0aGlzIGVtaXR0ZXJcbiAqICAgd2lsbCBhbHNvIGJlIHRyaWdnZXJlZCB3aGVuIHRoZSBldmVudCBpcyBmaXJlZCBieSB0aGUgb3JpZ2luIGVtaXR0ZXIuXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0X2JsYWNrbGlzdCBPcHRpb25hbCBibGFja2xpc3Qgb2YgZXZlbnRzIHRoYXQgc2hvdWxkIG5vdCBiZVxuICogICBwcm94aWVkLlxuICogQGNvbnN0cnVjdG9yXG4gKiBAZXh0ZW5kcyB7RGlzcG9zYWJsZX1cbiAqL1xuY2xhc3MgRXZlbnRFbWl0dGVyUHJveHkgZXh0ZW5kcyBEaXNwb3NhYmxlIHtcblx0Y29uc3RydWN0b3Iob3JpZ2luRW1pdHRlciwgdGFyZ2V0RW1pdHRlciwgb3B0X2JsYWNrbGlzdCwgb3B0X3doaXRlbGlzdCkge1xuXHRcdHN1cGVyKCk7XG5cblx0XHQvKipcblx0XHQgKiBNYXAgb2YgZXZlbnRzIHRoYXQgc2hvdWxkIG5vdCBiZSBwcm94aWVkLlxuXHRcdCAqIEB0eXBlIHtPYmplY3R9XG5cdFx0ICogQHByb3RlY3RlZFxuXHRcdCAqL1xuXHRcdHRoaXMuYmxhY2tsaXN0XyA9IG9wdF9ibGFja2xpc3Q7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgb3JpZ2luIGVtaXR0ZXIuIFRoaXMgZW1pdHRlcidzIGV2ZW50cyB3aWxsIGJlIHByb3hpZWQgdGhyb3VnaCB0aGVcblx0XHQgKiB0YXJnZXQgZW1pdHRlci5cblx0XHQgKiBAdHlwZSB7RXZlbnRFbWl0dGVyfVxuXHRcdCAqIEBwcm90ZWN0ZWRcblx0XHQgKi9cblx0XHR0aGlzLm9yaWdpbkVtaXR0ZXJfID0gb3JpZ2luRW1pdHRlcjtcblxuXHRcdC8qKlxuXHRcdCAqIEEgbGlzdCBvZiBldmVudHMgdGhhdCBhcmUgcGVuZGluZyB0byBiZSBsaXN0ZW5lZCBieSBhbiBhY3R1YWwgb3JpZ2luXG5cdFx0ICogZW1pdHRlci4gRXZlbnRzIGFyZSBzdG9yZWQgaGVyZSB3aGVuIHRoZSBvcmlnaW4gZG9lc24ndCBleGlzdCwgc28gdGhleVxuXHRcdCAqIGNhbiBiZSBzZXQgb24gYSBuZXcgb3JpZ2luIHdoZW4gb25lIGlzIHNldC5cblx0XHQgKiBAdHlwZSB7QXJyYXl9XG5cdFx0ICogQHByb3RlY3RlZFxuXHRcdCAqL1xuXHRcdHRoaXMucGVuZGluZ0V2ZW50c18gPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogSG9sZHMgYSBtYXAgb2YgZXZlbnRzIGZyb20gdGhlIG9yaWdpbiBlbWl0dGVyIHRoYXQgYXJlIGFscmVhZHkgYmVpbmcgcHJveGllZC5cblx0XHQgKiBAdHlwZSB7T2JqZWN0PHN0cmluZywgIUV2ZW50SGFuZGxlPn1cblx0XHQgKiBAcHJvdGVjdGVkXG5cdFx0ICovXG5cdFx0dGhpcy5wcm94aWVkRXZlbnRzXyA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgdGFyZ2V0IGVtaXR0ZXIuIFRoaXMgZW1pdHRlciB3aWxsIGVtaXQgYWxsIGV2ZW50cyB0aGF0IGNvbWUgZnJvbVxuXHRcdCAqIHRoZSBvcmlnaW4gZW1pdHRlci5cblx0XHQgKiBAdHlwZSB7RXZlbnRFbWl0dGVyfVxuXHRcdCAqIEBwcm90ZWN0ZWRcblx0XHQgKi9cblx0XHR0aGlzLnRhcmdldEVtaXR0ZXJfID0gdGFyZ2V0RW1pdHRlcjtcblxuXHRcdC8qKlxuXHRcdCAqIE1hcCBvZiBldmVudHMgdGhhdCBzaG91bGQgYmUgcHJveGllZC4gSWYgd2hpdGVsaXN0IGlzIHNldCBibGFja2xpc3QgaXMgaWdub3JlZC5cblx0XHQgKiBAdHlwZSB7T2JqZWN0fVxuXHRcdCAqIEBwcm90ZWN0ZWRcblx0XHQgKi9cblx0XHR0aGlzLndoaXRlbGlzdF8gPSBvcHRfd2hpdGVsaXN0O1xuXG5cdFx0dGhpcy5zdGFydFByb3h5XygpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEFkZHMgdGhlIGdpdmVuIGxpc3RlbmVyIGZvciB0aGUgZ2l2ZW4gZXZlbnQuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBldmVudFxuXHQgKiBAcGFyYW0geyFmdW5jdGlvbigpfSBsaXN0ZW5lclxuXHQgKiBAcmV0dXJuIHshRXZlbnRIYW5kbGV9IFRoZSBsaXN0ZW5lZCBldmVudCdzIGhhbmRsZS5cblx0ICogQHByb3RlY3RlZFxuXHQgKi9cblx0YWRkTGlzdGVuZXJfKGV2ZW50LCBsaXN0ZW5lcikge1xuXHRcdHJldHVybiB0aGlzLm9yaWdpbkVtaXR0ZXJfLm9uKGV2ZW50LCBsaXN0ZW5lcik7XG5cdH1cblxuXHQvKipcblx0ICogQGluaGVyaXREb2Ncblx0ICovXG5cdGRpc3Bvc2VJbnRlcm5hbCgpIHtcblx0XHR0aGlzLnJlbW92ZUxpc3RlbmVyc18oKTtcblx0XHR0aGlzLnByb3hpZWRFdmVudHNfID0gbnVsbDtcblx0XHR0aGlzLm9yaWdpbkVtaXR0ZXJfID0gbnVsbDtcblx0XHR0aGlzLnRhcmdldEVtaXR0ZXJfID0gbnVsbDtcblx0fVxuXG5cdC8qKlxuXHQgKiBFbWl0cyB0aGUgc3BlY2lmaWVkIGV2ZW50IHR5cGUgb24gdGhlIHRhcmdldCBlbWl0dGVyLlxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqL1xuXHRlbWl0T25UYXJnZXRfKCkge1xuXHRcdHRoaXMudGFyZ2V0RW1pdHRlcl8uZW1pdC5hcHBseSh0aGlzLnRhcmdldEVtaXR0ZXJfLCBhcmd1bWVudHMpO1xuXHR9XG5cblx0LyoqXG5cdCAqIFByb3hpZXMgdGhlIGdpdmVuIGV2ZW50IGZyb20gdGhlIG9yaWdpbiB0byB0aGUgdGFyZ2V0IGVtaXR0ZXIuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBldmVudFxuXHQgKi9cblx0cHJveHlFdmVudChldmVudCkge1xuXHRcdGlmICh0aGlzLnNob3VsZFByb3h5RXZlbnRfKGV2ZW50KSkge1xuXHRcdFx0dGhpcy50cnlUb0FkZExpc3RlbmVyXyhldmVudCk7XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIFJlbW92ZXMgdGhlIHByb3h5IGxpc3RlbmVyIGZvciBhbGwgZXZlbnRzLlxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqL1xuXHRyZW1vdmVMaXN0ZW5lcnNfKCkge1xuXHRcdGlmICh0aGlzLnByb3hpZWRFdmVudHNfKSB7XG5cdFx0XHRjb25zdCBldmVudHMgPSBPYmplY3Qua2V5cyh0aGlzLnByb3hpZWRFdmVudHNfKTtcblx0XHRcdGZvciAobGV0IGkgPSAwOyBpIDwgZXZlbnRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdHRoaXMucHJveGllZEV2ZW50c19bZXZlbnRzW2ldXS5yZW1vdmVMaXN0ZW5lcigpO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5wcm94aWVkRXZlbnRzXyA9IG51bGw7XG5cdFx0fVxuXHRcdHRoaXMucGVuZGluZ0V2ZW50c18gPSBudWxsO1xuXHR9XG5cblx0LyoqXG5cdCAqIENoYW5nZXMgdGhlIG9yaWdpbiBlbWl0dGVyLiBUaGlzIGF1dG9tYXRpY2FsbHkgZGV0YWNoZXMgYW55IGV2ZW50cyB0aGF0XG5cdCAqIHdlcmUgYWxyZWFkeSBiZWluZyBwcm94aWVkIGZyb20gdGhlIHByZXZpb3VzIGVtaXR0ZXIsIGFuZCBzdGFydHMgcHJveHlpbmdcblx0ICogdGhlbSBvbiB0aGUgbmV3IGVtaXR0ZXIgaW5zdGVhZC5cblx0ICogQHBhcmFtIHshRXZlbnRFbWl0dGVyfSBvcmlnaW5FbWl0dGVyXG5cdCAqL1xuXHRzZXRPcmlnaW5FbWl0dGVyKG9yaWdpbkVtaXR0ZXIpIHtcblx0XHRjb25zdCBldmVudHMgPSB0aGlzLm9yaWdpbkVtaXR0ZXJfICYmIHRoaXMucHJveGllZEV2ZW50c18gP1xuXHRcdFx0T2JqZWN0LmtleXModGhpcy5wcm94aWVkRXZlbnRzXykgOlxuXHRcdFx0dGhpcy5wZW5kaW5nRXZlbnRzXztcblx0XHR0aGlzLm9yaWdpbkVtaXR0ZXJfID0gb3JpZ2luRW1pdHRlcjtcblx0XHRpZiAoZXZlbnRzKSB7XG5cdFx0XHR0aGlzLnJlbW92ZUxpc3RlbmVyc18oKTtcblx0XHRcdGV2ZW50cy5mb3JFYWNoKGV2ZW50ID0+IHRoaXMucHJveHlFdmVudChldmVudCkpO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBDaGVja3MgaWYgdGhlIGdpdmVuIGV2ZW50IHNob3VsZCBiZSBwcm94aWVkLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnRcblx0ICogQHJldHVybiB7Ym9vbGVhbn1cblx0ICogQHByb3RlY3RlZFxuXHQgKi9cblx0c2hvdWxkUHJveHlFdmVudF8oZXZlbnQpIHtcblx0XHRpZiAodGhpcy53aGl0ZWxpc3RfICYmICF0aGlzLndoaXRlbGlzdF9bZXZlbnRdKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdGlmICh0aGlzLmJsYWNrbGlzdF8gJiYgdGhpcy5ibGFja2xpc3RfW2V2ZW50XSkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gIXRoaXMucHJveGllZEV2ZW50c18gfHwgIXRoaXMucHJveGllZEV2ZW50c19bZXZlbnRdO1xuXHR9XG5cblx0LyoqXG5cdCAqIFN0YXJ0cyBwcm94eWluZyBhbGwgZXZlbnRzIGZyb20gdGhlIG9yaWdpbiB0byB0aGUgdGFyZ2V0IGVtaXR0ZXIuXG5cdCAqIEBwcm90ZWN0ZWRcblx0ICovXG5cdHN0YXJ0UHJveHlfKCkge1xuXHRcdHRoaXMudGFyZ2V0RW1pdHRlcl8ub25MaXN0ZW5lcih0aGlzLnByb3h5RXZlbnQuYmluZCh0aGlzKSk7XG5cdH1cblxuXHQvKipcblx0ICogQWRkcyBhIGxpc3RlbmVyIHRvIHRoZSBvcmlnaW4gZW1pdHRlciwgaWYgaXQgZXhpc3RzLiBPdGhlcndpc2UsIHN0b3Jlc1xuXHQgKiB0aGUgcGVuZGluZyBsaXN0ZW5lciBzbyBpdCBjYW4gYmUgdXNlZCBvbiBhIGZ1dHVyZSBvcmlnaW4gZW1pdHRlci5cblx0ICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50XG5cdCAqIEBwcm90ZWN0ZWRcblx0ICovXG5cdHRyeVRvQWRkTGlzdGVuZXJfKGV2ZW50KSB7XG5cdFx0aWYgKHRoaXMub3JpZ2luRW1pdHRlcl8pIHtcblx0XHRcdHRoaXMucHJveGllZEV2ZW50c18gPSB0aGlzLnByb3hpZWRFdmVudHNfIHx8IHt9O1xuXHRcdFx0dGhpcy5wcm94aWVkRXZlbnRzX1tldmVudF0gPSB0aGlzLmFkZExpc3RlbmVyXyhcblx0XHRcdFx0ZXZlbnQsXG5cdFx0XHRcdHRoaXMuZW1pdE9uVGFyZ2V0Xy5iaW5kKHRoaXMsIGV2ZW50KVxuXHRcdFx0KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5wZW5kaW5nRXZlbnRzXyA9IHRoaXMucGVuZGluZ0V2ZW50c18gfHwgW107XG5cdFx0XHR0aGlzLnBlbmRpbmdFdmVudHNfLnB1c2goZXZlbnQpO1xuXHRcdH1cblx0fVxufVxuXG5leHBvcnQgZGVmYXVsdCBFdmVudEVtaXR0ZXJQcm94eTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHsgRGlzcG9zYWJsZSB9IGZyb20gJ21ldGFsJztcblxuLyoqXG4gKiBFdmVudEhhbmRsZXIgdXRpbGl0eS4gSXQncyB1c2VmdWwgZm9yIGVhc2lseSByZW1vdmluZyBhIGdyb3VwIG9mXG4gKiBsaXN0ZW5lcnMgZnJvbSBkaWZmZXJlbnQgRXZlbnRFbWl0dGVyIGluc3RhbmNlcy5cbiAqIEBjb25zdHJ1Y3RvclxuICogQGV4dGVuZHMge0Rpc3Bvc2FibGV9XG4gKi9cbmNsYXNzIEV2ZW50SGFuZGxlciBleHRlbmRzIERpc3Bvc2FibGUge1xuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHRzdXBlcigpO1xuXG5cdFx0LyoqXG5cdFx0ICogQW4gYXJyYXkgdGhhdCBob2xkcyB0aGUgYWRkZWQgZXZlbnQgaGFuZGxlcywgc28gdGhlIGxpc3RlbmVycyBjYW4gYmVcblx0XHQgKiByZW1vdmVkIGxhdGVyLlxuXHRcdCAqIEB0eXBlIHtBcnJheS48RXZlbnRIYW5kbGU+fVxuXHRcdCAqIEBwcm90ZWN0ZWRcblx0XHQgKi9cblx0XHR0aGlzLmV2ZW50SGFuZGxlc18gPSBbXTtcblx0fVxuXG5cdC8qKlxuXHQgKiBBZGRzIGV2ZW50IGhhbmRsZXMgdG8gYmUgcmVtb3ZlZCBsYXRlciB0aHJvdWdoIHRoZSBgcmVtb3ZlQWxsTGlzdGVuZXJzYFxuXHQgKiBtZXRob2QuXG5cdCAqIEBwYXJhbSB7Li4uKCFFdmVudEhhbmRsZSl9IHZhcl9hcmdzXG5cdCAqL1xuXHRhZGQoKSB7XG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHRoaXMuZXZlbnRIYW5kbGVzXy5wdXNoKGFyZ3VtZW50c1tpXSk7XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIERpc3Bvc2VzIG9mIHRoaXMgaW5zdGFuY2UncyBvYmplY3QgcmVmZXJlbmNlcy5cblx0ICogQG92ZXJyaWRlXG5cdCAqL1xuXHRkaXNwb3NlSW50ZXJuYWwoKSB7XG5cdFx0dGhpcy5ldmVudEhhbmRsZXNfID0gbnVsbDtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZW1vdmVzIGFsbCBsaXN0ZW5lcnMgdGhhdCBoYXZlIGJlZW4gYWRkZWQgdGhyb3VnaCB0aGUgYGFkZGAgbWV0aG9kLlxuXHQgKi9cblx0cmVtb3ZlQWxsTGlzdGVuZXJzKCkge1xuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5ldmVudEhhbmRsZXNfLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR0aGlzLmV2ZW50SGFuZGxlc19baV0ucmVtb3ZlTGlzdGVuZXIoKTtcblx0XHR9XG5cblx0XHR0aGlzLmV2ZW50SGFuZGxlc18gPSBbXTtcblx0fVxufVxuXG5leHBvcnQgZGVmYXVsdCBFdmVudEhhbmRsZXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB7IGFycmF5LCBpc1N0cmluZyB9IGZyb20gJ21ldGFsJztcbmltcG9ydCBkb21EYXRhIGZyb20gJy4vZG9tRGF0YSc7XG5pbXBvcnQgeyBFdmVudEhhbmRsZSB9IGZyb20gJ21ldGFsLWV2ZW50cyc7XG5cbi8qKlxuICogVGhpcyBpcyBhIHNwZWNpYWwgRXZlbnRIYW5kbGUsIHRoYXQgaXMgcmVzcG9uc2libGUgZm9yIGRvbSBkZWxlZ2F0ZWQgZXZlbnRzXG4gKiAob25seSB0aGUgb25lcyB0aGF0IHJlY2VpdmUgYSB0YXJnZXQgZWxlbWVudCwgbm90IGEgc2VsZWN0b3Igc3RyaW5nKS5cbiAqIEBleHRlbmRzIHtFdmVudEhhbmRsZX1cbiAqL1xuY2xhc3MgRG9tRGVsZWdhdGVkRXZlbnRIYW5kbGUgZXh0ZW5kcyBFdmVudEhhbmRsZSB7XG5cdC8qKlxuXHQgKiBUaGUgY29uc3RydWN0b3IgZm9yIGBEb21EZWxlZ2F0ZWRFdmVudEhhbmRsZWAuXG5cdCAqIEBwYXJhbSB7IUV2ZW50fSBlbWl0dGVyIEVsZW1lbnQgdGhlIGV2ZW50IHdhcyBzdWJzY3JpYmVkIHRvLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnQgVGhlIG5hbWUgb2YgdGhlIGV2ZW50IHRoYXQgd2FzIHN1YnNjcmliZWQgdG8uXG5cdCAqIEBwYXJhbSB7IUZ1bmN0aW9ufSBsaXN0ZW5lciBUaGUgbGlzdGVuZXIgc3Vic2NyaWJlZCB0byB0aGUgZXZlbnQuXG5cdCAqIEBwYXJhbSB7c3RyaW5nPX0gb3B0X3NlbGVjdG9yIEFuIG9wdGlvbmFsIHNlbGVjdG9yIHVzZWQgd2hlbiBkZWxlZ2F0aW5nXG5cdCAqICAgICB0aGUgZXZlbnQuXG5cdCAqIEBjb25zdHJ1Y3RvclxuXHQgKi9cblx0Y29uc3RydWN0b3IoZW1pdHRlciwgZXZlbnQsIGxpc3RlbmVyLCBvcHRfc2VsZWN0b3IpIHtcblx0XHRzdXBlcihlbWl0dGVyLCBldmVudCwgbGlzdGVuZXIpO1xuXHRcdHRoaXMuc2VsZWN0b3JfID0gb3B0X3NlbGVjdG9yO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBpbmhlcml0RG9jXG5cdCAqL1xuXHRyZW1vdmVMaXN0ZW5lcigpIHtcblx0XHRjb25zdCBkZWxlZ2F0aW5nID0gZG9tRGF0YS5nZXQodGhpcy5lbWl0dGVyXywgJ2RlbGVnYXRpbmcnLCB7fSk7XG5cdFx0Y29uc3QgbGlzdGVuZXJzID0gZG9tRGF0YS5nZXQodGhpcy5lbWl0dGVyXywgJ2xpc3RlbmVycycsIHt9KTtcblx0XHRjb25zdCBzZWxlY3RvciA9IHRoaXMuc2VsZWN0b3JfO1xuXHRcdGNvbnN0IGFyciA9IGlzU3RyaW5nKHNlbGVjdG9yKSA/IGRlbGVnYXRpbmdbdGhpcy5ldmVudF9dLnNlbGVjdG9ycyA6IGxpc3RlbmVycztcblx0XHRjb25zdCBrZXkgPSBpc1N0cmluZyhzZWxlY3RvcikgPyBzZWxlY3RvciA6IHRoaXMuZXZlbnRfO1xuXG5cdFx0YXJyYXkucmVtb3ZlKGFycltrZXldIHx8IFtdLCB0aGlzLmxpc3RlbmVyXyk7XG5cdFx0aWYgKGFycltrZXldICYmIGFycltrZXldLmxlbmd0aCA9PT0gMCkge1xuXHRcdFx0ZGVsZXRlIGFycltrZXldO1xuXHRcdH1cblx0fVxufVxuXG5leHBvcnQgZGVmYXVsdCBEb21EZWxlZ2F0ZWRFdmVudEhhbmRsZTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHsgRXZlbnRIYW5kbGUgfSBmcm9tICdtZXRhbC1ldmVudHMnO1xuXG4vKipcbiAqIFRoaXMgaXMgYSBzcGVjaWFsIEV2ZW50SGFuZGxlLCB0aGF0IGlzIHJlc3BvbnNpYmxlIGZvciBkb20gZXZlbnRzLCBpbnN0ZWFkXG4gKiBvZiBFdmVudEVtaXR0ZXIgZXZlbnRzLlxuICogQGV4dGVuZHMge0V2ZW50SGFuZGxlfVxuICovXG5jbGFzcyBEb21FdmVudEhhbmRsZSBleHRlbmRzIEV2ZW50SGFuZGxlIHtcblx0LyoqXG5cdCAqIFRoZSBjb25zdHJ1Y3RvciBmb3IgYERvbUV2ZW50SGFuZGxlYC5cblx0ICogQHBhcmFtIHshRXZlbnRFbWl0dGVyfSBlbWl0dGVyIEVtaXR0ZXIgdGhlIGV2ZW50IHdhcyBzdWJzY3JpYmVkIHRvLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnQgVGhlIG5hbWUgb2YgdGhlIGV2ZW50IHRoYXQgd2FzIHN1YnNjcmliZWQgdG8uXG5cdCAqIEBwYXJhbSB7IUZ1bmN0aW9ufSBsaXN0ZW5lciBUaGUgbGlzdGVuZXIgc3Vic2NyaWJlZCB0byB0aGUgZXZlbnQuXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gb3B0X2NhcHR1cmUgRmxhZyBpbmRpY2F0aW5nIGlmIGxpc3RlbmVyIHNob3VsZCBiZSB0cmlnZ2VyZWRcblx0ICogICBkdXJpbmcgY2FwdHVyZSBwaGFzZSwgaW5zdGVhZCBvZiBkdXJpbmcgdGhlIGJ1YmJsaW5nIHBoYXNlLiBEZWZhdWx0cyB0byBmYWxzZS5cblx0ICogQGNvbnN0cnVjdG9yXG5cdCAqL1xuXHRjb25zdHJ1Y3RvcihlbWl0dGVyLCBldmVudCwgbGlzdGVuZXIsIG9wdF9jYXB0dXJlKSB7XG5cdFx0c3VwZXIoZW1pdHRlciwgZXZlbnQsIGxpc3RlbmVyKTtcblx0XHR0aGlzLmNhcHR1cmVfID0gb3B0X2NhcHR1cmU7XG5cdH1cblxuXHQvKipcblx0ICogQGluaGVyaXREb2Ncblx0ICovXG5cdHJlbW92ZUxpc3RlbmVyKCkge1xuXHRcdHRoaXMuZW1pdHRlcl8ucmVtb3ZlRXZlbnRMaXN0ZW5lcih0aGlzLmV2ZW50XywgdGhpcy5saXN0ZW5lcl8sIHRoaXMuY2FwdHVyZV8pO1xuXHR9XG59XG5cbmV4cG9ydCBkZWZhdWx0IERvbUV2ZW50SGFuZGxlO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgeyBpc0RlZiwgaXNEb2N1bWVudCwgaXNEb2N1bWVudEZyYWdtZW50LCBpc0VsZW1lbnQsIGlzT2JqZWN0LCBpc1N0cmluZywgb2JqZWN0IH0gZnJvbSAnbWV0YWwnO1xuaW1wb3J0IGRvbURhdGEgZnJvbSAnLi9kb21EYXRhJztcbmltcG9ydCBEb21EZWxlZ2F0ZWRFdmVudEhhbmRsZSBmcm9tICcuL0RvbURlbGVnYXRlZEV2ZW50SGFuZGxlJztcbmltcG9ydCBEb21FdmVudEhhbmRsZSBmcm9tICcuL0RvbUV2ZW50SGFuZGxlJztcblxuY29uc3QgZWxlbWVudHNCeVRhZ18gPSB7fTtcbmNvbnN0IHN1cHBvcnRDYWNoZV8gPSB7fTtcbmV4cG9ydCBjb25zdCBjdXN0b21FdmVudHMgPSB7fTtcblxuY29uc3QgTEFTVF9DT05UQUlORVIgPSAnX19tZXRhbF9sYXN0X2NvbnRhaW5lcl9fJztcbmNvbnN0IFVTRV9DQVBUVVJFID0ge1xuXHRibHVyOiB0cnVlLFxuXHRlcnJvcjogdHJ1ZSxcblx0Zm9jdXM6IHRydWUsXG5cdGludmFsaWQ6IHRydWUsXG5cdGxvYWQ6IHRydWUsXG5cdHNjcm9sbDogdHJ1ZVxufTtcblxuLyoqXG4gKiBBZGRzIHRoZSByZXF1ZXN0ZWQgQ1NTIGNsYXNzZXMgdG8gYW4gZWxlbWVudC5cbiAqIEBwYXJhbSB7IUVsZW1lbnR8IU5vZGVsaXN0fSBlbGVtZW50cyBUaGUgZWxlbWVudCBvciBlbGVtZW50cyB0byBhZGQgQ1NTIGNsYXNzZXMgdG8uXG4gKiBAcGFyYW0ge3N0cmluZ30gY2xhc3NlcyBDU1MgY2xhc3NlcyB0byBhZGQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhZGRDbGFzc2VzKGVsZW1lbnRzLCBjbGFzc2VzKSB7XG5cdGlmICghaXNPYmplY3QoZWxlbWVudHMpIHx8ICFpc1N0cmluZyhjbGFzc2VzKSkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdGlmICghZWxlbWVudHMubGVuZ3RoKSB7XG5cdFx0ZWxlbWVudHMgPSBbZWxlbWVudHNdO1xuXHR9XG5cblx0Zm9yIChsZXQgaSA9IDA7IGkgPCBlbGVtZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdGlmICgnY2xhc3NMaXN0JyBpbiBlbGVtZW50c1tpXSkge1xuXHRcdFx0YWRkQ2xhc3Nlc1dpdGhOYXRpdmVfKGVsZW1lbnRzW2ldLCBjbGFzc2VzKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0YWRkQ2xhc3Nlc1dpdGhvdXROYXRpdmVfKGVsZW1lbnRzW2ldLCBjbGFzc2VzKTtcblx0XHR9XG5cdH1cbn1cblxuLyoqXG4gKiBBZGRzIHRoZSByZXF1ZXN0ZWQgQ1NTIGNsYXNzZXMgdG8gYW4gZWxlbWVudCB1c2luZyBjbGFzc0xpc3QuXG4gKiBAcGFyYW0geyFFbGVtZW50fSBlbGVtZW50IFRoZSBlbGVtZW50IHRvIGFkZCBDU1MgY2xhc3NlcyB0by5cbiAqIEBwYXJhbSB7c3RyaW5nfSBjbGFzc2VzIENTUyBjbGFzc2VzIHRvIGFkZC5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGFkZENsYXNzZXNXaXRoTmF0aXZlXyhlbGVtZW50LCBjbGFzc2VzKSB7XG5cdGNsYXNzZXMuc3BsaXQoJyAnKS5mb3JFYWNoKGZ1bmN0aW9uKGNsYXNzTmFtZSkge1xuXHRcdGlmIChjbGFzc05hbWUpIHtcblx0XHRcdGVsZW1lbnQuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpO1xuXHRcdH1cblx0fSk7XG59XG5cbi8qKlxuICogQWRkcyB0aGUgcmVxdWVzdGVkIENTUyBjbGFzc2VzIHRvIGFuIGVsZW1lbnQgd2l0aG91dCB1c2luZyBjbGFzc0xpc3QuXG4gKiBAcGFyYW0geyFFbGVtZW50fSBlbGVtZW50IFRoZSBlbGVtZW50IHRvIGFkZCBDU1MgY2xhc3NlcyB0by5cbiAqIEBwYXJhbSB7c3RyaW5nfSBjbGFzc2VzIENTUyBjbGFzc2VzIHRvIGFkZC5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGFkZENsYXNzZXNXaXRob3V0TmF0aXZlXyhlbGVtZW50LCBjbGFzc2VzKSB7XG5cdGNvbnN0IGVsZW1lbnRDbGFzc05hbWUgPSBgICR7ZWxlbWVudC5jbGFzc05hbWV9IGA7XG5cdGxldCBjbGFzc2VzVG9BcHBlbmQgPSAnJztcblxuXHRjbGFzc2VzID0gY2xhc3Nlcy5zcGxpdCgnICcpO1xuXG5cdGZvciAobGV0IGkgPSAwOyBpIDwgY2xhc3Nlcy5sZW5ndGg7IGkrKykge1xuXHRcdGNvbnN0IGNsYXNzTmFtZSA9IGNsYXNzZXNbaV07XG5cblx0XHRpZiAoZWxlbWVudENsYXNzTmFtZS5pbmRleE9mKGAgJHtjbGFzc05hbWV9IGApID09PSAtMSkge1xuXHRcdFx0Y2xhc3Nlc1RvQXBwZW5kICs9IGAgJHtjbGFzc05hbWV9YDtcblx0XHR9XG5cdH1cblxuXHRpZiAoY2xhc3Nlc1RvQXBwZW5kKSB7XG5cdFx0ZWxlbWVudC5jbGFzc05hbWUgPSBlbGVtZW50LmNsYXNzTmFtZSArIGNsYXNzZXNUb0FwcGVuZDtcblx0fVxufVxuXG4vKipcbiAqIEFkZHMgYW4gZXZlbnQgbGlzdGVuZXIgdG8gdGhlIGdpdmVuIGVsZW1lbnQsIHRvIGJlIHRyaWdnZXJlZCB2aWEgZGVsZWdhdGUuXG4gKiBAcGFyYW0geyFFbGVtZW50fSBlbGVtZW50XG4gKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lXG4gKiBAcGFyYW0geyFmdW5jdGlvbigpfSBsaXN0ZW5lclxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gYWRkRWxlbWVudExpc3RlbmVyXyhlbGVtZW50LCBldmVudE5hbWUsIGxpc3RlbmVyKSB7XG5cdGFkZFRvQXJyXyhkb21EYXRhLmdldChlbGVtZW50LCAnbGlzdGVuZXJzJywge30pLCBldmVudE5hbWUsIGxpc3RlbmVyKTtcbn1cblxuLyoqXG4gKiBBZGRzIGFuIGV2ZW50IGxpc3RlbmVyIHRvIHRoZSBnaXZlbiBlbGVtZW50LCB0byBiZSB0cmlnZ2VyZWQgdmlhIGRlbGVnYXRlXG4gKiBzZWxlY3RvcnMuXG4gKiBAcGFyYW0geyFFbGVtZW50fSBlbGVtZW50XG4gKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lXG4gKiBAcGFyYW0ge3N0cmluZ30gc2VsZWN0b3JcbiAqIEBwYXJhbSB7IWZ1bmN0aW9uKCl9IGxpc3RlbmVyXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBhZGRTZWxlY3Rvckxpc3RlbmVyXyhlbGVtZW50LCBldmVudE5hbWUsIHNlbGVjdG9yLCBsaXN0ZW5lcikge1xuXHRjb25zdCBkZWxlZ2F0aW5nRGF0YSA9IGRvbURhdGEuZ2V0KGVsZW1lbnQsICdkZWxlZ2F0aW5nJywge30pO1xuXHRhZGRUb0Fycl8oZGVsZWdhdGluZ0RhdGFbZXZlbnROYW1lXS5zZWxlY3RvcnMsIHNlbGVjdG9yLCBsaXN0ZW5lcik7XG59XG5cbi8qKlxuICogQWRkcyBhIHZhbHVlIHRvIGFuIGFycmF5IGluc2lkZSBhbiBvYmplY3QsIGNyZWF0aW5nIGl0IGZpcnN0IGlmIGl0IGRvZXNuJ3RcbiAqIHlldCBleGlzdC5cbiAqIEBwYXJhbSB7IUFycmF5fSBhcnJcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXlcbiAqIEBwYXJhbSB7Kn0gdmFsdWVcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGFkZFRvQXJyXyhhcnIsIGtleSwgdmFsdWUpIHtcblx0aWYgKCFhcnJba2V5XSkge1xuXHRcdGFycltrZXldID0gW107XG5cdH1cblx0YXJyW2tleV0ucHVzaCh2YWx1ZSk7XG59XG5cbi8qKlxuICogQXR0YWNoZXMgYSBkZWxlZ2F0ZSBsaXN0ZW5lciwgdW5sZXNzIHRoZXJlJ3MgYWxyZWFkeSBvbmUgYXR0YWNoZWQuXG4gKiBAcGFyYW0geyFFbGVtZW50fSBlbGVtZW50XG4gKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBhdHRhY2hEZWxlZ2F0ZUV2ZW50XyhlbGVtZW50LCBldmVudE5hbWUpIHtcblx0bGV0IGRlbGVnYXRpbmdEYXRhID0gZG9tRGF0YS5nZXQoZWxlbWVudCwgJ2RlbGVnYXRpbmcnLCB7fSk7XG5cdGlmICghZGVsZWdhdGluZ0RhdGFbZXZlbnROYW1lXSkge1xuXHRcdGRlbGVnYXRpbmdEYXRhW2V2ZW50TmFtZV0gPSB7XG5cdFx0XHRoYW5kbGU6IG9uKFxuXHRcdFx0XHRlbGVtZW50LFxuXHRcdFx0XHRldmVudE5hbWUsXG5cdFx0XHRcdGhhbmRsZURlbGVnYXRlRXZlbnRfLFxuXHRcdFx0XHQhIVVTRV9DQVBUVVJFW2V2ZW50TmFtZV1cblx0XHRcdCksXG5cdFx0XHRzZWxlY3RvcnM6IHt9XG5cdFx0fTtcblx0fVxufVxuXG4vKipcbiAqIEdldHMgdGhlIGNsb3Nlc3QgZWxlbWVudCB1cCB0aGUgdHJlZSBmcm9tIHRoZSBnaXZlbiBlbGVtZW50IChpbmNsdWRpbmdcbiAqIGl0c2VsZikgdGhhdCBtYXRjaGVzIHRoZSBzcGVjaWZpZWQgc2VsZWN0b3IsIG9yIG51bGwgaWYgbm9uZSBtYXRjaC5cbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudFxuICogQHBhcmFtIHtzdHJpbmd9IHNlbGVjdG9yXG4gKiBAcmV0dXJuIHtFbGVtZW50fVxuICovXG5leHBvcnQgZnVuY3Rpb24gY2xvc2VzdChlbGVtZW50LCBzZWxlY3Rvcikge1xuXHR3aGlsZSAoZWxlbWVudCAmJiAhbWF0Y2goZWxlbWVudCwgc2VsZWN0b3IpKSB7XG5cdFx0ZWxlbWVudCA9IGVsZW1lbnQucGFyZW50Tm9kZTtcblx0fVxuXHRyZXR1cm4gZWxlbWVudDtcbn1cblxuLyoqXG4gKiBBcHBlbmRzIGEgY2hpbGQgbm9kZSB3aXRoIHRleHQgb3Igb3RoZXIgbm9kZXMgdG8gYSBwYXJlbnQgbm9kZS4gSWZcbiAqIGNoaWxkIGlzIGEgSFRNTCBzdHJpbmcgaXQgd2lsbCBiZSBhdXRvbWF0aWNhbGx5IGNvbnZlcnRlZCB0byBhIGRvY3VtZW50XG4gKiBmcmFnbWVudCBiZWZvcmUgYXBwZW5kaW5nIGl0IHRvIHRoZSBwYXJlbnQuXG4gKiBAcGFyYW0geyFFbGVtZW50fSBwYXJlbnQgVGhlIG5vZGUgdG8gYXBwZW5kIG5vZGVzIHRvLlxuICogQHBhcmFtIHshKEVsZW1lbnR8Tm9kZUxpc3R8c3RyaW5nKX0gY2hpbGQgVGhlIHRoaW5nIHRvIGFwcGVuZCB0byB0aGUgcGFyZW50LlxuICogQHJldHVybiB7IUVsZW1lbnR9IFRoZSBhcHBlbmRlZCBjaGlsZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFwcGVuZChwYXJlbnQsIGNoaWxkKSB7XG5cdGlmIChpc1N0cmluZyhjaGlsZCkpIHtcblx0XHRjaGlsZCA9IGJ1aWxkRnJhZ21lbnQoY2hpbGQpO1xuXHR9XG5cdGlmIChjaGlsZCBpbnN0YW5jZW9mIE5vZGVMaXN0KSB7XG5cdFx0Y29uc3QgY2hpbGRBcnIgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChjaGlsZCk7XG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZEFyci5sZW5ndGg7IGkrKykge1xuXHRcdFx0cGFyZW50LmFwcGVuZENoaWxkKGNoaWxkQXJyW2ldKTtcblx0XHR9XG5cdH0gZWxzZSB7XG5cdFx0cGFyZW50LmFwcGVuZENoaWxkKGNoaWxkKTtcblx0fVxuXHRyZXR1cm4gY2hpbGQ7XG59XG5cbi8qKlxuICogSGVscGVyIGZvciBjb252ZXJ0aW5nIGEgSFRNTCBzdHJpbmcgaW50byBhIGRvY3VtZW50IGZyYWdtZW50LlxuICogQHBhcmFtIHtzdHJpbmd9IGh0bWxTdHJpbmcgVGhlIEhUTUwgc3RyaW5nIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJuIHshRWxlbWVudH0gVGhlIHJlc3VsdGluZyBkb2N1bWVudCBmcmFnbWVudC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJ1aWxkRnJhZ21lbnQoaHRtbFN0cmluZykge1xuXHRjb25zdCB0ZW1wRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cdHRlbXBEaXYuaW5uZXJIVE1MID0gYDxicj4ke2h0bWxTdHJpbmd9YDtcblx0dGVtcERpdi5yZW1vdmVDaGlsZCh0ZW1wRGl2LmZpcnN0Q2hpbGQpO1xuXG5cdGNvbnN0IGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuXHR3aGlsZSAodGVtcERpdi5maXJzdENoaWxkKSB7XG5cdFx0ZnJhZ21lbnQuYXBwZW5kQ2hpbGQodGVtcERpdi5maXJzdENoaWxkKTtcblx0fVxuXHRyZXR1cm4gZnJhZ21lbnQ7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIHRoZSBmaXJzdCBlbGVtZW50IGNvbnRhaW5zIHRoZSBzZWNvbmQgb25lLlxuICogQHBhcmFtIHshRWxlbWVudH0gZWxlbWVudDFcbiAqIEBwYXJhbSB7IUVsZW1lbnR9IGVsZW1lbnQyXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gY29udGFpbnMoZWxlbWVudDEsIGVsZW1lbnQyKSB7XG5cdGlmIChpc0RvY3VtZW50KGVsZW1lbnQxKSkge1xuXHRcdC8vIGRvY3VtZW50LmNvbnRhaW5zIGlzIG5vdCBkZWZpbmVkIG9uIElFOSwgc28gY2FsbCBpdCBvbiBkb2N1bWVudEVsZW1lbnQgaW5zdGVhZC5cblx0XHRyZXR1cm4gZWxlbWVudDEuZG9jdW1lbnRFbGVtZW50LmNvbnRhaW5zKGVsZW1lbnQyKTtcblx0fSBlbHNlIHtcblx0XHRyZXR1cm4gZWxlbWVudDEuY29udGFpbnMoZWxlbWVudDIpO1xuXHR9XG59XG5cbi8qKlxuICogTGlzdGVucyB0byB0aGUgc3BlY2lmaWVkIGV2ZW50IG9uIHRoZSBnaXZlbiBET00gZWxlbWVudCwgYnV0IG9ubHkgY2FsbHMgdGhlXG4gKiBnaXZlbiBjYWxsYmFjayBsaXN0ZW5lciB3aGVuIGl0J3MgdHJpZ2dlcmVkIGJ5IGVsZW1lbnRzIHRoYXQgbWF0Y2ggdGhlXG4gKiBnaXZlbiBzZWxlY3RvciBvciB0YXJnZXQgZWxlbWVudC5cbiAqIEBwYXJhbSB7IUVsZW1lbnR9IGVsZW1lbnQgVGhlIERPTSBlbGVtZW50IHRoZSBldmVudCBzaG91bGQgYmUgbGlzdGVuZWQgb24uXG4gKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lIFRoZSBuYW1lIG9mIHRoZSBldmVudCB0byBsaXN0ZW4gdG8uXG4gKiBAcGFyYW0geyFFbGVtZW50fHN0cmluZ30gc2VsZWN0b3JPclRhcmdldCBFaXRoZXIgYW4gZWxlbWVudCBvciBjc3Mgc2VsZWN0b3JcbiAqICAgICB0aGF0IHNob3VsZCBtYXRjaCB0aGUgZXZlbnQgZm9yIHRoZSBsaXN0ZW5lciB0byBiZSB0cmlnZ2VyZWQuXG4gKiBAcGFyYW0geyFmdW5jdGlvbighT2JqZWN0KX0gY2FsbGJhY2sgRnVuY3Rpb24gdG8gYmUgY2FsbGVkIHdoZW4gdGhlIGV2ZW50XG4gKiAgICAgaXMgdHJpZ2dlcmVkLiBJdCB3aWxsIHJlY2VpdmUgdGhlIG5vcm1hbGl6ZWQgZXZlbnQgb2JqZWN0LlxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2RlZmF1bHQgT3B0aW9uYWwgZmxhZyBpbmRpY2F0aW5nIGlmIHRoaXMgaXMgYSBkZWZhdWx0XG4gKiAgICAgbGlzdGVuZXIuIFRoYXQgbWVhbnMgdGhhdCBpdCB3b3VsZCBvbmx5IGJlIGV4ZWN1dGVkIGFmdGVyIGFsbCBub25cbiAqICAgICBkZWZhdWx0IGxpc3RlbmVycywgYW5kIG9ubHkgaWYgdGhlIGV2ZW50IGlzbid0IHByZXZlbnRlZCB2aWFcbiAqICAgICBgcHJldmVudERlZmF1bHRgLlxuICogQHJldHVybiB7IUV2ZW50SGFuZGxlfSBDYW4gYmUgdXNlZCB0byByZW1vdmUgdGhlIGxpc3RlbmVyLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVsZWdhdGUoZWxlbWVudCwgZXZlbnROYW1lLCBzZWxlY3Rvck9yVGFyZ2V0LCBjYWxsYmFjaywgb3B0X2RlZmF1bHQpIHtcblx0Y29uc3QgY3VzdG9tQ29uZmlnID0gY3VzdG9tRXZlbnRzW2V2ZW50TmFtZV07XG5cdGlmIChjdXN0b21Db25maWcgJiYgY3VzdG9tQ29uZmlnLmRlbGVnYXRlKSB7XG5cdFx0ZXZlbnROYW1lID0gY3VzdG9tQ29uZmlnLm9yaWdpbmFsRXZlbnQ7XG5cdFx0Y2FsbGJhY2sgPSBjdXN0b21Db25maWcuaGFuZGxlci5iaW5kKGN1c3RvbUNvbmZpZywgY2FsbGJhY2spO1xuXHR9XG5cblx0aWYgKG9wdF9kZWZhdWx0KSB7XG5cdFx0Ly8gV3JhcCBjYWxsYmFjayBzbyB3ZSBkb24ndCBzZXQgcHJvcGVydHkgZGlyZWN0bHkgb24gaXQuXG5cdFx0Y2FsbGJhY2sgPSBjYWxsYmFjay5iaW5kKCk7XG5cdFx0Y2FsbGJhY2suZGVmYXVsdExpc3RlbmVyXyA9IHRydWU7XG5cdH1cblxuXHRhdHRhY2hEZWxlZ2F0ZUV2ZW50XyhlbGVtZW50LCBldmVudE5hbWUpO1xuXHRpZiAoaXNTdHJpbmcoc2VsZWN0b3JPclRhcmdldCkpIHtcblx0XHRhZGRTZWxlY3Rvckxpc3RlbmVyXyhlbGVtZW50LCBldmVudE5hbWUsIHNlbGVjdG9yT3JUYXJnZXQsIGNhbGxiYWNrKTtcblx0fSBlbHNlIHtcblx0XHRhZGRFbGVtZW50TGlzdGVuZXJfKHNlbGVjdG9yT3JUYXJnZXQsIGV2ZW50TmFtZSwgY2FsbGJhY2spO1xuXHR9XG5cblx0cmV0dXJuIG5ldyBEb21EZWxlZ2F0ZWRFdmVudEhhbmRsZShcblx0XHRpc1N0cmluZyhzZWxlY3Rvck9yVGFyZ2V0KSA/IGVsZW1lbnQgOiBzZWxlY3Rvck9yVGFyZ2V0LFxuXHRcdGV2ZW50TmFtZSxcblx0XHRjYWxsYmFjayxcblx0XHRpc1N0cmluZyhzZWxlY3Rvck9yVGFyZ2V0KSA/IHNlbGVjdG9yT3JUYXJnZXQgOiBudWxsXG5cdCk7XG59XG5cbi8qKlxuICogVmVyaWZpZXMgaWYgdGhlIGVsZW1lbnQgaXMgYWJsZSB0byB0cmlnZ2VyIHRoZSBDbGljayBldmVudCxcbiAqIHNpbXVsYXRpbmcgYnJvd3NlcnMgYmVoYXZpb3VyLCBhdm9pZGluZyBldmVudCBsaXN0ZW5lcnMgdG8gYmUgY2FsbGVkIGJ5IHRyaWdnZXJFdmVudCBtZXRob2QuXG4gKiBAcGFyYW0ge0VsZW1lbnR9IG5vZGUgRWxlbWVudCB0byBiZSBjaGVja2VkLlxuICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZSBUaGUgZXZlbnQgbmFtZS5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGlzQWJsZVRvSW50ZXJhY3RXaXRoXyhub2RlLCBldmVudE5hbWUsIG9wdF9ldmVudE9iaikge1xuXHRpZiAob3B0X2V2ZW50T2JqICYmIGV2ZW50TmFtZSA9PT0gJ2NsaWNrJyAmJiBvcHRfZXZlbnRPYmouYnV0dG9uID09PSAyKSB7XG5cdFx0Ly8gRmlyZWZveCB0cmlnZ2VycyBcImNsaWNrXCIgZXZlbnRzIG9uIHRoZSBkb2N1bWVudCBmb3IgcmlnaHQgY2xpY2tzLiBUaGlzXG5cdFx0Ly8gY2F1c2VzIG91ciBkZWxlZ2F0ZSBsb2dpYyB0byB0cmlnZ2VyIGl0IGZvciByZWd1bGFyIGVsZW1lbnRzIHRvbywgd2hpY2hcblx0XHQvLyBzaG91bGRuJ3QgaGFwcGVuLiBJZ25vcmluZyB0aGVtIGhlcmUuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0Y29uc3QgbWF0Y2hlc1NlbGVjdG9yID0gWydCVVRUT04nLCAnSU5QVVQnLCAnU0VMRUNUJywgJ1RFWFRBUkVBJywgJ0ZJRUxEU0VUJ107XG5cdGlmIChldmVudE5hbWUgPT09ICdjbGljaycgJiYgbWF0Y2hlc1NlbGVjdG9yLmluZGV4T2Yobm9kZS50YWdOYW1lKSA+IC0xKSB7XG5cdFx0cmV0dXJuICEobm9kZS5kaXNhYmxlZCB8fCBwYXJlbnQobm9kZSwgJ2ZpZWxkc2V0W2Rpc2FibGVkXScpKTtcblx0fVxuXHRyZXR1cm4gdHJ1ZTtcbn1cblxuLyoqXG4gKiBJbnNlcnRzIG5vZGUgaW4gZG9jdW1lbnQgYXMgbGFzdCBlbGVtZW50LlxuICogQHBhcmFtIHtFbGVtZW50fSBub2RlIEVsZW1lbnQgdG8gcmVtb3ZlIGNoaWxkcmVuIGZyb20uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlbnRlckRvY3VtZW50KG5vZGUpIHtcblx0bm9kZSAmJiBhcHBlbmQoZG9jdW1lbnQuYm9keSwgbm9kZSk7XG59XG5cbi8qKlxuICogUmVtb3ZlcyBub2RlIGZyb20gZG9jdW1lbnQuXG4gKiBAcGFyYW0ge0VsZW1lbnR9IG5vZGUgRWxlbWVudCB0byByZW1vdmUgY2hpbGRyZW4gZnJvbS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGV4aXREb2N1bWVudChub2RlKSB7XG5cdGlmIChub2RlICYmIG5vZGUucGFyZW50Tm9kZSkge1xuXHRcdG5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChub2RlKTtcblx0fVxufVxuXG4vKipcbiAqIFRoaXMgaXMgY2FsbGVkIHdoZW4gYW4gZXZlbnQgaXMgdHJpZ2dlcmVkIGJ5IGEgZGVsZWdhdGUgbGlzdGVuZXIuIEFsbFxuICogbWF0Y2hpbmcgbGlzdGVuZXJzIG9mIHRoaXMgZXZlbnQgdHlwZSBmcm9tIGB0YXJnZXRgIHRvIGBjdXJyZW50VGFyZ2V0YCB3aWxsXG4gKiBiZSB0cmlnZ2VyZWQuXG4gKiBAcGFyYW0geyFFdmVudH0gZXZlbnQgVGhlIGV2ZW50IHBheWxvYWQuXG4gKiBAcmV0dXJuIHtib29sZWFufSBGYWxzZSBpZiBhdCBsZWFzdCBvbmUgb2YgdGhlIHRyaWdnZXJlZCBjYWxsYmFja3MgcmV0dXJuc1xuICogICAgIGZhbHNlLCBvciB0cnVlIG90aGVyd2lzZS5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGhhbmRsZURlbGVnYXRlRXZlbnRfKGV2ZW50KSB7XG5cdG5vcm1hbGl6ZURlbGVnYXRlRXZlbnRfKGV2ZW50KTtcblx0bGV0IHJldCA9IHRydWU7XG5cdGNvbnN0IGNvbnRhaW5lciA9IGV2ZW50LmN1cnJlbnRUYXJnZXQ7XG5cdGNvbnN0IGRlZkZucyA9IFtdO1xuXG5cdHJldCAmPSB0cmlnZ2VyRGVsZWdhdGVkTGlzdGVuZXJzXyhjb250YWluZXIsIGV2ZW50LCBkZWZGbnMpO1xuXHRyZXQgJj0gdHJpZ2dlckRlZmF1bHREZWxlZ2F0ZWRMaXN0ZW5lcnNfKGRlZkZucywgZXZlbnQpO1xuXG5cdGV2ZW50LmRlbGVnYXRlVGFyZ2V0ID0gbnVsbDtcblx0ZXZlbnRbTEFTVF9DT05UQUlORVJdID0gY29udGFpbmVyO1xuXHRyZXR1cm4gcmV0O1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiB0aGUgZ2l2ZW4gZWxlbWVudCBoYXMgdGhlIHJlcXVlc3RlZCBjc3MgY2xhc3MuXG4gKiBAcGFyYW0geyFFbGVtZW50fSBlbGVtZW50XG4gKiBAcGFyYW0ge3N0cmluZ30gY2xhc3NOYW1lXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gaGFzQ2xhc3MoZWxlbWVudCwgY2xhc3NOYW1lKSB7XG5cdGlmICgnY2xhc3NMaXN0JyBpbiBlbGVtZW50KSB7XG5cdFx0cmV0dXJuIGhhc0NsYXNzV2l0aE5hdGl2ZV8oZWxlbWVudCwgY2xhc3NOYW1lKTtcblx0fSBlbHNlIHtcblx0XHRyZXR1cm4gaGFzQ2xhc3NXaXRob3V0TmF0aXZlXyhlbGVtZW50LCBjbGFzc05hbWUpO1xuXHR9XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIHRoZSBnaXZlbiBlbGVtZW50IGhhcyB0aGUgcmVxdWVzdGVkIGNzcyBjbGFzcyB1c2luZyBjbGFzc0xpc3QuXG4gKiBAcGFyYW0geyFFbGVtZW50fSBlbGVtZW50XG4gKiBAcGFyYW0ge3N0cmluZ30gY2xhc3NOYW1lXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gaGFzQ2xhc3NXaXRoTmF0aXZlXyhlbGVtZW50LCBjbGFzc05hbWUpIHtcblx0cmV0dXJuIGVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKGNsYXNzTmFtZSk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIHRoZSBnaXZlbiBlbGVtZW50IGhhcyB0aGUgcmVxdWVzdGVkIGNzcyBjbGFzcyB3aXRob3V0IHVzaW5nIGNsYXNzTGlzdC5cbiAqIEBwYXJhbSB7IUVsZW1lbnR9IGVsZW1lbnRcbiAqIEBwYXJhbSB7c3RyaW5nfSBjbGFzc05hbWVcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBoYXNDbGFzc1dpdGhvdXROYXRpdmVfKGVsZW1lbnQsIGNsYXNzTmFtZSkge1xuXHRyZXR1cm4gKGAgJHtlbGVtZW50LmNsYXNzTmFtZX0gYCkuaW5kZXhPZihgICR7Y2xhc3NOYW1lfSBgKSA+PSAwO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiB0aGUgZ2l2ZW4gZWxlbWVudCBpcyBlbXB0eSBvciBub3QuXG4gKiBAcGFyYW0geyFFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNFbXB0eShlbGVtZW50KSB7XG5cdHJldHVybiBlbGVtZW50LmNoaWxkTm9kZXMubGVuZ3RoID09PSAwO1xufVxuXG4vKipcbiAqIENoZWNrIGlmIGFuIGVsZW1lbnQgbWF0Y2hlcyBhIGdpdmVuIHNlbGVjdG9yLlxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcGFyYW0ge3N0cmluZ30gc2VsZWN0b3JcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtYXRjaChlbGVtZW50LCBzZWxlY3Rvcikge1xuXHRpZiAoIWVsZW1lbnQgfHwgZWxlbWVudC5ub2RlVHlwZSAhPT0gMSkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdGNvbnN0IHAgPSBFbGVtZW50LnByb3RvdHlwZTtcblx0Y29uc3QgbSA9IHAubWF0Y2hlcyB8fCBwLndlYmtpdE1hdGNoZXNTZWxlY3RvciB8fCBwLm1vek1hdGNoZXNTZWxlY3RvciB8fCBwLm1zTWF0Y2hlc1NlbGVjdG9yIHx8IHAub01hdGNoZXNTZWxlY3Rvcjtcblx0aWYgKG0pIHtcblx0XHRyZXR1cm4gbS5jYWxsKGVsZW1lbnQsIHNlbGVjdG9yKTtcblx0fVxuXG5cdHJldHVybiBtYXRjaEZhbGxiYWNrXyhlbGVtZW50LCBzZWxlY3Rvcik7XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgYW4gZWxlbWVudCBtYXRjaGVzIGEgZ2l2ZW4gc2VsZWN0b3IsIHVzaW5nIGFuIGludGVybmFsIGltcGxlbWVudGF0aW9uXG4gKiBpbnN0ZWFkIG9mIGNhbGxpbmcgZXhpc3RpbmcgamF2YXNjcmlwdCBmdW5jdGlvbnMuXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEBwYXJhbSB7c3RyaW5nfSBzZWxlY3RvclxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIG1hdGNoRmFsbGJhY2tfKGVsZW1lbnQsIHNlbGVjdG9yKSB7XG5cdGNvbnN0IG5vZGVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvciwgZWxlbWVudC5wYXJlbnROb2RlKTtcblx0Zm9yIChsZXQgaSA9IDA7IGkgPCBub2Rlcy5sZW5ndGg7ICsraSkge1xuXHRcdGlmIChub2Rlc1tpXSA9PT0gZWxlbWVudCkge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBuZXh0IHNpYmxpbmcgb2YgdGhlIGdpdmVuIGVsZW1lbnQgdGhhdCBtYXRjaGVzIHRoZSBzcGVjaWZpZWRcbiAqIHNlbGVjdG9yLCBvciBudWxsIGlmIHRoZXJlIGlzIG5vbmUuXG4gKiBAcGFyYW0geyFFbGVtZW50fSBlbGVtZW50XG4gKiBAcGFyYW0gez9zdHJpbmd9IHNlbGVjdG9yXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBuZXh0KGVsZW1lbnQsIHNlbGVjdG9yKSB7XG5cdGRvIHtcblx0XHRlbGVtZW50ID0gZWxlbWVudC5uZXh0U2libGluZztcblx0XHRpZiAoZWxlbWVudCAmJiBtYXRjaChlbGVtZW50LCBzZWxlY3RvcikpIHtcblx0XHRcdHJldHVybiBlbGVtZW50O1xuXHRcdH1cblx0fSB3aGlsZSAoZWxlbWVudCk7XG5cdHJldHVybiBudWxsO1xufVxuXG4vKipcbiAqIE5vcm1hbGl6ZXMgdGhlIGV2ZW50IHBheWxvYWQgZm9yIGRlbGVnYXRlIGxpc3RlbmVycy5cbiAqIEBwYXJhbSB7IUV2ZW50fSBldmVudFxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplRGVsZWdhdGVFdmVudF8oZXZlbnQpIHtcblx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uID0gc3RvcFByb3BhZ2F0aW9uXztcblx0ZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uID0gc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uXztcbn1cblxuLyoqXG4gKiBMaXN0ZW5zIHRvIHRoZSBzcGVjaWZpZWQgZXZlbnQgb24gdGhlIGdpdmVuIERPTSBlbGVtZW50LiBUaGlzIGZ1bmN0aW9uIG5vcm1hbGl6ZXNcbiAqIERPTSBldmVudCBwYXlsb2FkcyBhbmQgZnVuY3Rpb25zIHNvIHRoZXknbGwgd29yayB0aGUgc2FtZSB3YXkgb24gYWxsIHN1cHBvcnRlZFxuICogYnJvd3NlcnMuXG4gKiBAcGFyYW0geyFFbGVtZW50fHN0cmluZ30gZWxlbWVudCBUaGUgRE9NIGVsZW1lbnQgdG8gbGlzdGVuIHRvIHRoZSBldmVudCBvbiwgb3JcbiAqICAgYSBzZWxlY3RvciB0aGF0IHNob3VsZCBiZSBkZWxlZ2F0ZWQgb24gdGhlIGVudGlyZSBkb2N1bWVudC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBldmVudE5hbWUgVGhlIG5hbWUgb2YgdGhlIGV2ZW50IHRvIGxpc3RlbiB0by5cbiAqIEBwYXJhbSB7IWZ1bmN0aW9uKCFPYmplY3QpfSBjYWxsYmFjayBGdW5jdGlvbiB0byBiZSBjYWxsZWQgd2hlbiB0aGUgZXZlbnQgaXNcbiAqICAgdHJpZ2dlcmVkLiBJdCB3aWxsIHJlY2VpdmUgdGhlIG5vcm1hbGl6ZWQgZXZlbnQgb2JqZWN0LlxuICogQHBhcmFtIHtib29sZWFufSBvcHRfY2FwdHVyZSBGbGFnIGluZGljYXRpbmcgaWYgbGlzdGVuZXIgc2hvdWxkIGJlIHRyaWdnZXJlZFxuICogICBkdXJpbmcgY2FwdHVyZSBwaGFzZSwgaW5zdGVhZCBvZiBkdXJpbmcgdGhlIGJ1YmJsaW5nIHBoYXNlLiBEZWZhdWx0cyB0byBmYWxzZS5cbiAqIEByZXR1cm4geyFEb21FdmVudEhhbmRsZX0gQ2FuIGJlIHVzZWQgdG8gcmVtb3ZlIHRoZSBsaXN0ZW5lci5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG9uKGVsZW1lbnQsIGV2ZW50TmFtZSwgY2FsbGJhY2ssIG9wdF9jYXB0dXJlKSB7XG5cdGlmIChpc1N0cmluZyhlbGVtZW50KSkge1xuXHRcdHJldHVybiBkZWxlZ2F0ZShkb2N1bWVudCwgZXZlbnROYW1lLCBlbGVtZW50LCBjYWxsYmFjayk7XG5cdH1cblx0Y29uc3QgY3VzdG9tQ29uZmlnID0gY3VzdG9tRXZlbnRzW2V2ZW50TmFtZV07XG5cdGlmIChjdXN0b21Db25maWcgJiYgY3VzdG9tQ29uZmlnLmV2ZW50KSB7XG5cdFx0ZXZlbnROYW1lID0gY3VzdG9tQ29uZmlnLm9yaWdpbmFsRXZlbnQ7XG5cdFx0Y2FsbGJhY2sgPSBjdXN0b21Db25maWcuaGFuZGxlci5iaW5kKGN1c3RvbUNvbmZpZywgY2FsbGJhY2spO1xuXHR9XG5cdGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGNhbGxiYWNrLCBvcHRfY2FwdHVyZSk7XG5cdHJldHVybiBuZXcgRG9tRXZlbnRIYW5kbGUoZWxlbWVudCwgZXZlbnROYW1lLCBjYWxsYmFjaywgb3B0X2NhcHR1cmUpO1xufVxuXG4vKipcbiAqIExpc3RlbnMgdG8gdGhlIHNwZWNpZmllZCBldmVudCBvbiB0aGUgZ2l2ZW4gRE9NIGVsZW1lbnQgb25jZS4gVGhpc1xuICogZnVuY3Rpb24gbm9ybWFsaXplcyBET00gZXZlbnQgcGF5bG9hZHMgYW5kIGZ1bmN0aW9ucyBzbyB0aGV5J2xsIHdvcmsgdGhlXG4gKiBzYW1lIHdheSBvbiBhbGwgc3VwcG9ydGVkIGJyb3dzZXJzLlxuICogQHBhcmFtIHshRWxlbWVudH0gZWxlbWVudCBUaGUgRE9NIGVsZW1lbnQgdG8gbGlzdGVuIHRvIHRoZSBldmVudCBvbi5cbiAqIEBwYXJhbSB7c3RyaW5nfSBldmVudE5hbWUgVGhlIG5hbWUgb2YgdGhlIGV2ZW50IHRvIGxpc3RlbiB0by5cbiAqIEBwYXJhbSB7IWZ1bmN0aW9uKCFPYmplY3QpfSBjYWxsYmFjayBGdW5jdGlvbiB0byBiZSBjYWxsZWQgd2hlbiB0aGUgZXZlbnRcbiAqICAgaXMgdHJpZ2dlcmVkLiBJdCB3aWxsIHJlY2VpdmUgdGhlIG5vcm1hbGl6ZWQgZXZlbnQgb2JqZWN0LlxuICogQHJldHVybiB7IURvbUV2ZW50SGFuZGxlfSBDYW4gYmUgdXNlZCB0byByZW1vdmUgdGhlIGxpc3RlbmVyLlxuICovXG5leHBvcnQgZnVuY3Rpb24gb25jZShlbGVtZW50LCBldmVudE5hbWUsIGNhbGxiYWNrKSB7XG5cdGNvbnN0IGRvbUV2ZW50SGFuZGxlID0gb24oZWxlbWVudCwgZXZlbnROYW1lLCBmdW5jdGlvbigpIHtcblx0XHRkb21FdmVudEhhbmRsZS5yZW1vdmVMaXN0ZW5lcigpO1xuXHRcdHJldHVybiBjYWxsYmFjay5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHR9KTtcblx0cmV0dXJuIGRvbUV2ZW50SGFuZGxlO1xufVxuXG4vKipcbiAqIEdldHMgdGhlIGZpcnN0IHBhcmVudCBmcm9tIHRoZSBnaXZlbiBlbGVtZW50IHRoYXQgbWF0Y2hlcyB0aGUgc3BlY2lmaWVkXG4gKiBzZWxlY3Rvciwgb3IgbnVsbCBpZiBub25lIG1hdGNoLlxuICogQHBhcmFtIHshRWxlbWVudH0gZWxlbWVudFxuICogQHBhcmFtIHtzdHJpbmd9IHNlbGVjdG9yXG4gKiBAcmV0dXJuIHtFbGVtZW50fVxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyZW50KGVsZW1lbnQsIHNlbGVjdG9yKSB7XG5cdHJldHVybiBjbG9zZXN0KGVsZW1lbnQucGFyZW50Tm9kZSwgc2VsZWN0b3IpO1xufVxuXG4vKipcbiAqIFJlZ2lzdGVycyBhIGN1c3RvbSBldmVudC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBldmVudE5hbWUgVGhlIG5hbWUgb2YgdGhlIGN1c3RvbSBldmVudC5cbiAqIEBwYXJhbSB7IU9iamVjdH0gY3VzdG9tQ29uZmlnIEFuIG9iamVjdCB3aXRoIGluZm9ybWF0aW9uIGFib3V0IGhvdyB0aGUgZXZlbnRcbiAqICAgc2hvdWxkIGJlIGhhbmRsZWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZWdpc3RlckN1c3RvbUV2ZW50KGV2ZW50TmFtZSwgY3VzdG9tQ29uZmlnKSB7XG5cdGN1c3RvbUV2ZW50c1tldmVudE5hbWVdID0gY3VzdG9tQ29uZmlnO1xufVxuXG4vKipcbiAqIFJlbW92ZXMgYWxsIHRoZSBjaGlsZCBub2RlcyBvbiBhIERPTSBub2RlLlxuICogQHBhcmFtIHtFbGVtZW50fSBub2RlIEVsZW1lbnQgdG8gcmVtb3ZlIGNoaWxkcmVuIGZyb20uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVDaGlsZHJlbihub2RlKSB7XG5cdGxldCBjaGlsZDtcblx0d2hpbGUgKChjaGlsZCA9IG5vZGUuZmlyc3RDaGlsZCkpIHtcblx0XHRub2RlLnJlbW92ZUNoaWxkKGNoaWxkKTtcblx0fVxufVxuXG4vKipcbiAqIFJlbW92ZXMgdGhlIHJlcXVlc3RlZCBDU1MgY2xhc3NlcyBmcm9tIGFuIGVsZW1lbnQuXG4gKiBAcGFyYW0geyFFbGVtZW50fCFOb2RlTGlzdH0gZWxlbWVudHMgVGhlIGVsZW1lbnQgb3IgZWxlbWVudHMgdG8gcmVtb3ZlIENTUyBjbGFzc2VzIGZyb20uXG4gKiBAcGFyYW0ge3N0cmluZ30gY2xhc3NlcyBDU1MgY2xhc3NlcyB0byByZW1vdmUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVDbGFzc2VzKGVsZW1lbnRzLCBjbGFzc2VzKSB7XG5cdGlmICghaXNPYmplY3QoZWxlbWVudHMpIHx8ICFpc1N0cmluZyhjbGFzc2VzKSkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdGlmICghZWxlbWVudHMubGVuZ3RoKSB7XG5cdFx0ZWxlbWVudHMgPSBbZWxlbWVudHNdO1xuXHR9XG5cblx0Zm9yIChsZXQgaSA9IDA7IGkgPCBlbGVtZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdGlmICgnY2xhc3NMaXN0JyBpbiBlbGVtZW50c1tpXSkge1xuXHRcdFx0cmVtb3ZlQ2xhc3Nlc1dpdGhOYXRpdmVfKGVsZW1lbnRzW2ldLCBjbGFzc2VzKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmVtb3ZlQ2xhc3Nlc1dpdGhvdXROYXRpdmVfKGVsZW1lbnRzW2ldLCBjbGFzc2VzKTtcblx0XHR9XG5cdH1cbn1cblxuLyoqXG4gKiBSZW1vdmVzIHRoZSByZXF1ZXN0ZWQgQ1NTIGNsYXNzZXMgZnJvbSBhbiBlbGVtZW50IHVzaW5nIGNsYXNzTGlzdC5cbiAqIEBwYXJhbSB7IUVsZW1lbnR9IGVsZW1lbnQgVGhlIGVsZW1lbnQgdG8gcmVtb3ZlIENTUyBjbGFzc2VzIGZyb20uXG4gKiBAcGFyYW0ge3N0cmluZ30gY2xhc3NlcyBDU1MgY2xhc3NlcyB0byByZW1vdmUuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiByZW1vdmVDbGFzc2VzV2l0aE5hdGl2ZV8oZWxlbWVudCwgY2xhc3Nlcykge1xuXHRjbGFzc2VzLnNwbGl0KCcgJykuZm9yRWFjaChmdW5jdGlvbihjbGFzc05hbWUpIHtcblx0XHRpZiAoY2xhc3NOYW1lKSB7XG5cdFx0XHRlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NOYW1lKTtcblx0XHR9XG5cdH0pO1xufVxuXG4vKipcbiAqIFJlbW92ZXMgdGhlIHJlcXVlc3RlZCBDU1MgY2xhc3NlcyBmcm9tIGFuIGVsZW1lbnQgd2l0aG91dCB1c2luZyBjbGFzc0xpc3QuXG4gKiBAcGFyYW0geyFFbGVtZW50fSBlbGVtZW50IFRoZSBlbGVtZW50IHRvIHJlbW92ZSBDU1MgY2xhc3NlcyBmcm9tLlxuICogQHBhcmFtIHtzdHJpbmd9IGNsYXNzZXMgQ1NTIGNsYXNzZXMgdG8gcmVtb3ZlLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gcmVtb3ZlQ2xhc3Nlc1dpdGhvdXROYXRpdmVfKGVsZW1lbnQsIGNsYXNzZXMpIHtcblx0bGV0IGVsZW1lbnRDbGFzc05hbWUgPSBgICR7ZWxlbWVudC5jbGFzc05hbWV9IGA7XG5cblx0Y2xhc3NlcyA9IGNsYXNzZXMuc3BsaXQoJyAnKTtcblxuXHRmb3IgKGxldCBpID0gMDsgaSA8IGNsYXNzZXMubGVuZ3RoOyBpKyspIHtcblx0XHRlbGVtZW50Q2xhc3NOYW1lID0gZWxlbWVudENsYXNzTmFtZS5yZXBsYWNlKGAgJHtjbGFzc2VzW2ldfSBgLCAnICcpO1xuXHR9XG5cblx0ZWxlbWVudC5jbGFzc05hbWUgPSBlbGVtZW50Q2xhc3NOYW1lLnRyaW0oKTtcbn1cblxuLyoqXG4gKiBSZXBsYWNlcyB0aGUgZmlyc3QgZWxlbWVudCB3aXRoIHRoZSBzZWNvbmQuXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQxXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQyXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZXBsYWNlKGVsZW1lbnQxLCBlbGVtZW50Mikge1xuXHRpZiAoZWxlbWVudDEgJiYgZWxlbWVudDIgJiYgZWxlbWVudDEgIT09IGVsZW1lbnQyICYmIGVsZW1lbnQxLnBhcmVudE5vZGUpIHtcblx0XHRlbGVtZW50MS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShlbGVtZW50MiwgZWxlbWVudDEpO1xuXHRcdGVsZW1lbnQxLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZWxlbWVudDEpO1xuXHR9XG59XG5cbi8qKlxuICogVGhlIGZ1bmN0aW9uIHRoYXQgcmVwbGFjZXMgYHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbl9gIGZvciBldmVudHMuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb25fKCkge1xuXHRjb25zdCBldmVudCA9IHRoaXM7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblx0ZXZlbnQuc3RvcHBlZCA9IHRydWU7XG5cdGV2ZW50LnN0b3BwZWRJbW1lZGlhdGUgPSB0cnVlO1xuXHRFdmVudC5wcm90b3R5cGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uLmNhbGwoZXZlbnQpO1xufVxuXG4vKipcbiAqIFRoZSBmdW5jdGlvbiB0aGF0IHJlcGxhY2VzIGBzdG9wUHJvcGFnYXRpb25gIGZvciBldmVudHMuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBzdG9wUHJvcGFnYXRpb25fKCkge1xuXHRjb25zdCBldmVudCA9IHRoaXM7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblx0ZXZlbnQuc3RvcHBlZCA9IHRydWU7XG5cdEV2ZW50LnByb3RvdHlwZS5zdG9wUHJvcGFnYXRpb24uY2FsbChldmVudCk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIHRoZSBnaXZlbiBlbGVtZW50IHN1cHBvcnRzIHRoZSBnaXZlbiBldmVudCB0eXBlLlxuICogQHBhcmFtIHshRWxlbWVudHxzdHJpbmd9IGVsZW1lbnQgVGhlIERPTSBlbGVtZW50IG9yIGVsZW1lbnQgdGFnIG5hbWUgdG8gY2hlY2suXG4gKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lIFRoZSBuYW1lIG9mIHRoZSBldmVudCB0byBjaGVjay5cbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdXBwb3J0c0V2ZW50KGVsZW1lbnQsIGV2ZW50TmFtZSkge1xuXHRpZiAoY3VzdG9tRXZlbnRzW2V2ZW50TmFtZV0pIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdGlmIChpc1N0cmluZyhlbGVtZW50KSkge1xuXHRcdGlmICghZWxlbWVudHNCeVRhZ19bZWxlbWVudF0pIHtcblx0XHRcdGVsZW1lbnRzQnlUYWdfW2VsZW1lbnRdID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChlbGVtZW50KTtcblx0XHR9XG5cdFx0ZWxlbWVudCA9IGVsZW1lbnRzQnlUYWdfW2VsZW1lbnRdO1xuXHR9XG5cblx0Y29uc3QgdGFnID0gZWxlbWVudC50YWdOYW1lO1xuXHRpZiAoIXN1cHBvcnRDYWNoZV9bdGFnXSB8fCAhc3VwcG9ydENhY2hlX1t0YWddLmhhc093blByb3BlcnR5KGV2ZW50TmFtZSkpIHtcblx0XHRzdXBwb3J0Q2FjaGVfW3RhZ10gPSBzdXBwb3J0Q2FjaGVfW3RhZ10gfHwge307XG5cdFx0c3VwcG9ydENhY2hlX1t0YWddW2V2ZW50TmFtZV0gPSAnb24nICsgZXZlbnROYW1lIGluIGVsZW1lbnQ7XG5cdH1cblx0cmV0dXJuIHN1cHBvcnRDYWNoZV9bdGFnXVtldmVudE5hbWVdO1xufVxuXG4vKipcbiAqIFRoaXMgdHJpZ2dlcnMgYWxsIGRlZmF1bHQgbWF0Y2hlZCBkZWxlZ2F0ZWQgbGlzdGVuZXJzIG9mIGEgZ2l2ZW4gZXZlbnQgdHlwZS5cbiAqIEBwYXJhbSB7IUFycmF5fSBkZWZhdWx0Rm5zIEFycmF5IHRvIGNvbGxlY3QgZGVmYXVsdCBsaXN0ZW5lcnMgaW4sIGluc3RlYWRcbiAqIEBwYXJhbSB7IUV2ZW50fSBldmVudFxuICogQHJldHVybiB7Ym9vbGVhbn0gRmFsc2UgaWYgYXQgbGVhc3Qgb25lIG9mIHRoZSB0cmlnZ2VyZWQgY2FsbGJhY2tzIHJldHVybnNcbiAqICAgICBmYWxzZSwgb3IgdHJ1ZSBvdGhlcndpc2UuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiB0cmlnZ2VyRGVmYXVsdERlbGVnYXRlZExpc3RlbmVyc18oZGVmRm5zLCBldmVudCkge1xuXHRsZXQgcmV0ID0gdHJ1ZTtcblxuXHRmb3IgKGxldCBpID0gMDsgaSA8IGRlZkZucy5sZW5ndGggJiYgIWV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQ7IGkrKykge1xuXHRcdGV2ZW50LmRlbGVnYXRlVGFyZ2V0ID0gZGVmRm5zW2ldLmVsZW1lbnQ7XG5cdFx0cmV0ICY9IGRlZkZuc1tpXS5mbihldmVudCk7XG5cdH1cblxuXHRyZXR1cm4gcmV0O1xufVxuXG4vKipcbiAqIFRoaXMgdHJpZ2dlcnMgYWxsIG1hdGNoZWQgZGVsZWdhdGVkIGxpc3RlbmVycyBvZiBhIGdpdmVuIGV2ZW50IHR5cGUgd2hlbiBpdHNcbiAqIGRlbGVnYXRlZCB0YXJnZXQgaXMgYWJsZSB0byBpbnRlcmFjdC5cbiAqIEBwYXJhbSB7IUVsZW1lbnR9IGNvbnRhaW5lclxuICogQHBhcmFtIHshRXZlbnR9IGV2ZW50XG4gKiBAcGFyYW0geyFBcnJheX0gZGVmYXVsdEZucyBBcnJheSB0byBjb2xsZWN0IGRlZmF1bHQgbGlzdGVuZXJzIGluLCBpbnN0ZWFkXG4gKiAgICAgb2YgcnVubmluZyB0aGVtLlxuICogQHJldHVybiB7Ym9vbGVhbn0gRmFsc2UgaWYgYXQgbGVhc3Qgb25lIG9mIHRoZSB0cmlnZ2VyZWQgY2FsbGJhY2tzIHJldHVybnNcbiAqICAgICBmYWxzZSwgb3IgdHJ1ZSBvdGhlcndpc2UuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiB0cmlnZ2VyRGVsZWdhdGVkTGlzdGVuZXJzXyhjb250YWluZXIsIGV2ZW50LCBkZWZhdWx0Rm5zKSB7XG5cdGxldCByZXQgPSB0cnVlO1xuXHRsZXQgY3VyckVsZW1lbnQgPSBldmVudC50YXJnZXQ7XG5cdGNvbnN0IGxpbWl0ID0gY29udGFpbmVyLnBhcmVudE5vZGU7XG5cblx0d2hpbGUgKGN1cnJFbGVtZW50ICYmIGN1cnJFbGVtZW50ICE9PSBsaW1pdCAmJiAhZXZlbnQuc3RvcHBlZCkge1xuXHRcdGlmIChpc0FibGVUb0ludGVyYWN0V2l0aF8oY3VyckVsZW1lbnQsIGV2ZW50LnR5cGUsIGV2ZW50KSkge1xuXHRcdFx0ZXZlbnQuZGVsZWdhdGVUYXJnZXQgPSBjdXJyRWxlbWVudDtcblx0XHRcdHJldCAmPSB0cmlnZ2VyRWxlbWVudExpc3RlbmVyc18oY3VyckVsZW1lbnQsIGV2ZW50LCBkZWZhdWx0Rm5zKTtcblx0XHRcdHJldCAmPSB0cmlnZ2VyU2VsZWN0b3JMaXN0ZW5lcnNfKGNvbnRhaW5lciwgY3VyckVsZW1lbnQsIGV2ZW50LCBkZWZhdWx0Rm5zKTtcblx0XHR9XG5cdFx0Y3VyckVsZW1lbnQgPSBjdXJyRWxlbWVudC5wYXJlbnROb2RlO1xuXHR9XG5cblx0cmV0dXJuIHJldDtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyB0aGUgZ2l2ZW4gYXJndW1lbnQgdG8gYSBET00gZWxlbWVudC4gU3RyaW5ncyBhcmUgYXNzdW1lZCB0b1xuICogYmUgc2VsZWN0b3JzLCBhbmQgc28gYSBtYXRjaGVkIGVsZW1lbnQgd2lsbCBiZSByZXR1cm5lZC4gSWYgdGhlIGFyZ1xuICogaXMgYWxyZWFkeSBhIERPTSBlbGVtZW50IGl0IHdpbGwgYmUgdGhlIHJldHVybiB2YWx1ZS5cbiAqIEBwYXJhbSB7c3RyaW5nfEVsZW1lbnR8RG9jdW1lbnR9IHNlbGVjdG9yT3JFbGVtZW50XG4gKiBAcmV0dXJuIHtFbGVtZW50fSBUaGUgY29udmVydGVkIGVsZW1lbnQsIG9yIG51bGwgaWYgbm9uZSB3YXMgZm91bmQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0b0VsZW1lbnQoc2VsZWN0b3JPckVsZW1lbnQpIHtcblx0aWYgKGlzRWxlbWVudChzZWxlY3Rvck9yRWxlbWVudCkgfHwgaXNEb2N1bWVudChzZWxlY3Rvck9yRWxlbWVudCkgfHwgaXNEb2N1bWVudEZyYWdtZW50KHNlbGVjdG9yT3JFbGVtZW50KSkge1xuXHRcdHJldHVybiBzZWxlY3Rvck9yRWxlbWVudDtcblx0fSBlbHNlIGlmIChpc1N0cmluZyhzZWxlY3Rvck9yRWxlbWVudCkpIHtcblx0XHRpZiAoc2VsZWN0b3JPckVsZW1lbnRbMF0gPT09ICcjJyAmJiBzZWxlY3Rvck9yRWxlbWVudC5pbmRleE9mKCcgJykgPT09IC0xKSB7XG5cdFx0XHRyZXR1cm4gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoc2VsZWN0b3JPckVsZW1lbnQuc3Vic3RyKDEpKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3JPckVsZW1lbnQpO1xuXHRcdH1cblx0fSBlbHNlIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxufVxuXG4vKipcbiAqIEFkZHMgb3IgcmVtb3ZlcyBvbmUgb3IgbW9yZSBjbGFzc2VzIGZyb20gYW4gZWxlbWVudC4gSWYgYW55IG9mIHRoZSBjbGFzc2VzXG4gKiBpcyBwcmVzZW50LCBpdCB3aWxsIGJlIHJlbW92ZWQgZnJvbSB0aGUgZWxlbWVudCwgb3IgYWRkZWQgb3RoZXJ3aXNlLlxuICogQHBhcmFtIHshRWxlbWVudH0gZWxlbWVudCBUaGUgZWxlbWVudCB3aGljaCBjbGFzc2VzIHdpbGwgYmUgdG9nZ2xlZC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBjbGFzc2VzIFRoZSBjbGFzc2VzIHdoaWNoIGhhdmUgdG8gYWRkZWQgb3IgcmVtb3ZlZCBmcm9tIHRoZSBlbGVtZW50LlxuICovXG5leHBvcnQgZnVuY3Rpb24gdG9nZ2xlQ2xhc3NlcyhlbGVtZW50LCBjbGFzc2VzKSB7XG5cdGlmICghaXNPYmplY3QoZWxlbWVudCkgfHwgIWlzU3RyaW5nKGNsYXNzZXMpKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0aWYgKCdjbGFzc0xpc3QnIGluIGVsZW1lbnQpIHtcblx0XHR0b2dnbGVDbGFzc2VzV2l0aE5hdGl2ZV8oZWxlbWVudCwgY2xhc3Nlcyk7XG5cdH0gZWxzZSB7XG5cdFx0dG9nZ2xlQ2xhc3Nlc1dpdGhvdXROYXRpdmVfKGVsZW1lbnQsIGNsYXNzZXMpO1xuXHR9XG59XG5cbi8qKlxuICogQWRkcyBvciByZW1vdmVzIG9uZSBvciBtb3JlIGNsYXNzZXMgZnJvbSBhbiBlbGVtZW50IHVzaW5nIGNsYXNzTGlzdC5cbiAqIElmIGFueSBvZiB0aGUgY2xhc3NlcyBpcyBwcmVzZW50LCBpdCB3aWxsIGJlIHJlbW92ZWQgZnJvbSB0aGUgZWxlbWVudCxcbiAqIG9yIGFkZGVkIG90aGVyd2lzZS5cbiAqIEBwYXJhbSB7IUVsZW1lbnR9IGVsZW1lbnQgVGhlIGVsZW1lbnQgd2hpY2ggY2xhc3NlcyB3aWxsIGJlIHRvZ2dsZWQuXG4gKiBAcGFyYW0ge3N0cmluZ30gY2xhc3NlcyBUaGUgY2xhc3NlcyB3aGljaCBoYXZlIHRvIGFkZGVkIG9yIHJlbW92ZWQgZnJvbSB0aGUgZWxlbWVudC5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHRvZ2dsZUNsYXNzZXNXaXRoTmF0aXZlXyhlbGVtZW50LCBjbGFzc2VzKSB7XG5cdGNsYXNzZXMuc3BsaXQoJyAnKS5mb3JFYWNoKGZ1bmN0aW9uKGNsYXNzTmFtZSkge1xuXHRcdGVsZW1lbnQuY2xhc3NMaXN0LnRvZ2dsZShjbGFzc05hbWUpO1xuXHR9KTtcbn1cblxuLyoqXG4gKiBBZGRzIG9yIHJlbW92ZXMgb25lIG9yIG1vcmUgY2xhc3NlcyBmcm9tIGFuIGVsZW1lbnQgd2l0aG91dCB1c2luZyBjbGFzc0xpc3QuXG4gKiBJZiBhbnkgb2YgdGhlIGNsYXNzZXMgaXMgcHJlc2VudCwgaXQgd2lsbCBiZSByZW1vdmVkIGZyb20gdGhlIGVsZW1lbnQsXG4gKiBvciBhZGRlZCBvdGhlcndpc2UuXG4gKiBAcGFyYW0geyFFbGVtZW50fSBlbGVtZW50IFRoZSBlbGVtZW50IHdoaWNoIGNsYXNzZXMgd2lsbCBiZSB0b2dnbGVkLlxuICogQHBhcmFtIHtzdHJpbmd9IGNsYXNzZXMgVGhlIGNsYXNzZXMgd2hpY2ggaGF2ZSB0byBhZGRlZCBvciByZW1vdmVkIGZyb20gdGhlIGVsZW1lbnQuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiB0b2dnbGVDbGFzc2VzV2l0aG91dE5hdGl2ZV8oZWxlbWVudCwgY2xhc3Nlcykge1xuXHRsZXQgZWxlbWVudENsYXNzTmFtZSA9IGAgJHtlbGVtZW50LmNsYXNzTmFtZX0gYDtcblxuXHRjbGFzc2VzID0gY2xhc3Nlcy5zcGxpdCgnICcpO1xuXG5cdGZvciAobGV0IGkgPSAwOyBpIDwgY2xhc3Nlcy5sZW5ndGg7IGkrKykge1xuXHRcdGNvbnN0IGNsYXNzTmFtZSA9IGAgJHtjbGFzc2VzW2ldfSBgO1xuXHRcdGNvbnN0IGNsYXNzSW5kZXggPSBlbGVtZW50Q2xhc3NOYW1lLmluZGV4T2YoY2xhc3NOYW1lKTtcblxuXHRcdGlmIChjbGFzc0luZGV4ID09PSAtMSkge1xuXHRcdFx0ZWxlbWVudENsYXNzTmFtZSA9IGAke2VsZW1lbnRDbGFzc05hbWV9JHtjbGFzc2VzW2ldfSBgO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb25zdCBiZWZvcmUgPSBlbGVtZW50Q2xhc3NOYW1lLnN1YnN0cmluZygwLCBjbGFzc0luZGV4KTtcblx0XHRcdGNvbnN0IGFmdGVyID0gZWxlbWVudENsYXNzTmFtZS5zdWJzdHJpbmcoY2xhc3NJbmRleCArIGNsYXNzTmFtZS5sZW5ndGgpO1xuXHRcdFx0ZWxlbWVudENsYXNzTmFtZSA9IGAke2JlZm9yZX0gJHthZnRlcn1gO1xuXHRcdH1cblx0fVxuXG5cdGVsZW1lbnQuY2xhc3NOYW1lID0gZWxlbWVudENsYXNzTmFtZS50cmltKCk7XG59XG5cbi8qKlxuICogVHJpZ2dlcnMgYWxsIGxpc3RlbmVycyBmb3IgdGhlIGdpdmVuIGV2ZW50IHR5cGUgdGhhdCBhcmUgc3RvcmVkIGluIHRoZVxuICogc3BlY2lmaWVkIGVsZW1lbnQuXG4gKiBAcGFyYW0geyFFbGVtZW50fSBlbGVtZW50XG4gKiBAcGFyYW0geyFFdmVudH0gZXZlbnRcbiAqIEBwYXJhbSB7IUFycmF5fSBkZWZhdWx0Rm5zIEFycmF5IHRvIGNvbGxlY3QgZGVmYXVsdCBsaXN0ZW5lcnMgaW4sIGluc3RlYWRcbiAqICAgICBvZiBydW5uaW5nIHRoZW0uXG4gKiBAcmV0dXJuIHtib29sZWFufSBGYWxzZSBpZiBhdCBsZWFzdCBvbmUgb2YgdGhlIHRyaWdnZXJlZCBjYWxsYmFja3MgcmV0dXJuc1xuICogICAgIGZhbHNlLCBvciB0cnVlIG90aGVyd2lzZS5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHRyaWdnZXJFbGVtZW50TGlzdGVuZXJzXyhlbGVtZW50LCBldmVudCwgZGVmYXVsdEZucykge1xuXHRjb25zdCBsYXN0Q29udGFpbmVyID0gZXZlbnRbTEFTVF9DT05UQUlORVJdO1xuXHRpZiAoIWlzRGVmKGxhc3RDb250YWluZXIpIHx8ICFjb250YWlucyhsYXN0Q29udGFpbmVyLCBlbGVtZW50KSkge1xuXHRcdGNvbnN0IGxpc3RlbmVycyA9IGRvbURhdGEuZ2V0KGVsZW1lbnQsICdsaXN0ZW5lcnMnLCB7fSlbZXZlbnQudHlwZV07XG5cdFx0cmV0dXJuIHRyaWdnZXJMaXN0ZW5lcnNfKGxpc3RlbmVycywgZXZlbnQsIGVsZW1lbnQsIGRlZmF1bHRGbnMpO1xuXHR9XG5cdHJldHVybiB0cnVlO1xufVxuXG4vKipcbiAqIFRyaWdnZXJzIHRoZSBzcGVjaWZpZWQgZXZlbnQgb24gdGhlIGdpdmVuIGVsZW1lbnQuXG4gKiBOT1RFOiBUaGlzIHNob3VsZCBtb3N0bHkgYmUgdXNlZCBmb3IgdGVzdGluZywgbm90IG9uIHJlYWwgY29kZS5cbiAqIEBwYXJhbSB7IUVsZW1lbnR9IGVsZW1lbnQgVGhlIG5vZGUgdGhhdCBzaG91bGQgdHJpZ2dlciB0aGUgZXZlbnQuXG4gKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lIFRoZSBuYW1lIG9mIHRoZSBldmVudCB0byBiZSB0cmlnZ3JlZC5cbiAqIEBwYXJhbSB7T2JqZWN0PX0gb3B0X2V2ZW50T2JqIEFuIG9iamVjdCB3aXRoIGRhdGEgdGhhdCBzaG91bGQgYmUgb24gdGhlXG4gKiAgIHRyaWdnZXJlZCBldmVudCdzIHBheWxvYWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0cmlnZ2VyRXZlbnQoZWxlbWVudCwgZXZlbnROYW1lLCBvcHRfZXZlbnRPYmopIHtcblx0aWYgKGlzQWJsZVRvSW50ZXJhY3RXaXRoXyhlbGVtZW50LCBldmVudE5hbWUsIG9wdF9ldmVudE9iaikpIHtcblx0XHRjb25zdCBldmVudE9iaiA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdIVE1MRXZlbnRzJyk7XG5cdFx0ZXZlbnRPYmouaW5pdEV2ZW50KGV2ZW50TmFtZSwgdHJ1ZSwgdHJ1ZSk7XG5cdFx0b2JqZWN0Lm1peGluKGV2ZW50T2JqLCBvcHRfZXZlbnRPYmopO1xuXHRcdGVsZW1lbnQuZGlzcGF0Y2hFdmVudChldmVudE9iaik7XG5cdH1cbn1cblxuLyoqXG4gKiBUcmlnZ2VycyB0aGUgZ2l2ZW4gbGlzdGVuZXJzIGFycmF5LlxuICogQHBhcmFtIHtBcnJheTwhZnVuY3Rpb24oKT59IGxpc3RlbmVyc1xuICogQHBhcmFtIHshRXZlbnR9IGV2ZW50XG4gKiBAcGFyYW0geyFFbGVtZW50fSBlbGVtZW50XG4gKiBAcGFyYW0geyFBcnJheX0gZGVmYXVsdEZucyBBcnJheSB0byBjb2xsZWN0IGRlZmF1bHQgbGlzdGVuZXJzIGluLCBpbnN0ZWFkXG4gKiAgICAgb2YgcnVubmluZyB0aGVtLlxuICogQHJldHVybiB7Ym9vbGVhbn0gRmFsc2UgaWYgYXQgbGVhc3Qgb25lIG9mIHRoZSB0cmlnZ2VyZWQgY2FsbGJhY2tzIHJldHVybnNcbiAqICAgICBmYWxzZSwgb3IgdHJ1ZSBvdGhlcndpc2UuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiB0cmlnZ2VyTGlzdGVuZXJzXyhsaXN0ZW5lcnMsIGV2ZW50LCBlbGVtZW50LCBkZWZhdWx0Rm5zKSB7XG5cdGxldCByZXQgPSB0cnVlO1xuXHRsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMgfHwgW107XG5cdGZvciAobGV0IGkgPSAwOyBpIDwgbGlzdGVuZXJzLmxlbmd0aCAmJiAhZXZlbnQuc3RvcHBlZEltbWVkaWF0ZTsgaSsrKSB7XG5cdFx0aWYgKGxpc3RlbmVyc1tpXS5kZWZhdWx0TGlzdGVuZXJfKSB7XG5cdFx0XHRkZWZhdWx0Rm5zLnB1c2goe1xuXHRcdFx0XHRlbGVtZW50LFxuXHRcdFx0XHRmbjogbGlzdGVuZXJzW2ldXG5cdFx0XHR9KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0ICY9IGxpc3RlbmVyc1tpXShldmVudCk7XG5cdFx0fVxuXHR9XG5cdHJldHVybiByZXQ7XG59XG5cbi8qKlxuICogVHJpZ2dlcnMgYWxsIHNlbGVjdG9yIGxpc3RlbmVycyBmb3IgdGhlIGdpdmVuIGV2ZW50LlxuICogQHBhcmFtIHshRWxlbWVudH0gY29udGFpbmVyXG4gKiBAcGFyYW0geyFFbGVtZW50fSBlbGVtZW50XG4gKiBAcGFyYW0geyFFdmVudH0gZXZlbnRcbiAqIEBwYXJhbSB7IUFycmF5fSBkZWZhdWx0Rm5zIEFycmF5IHRvIGNvbGxlY3QgZGVmYXVsdCBsaXN0ZW5lcnMgaW4sIGluc3RlYWRcbiAqICAgICBvZiBydW5uaW5nIHRoZW0uXG4gKiBAcmV0dXJuIHtib29sZWFufSBGYWxzZSBpZiBhdCBsZWFzdCBvbmUgb2YgdGhlIHRyaWdnZXJlZCBjYWxsYmFja3MgcmV0dXJuc1xuICogICAgIGZhbHNlLCBvciB0cnVlIG90aGVyd2lzZS5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHRyaWdnZXJTZWxlY3Rvckxpc3RlbmVyc18oY29udGFpbmVyLCBlbGVtZW50LCBldmVudCwgZGVmYXVsdEZucykge1xuXHRsZXQgcmV0ID0gdHJ1ZTtcblx0Y29uc3QgZGF0YSA9IGRvbURhdGEuZ2V0KGNvbnRhaW5lciwgJ2RlbGVnYXRpbmcnLCB7fSk7XG5cdGNvbnN0IG1hcCA9IGRhdGFbZXZlbnQudHlwZV0uc2VsZWN0b3JzO1xuXHRjb25zdCBzZWxlY3RvcnMgPSBPYmplY3Qua2V5cyhtYXApO1xuXHRmb3IgKGxldCBpID0gMDsgaSA8IHNlbGVjdG9ycy5sZW5ndGggJiYgIWV2ZW50LnN0b3BwZWRJbW1lZGlhdGU7IGkrKykge1xuXHRcdGlmIChtYXRjaChlbGVtZW50LCBzZWxlY3RvcnNbaV0pKSB7XG5cdFx0XHRjb25zdCBsaXN0ZW5lcnMgPSBtYXBbc2VsZWN0b3JzW2ldXTtcblx0XHRcdHJldCAmPSB0cmlnZ2VyTGlzdGVuZXJzXyhsaXN0ZW5lcnMsIGV2ZW50LCBlbGVtZW50LCBkZWZhdWx0Rm5zKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIHJldDtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuLy8gVGhpcyBmaWxlIGV4aXN0cyBqdXN0IGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSwgbWFraW5nIHN1cmUgdGhhdCBvbGRcbi8vIGRlZmF1bHQgaW1wb3J0cyBmb3IgdGhpcyBmaWxlIHN0aWxsIHdvcmsuIEl0J3MgYmVzdCB0byB1c2UgdGhlIG5hbWVkIGV4cG9ydHNcbi8vIGZvciBlYWNoIGZ1bmN0aW9uIGluc3RlYWQgdGhvdWdoLCBzaW5jZSB0aGF0IGFsbG93cyBidW5kbGVycyBsaWtlIFJvbGx1cCB0b1xuLy8gcmVkdWNlIHRoZSBidW5kbGUgc2l6ZSBieSByZW1vdmluZyB1bnVzZWQgY29kZS5cbmltcG9ydCAqIGFzIGRvbSBmcm9tICcuL2RvbU5hbWVkJztcblxuZXhwb3J0IGRlZmF1bHQgZG9tO1xuZXhwb3J0IHsgZG9tIH07XG5leHBvcnQgKiBmcm9tICcuL2RvbU5hbWVkJztcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHsgZGVsZWdhdGUsIG9uLCBzdXBwb3J0c0V2ZW50IH0gZnJvbSAnLi9kb20nO1xuaW1wb3J0IHsgRXZlbnRFbWl0dGVyUHJveHkgfSBmcm9tICdtZXRhbC1ldmVudHMnO1xuXG4vKipcbiAqIERvbUV2ZW50RW1pdHRlclByb3h5IHV0aWxpdHkuIEl0IGV4dGVuZHMgYEV2ZW50RW1pdHRlclByb3h5YCB0byBhbHNvIGFjY2VwdFxuICogZG9tIGVsZW1lbnRzIGFzIG9yaWdpbiBlbWl0dGVycy5cbiAqIEBleHRlbmRzIHtFdmVudEVtaXR0ZXJQcm94eX1cbiAqL1xuY2xhc3MgRG9tRXZlbnRFbWl0dGVyUHJveHkgZXh0ZW5kcyBFdmVudEVtaXR0ZXJQcm94eSB7XG5cdC8qKlxuXHQgKiBBZGRzIHRoZSBnaXZlbiBsaXN0ZW5lciBmb3IgdGhlIGdpdmVuIGV2ZW50LlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnRcblx0ICogQHBhcmFtIHshZnVuY3Rpb24oKX0gbGlzdGVuZXJcblx0ICogQHJldHVybiB7IUV2ZW50SGFuZGxlfSBUaGUgbGlzdGVuZWQgZXZlbnQncyBoYW5kbGUuXG5cdCAqIEBwcm90ZWN0ZWRcblx0ICogQG92ZXJyaWRlXG5cdCAqL1xuXHRhZGRMaXN0ZW5lcl8oZXZlbnQsIGxpc3RlbmVyKSB7XG5cdFx0aWYgKHRoaXMub3JpZ2luRW1pdHRlcl8uYWRkRXZlbnRMaXN0ZW5lcikge1xuXHRcdFx0aWYgKHRoaXMuaXNEZWxlZ2F0ZUV2ZW50XyhldmVudCkpIHtcblx0XHRcdFx0Y29uc3QgaW5kZXggPSBldmVudC5pbmRleE9mKCc6JywgOSk7XG5cdFx0XHRcdGNvbnN0IGV2ZW50TmFtZSA9IGV2ZW50LnN1YnN0cmluZyg5LCBpbmRleCk7XG5cdFx0XHRcdGNvbnN0IHNlbGVjdG9yID0gZXZlbnQuc3Vic3RyaW5nKGluZGV4ICsgMSk7XG5cdFx0XHRcdHJldHVybiBkZWxlZ2F0ZSh0aGlzLm9yaWdpbkVtaXR0ZXJfLCBldmVudE5hbWUsIHNlbGVjdG9yLCBsaXN0ZW5lcik7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gb24odGhpcy5vcmlnaW5FbWl0dGVyXywgZXZlbnQsIGxpc3RlbmVyKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIHN1cGVyLmFkZExpc3RlbmVyXyhldmVudCwgbGlzdGVuZXIpO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBDaGVja3MgaWYgdGhlIGdpdmVuIGV2ZW50IGlzIG9mIHRoZSBkZWxlZ2F0ZSB0eXBlLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnRcblx0ICogQHJldHVybiB7Ym9vbGVhbn1cblx0ICogQHByb3RlY3RlZFxuXHQgKi9cblx0aXNEZWxlZ2F0ZUV2ZW50XyhldmVudCkge1xuXHRcdHJldHVybiBldmVudC5zdWJzdHIoMCwgOSkgPT09ICdkZWxlZ2F0ZTonO1xuXHR9XG5cblx0LyoqXG5cdCAqIENoZWNrcyBpZiB0aGUgZ2l2ZW4gZXZlbnQgaXMgc3VwcG9ydGVkIGJ5IHRoZSBvcmlnaW4gZWxlbWVudC5cblx0ICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50XG5cdCAqIEBwcm90ZWN0ZWRcblx0ICovXG5cdGlzU3VwcG9ydGVkRG9tRXZlbnRfKGV2ZW50KSB7XG5cdFx0aWYgKCF0aGlzLm9yaWdpbkVtaXR0ZXJfIHx8ICF0aGlzLm9yaWdpbkVtaXR0ZXJfLmFkZEV2ZW50TGlzdGVuZXIpIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4gKHRoaXMuaXNEZWxlZ2F0ZUV2ZW50XyhldmVudCkgJiYgZXZlbnQuaW5kZXhPZignOicsIDkpICE9PSAtMSkgfHxcblx0XHRcdHN1cHBvcnRzRXZlbnQodGhpcy5vcmlnaW5FbWl0dGVyXywgZXZlbnQpO1xuXHR9XG5cblx0LyoqXG5cdCAqIENoZWNrcyBpZiB0aGUgZ2l2ZW4gZXZlbnQgc2hvdWxkIGJlIHByb3hpZWQuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBldmVudFxuXHQgKiBAcmV0dXJuIHtib29sZWFufVxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqIEBvdmVycmlkZVxuXHQgKi9cblx0c2hvdWxkUHJveHlFdmVudF8oZXZlbnQpIHtcblx0XHRyZXR1cm4gc3VwZXIuc2hvdWxkUHJveHlFdmVudF8oZXZlbnQpICYmIHRoaXMuaXNTdXBwb3J0ZWREb21FdmVudF8oZXZlbnQpO1xuXHR9XG59XG5cbmV4cG9ydCBkZWZhdWx0IERvbUV2ZW50RW1pdHRlclByb3h5O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgeyBhcHBlbmQgfSBmcm9tICcuL2RvbSc7XG5pbXBvcnQgeyBzdHJpbmcgfSBmcm9tICdtZXRhbCc7XG5cbi8qKlxuICogQ2xhc3Mgd2l0aCBzdGF0aWMgbWV0aG9kcyByZXNwb25zaWJsZSBmb3IgZG9pbmcgYnJvd3NlciBmZWF0dXJlIGNoZWNrcy5cbiAqL1xuY2xhc3MgZmVhdHVyZXMge1xuXHQvKipcblx0ICogU29tZSBicm93c2VycyBzdGlsbCBzdXBwb3J0cyBwcmVmaXhlZCBhbmltYXRpb24gZXZlbnRzLiBUaGlzIG1ldGhvZCBjYW5cblx0ICogYmUgdXNlZCB0byByZXRyaWV2ZSB0aGUgY3VycmVudCBicm93c2VyIGV2ZW50IG5hbWUgZm9yIGJvdGgsIGFuaW1hdGlvblxuXHQgKiBhbmQgdHJhbnNpdGlvbi5cblx0ICogQHJldHVybiB7b2JqZWN0fVxuXHQgKi9cblx0c3RhdGljIGNoZWNrQW5pbWF0aW9uRXZlbnROYW1lKCkge1xuXHRcdGlmIChmZWF0dXJlcy5hbmltYXRpb25FdmVudE5hbWVfID09PSB1bmRlZmluZWQpIHtcblx0XHRcdGZlYXR1cmVzLmFuaW1hdGlvbkV2ZW50TmFtZV8gPSB7XG5cdFx0XHRcdGFuaW1hdGlvbjogZmVhdHVyZXMuY2hlY2tBbmltYXRpb25FdmVudE5hbWVfKCdhbmltYXRpb24nKSxcblx0XHRcdFx0dHJhbnNpdGlvbjogZmVhdHVyZXMuY2hlY2tBbmltYXRpb25FdmVudE5hbWVfKCd0cmFuc2l0aW9uJylcblx0XHRcdH07XG5cdFx0fVxuXHRcdHJldHVybiBmZWF0dXJlcy5hbmltYXRpb25FdmVudE5hbWVfO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBwcm90ZWN0ZWRcblx0ICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgVHlwZSB0byB0ZXN0OiBhbmltYXRpb24sIHRyYW5zaXRpb24uXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gQnJvd3NlciBldmVudCBuYW1lLlxuXHQgKi9cblx0c3RhdGljIGNoZWNrQW5pbWF0aW9uRXZlbnROYW1lXyh0eXBlKSB7XG5cdFx0Y29uc3QgcHJlZml4ZXMgPSBbJ1dlYmtpdCcsICdNUycsICdPJywgJyddO1xuXHRcdGNvbnN0IHR5cGVUaXRsZUNhc2UgPSBzdHJpbmcucmVwbGFjZUludGVydmFsKHR5cGUsIDAsIDEsIHR5cGUuc3Vic3RyaW5nKDAsIDEpLnRvVXBwZXJDYXNlKCkpO1xuXHRcdGNvbnN0IHN1ZmZpeGVzID0gW2Ake3R5cGVUaXRsZUNhc2V9RW5kYCwgYCR7dHlwZVRpdGxlQ2FzZX1FbmRgLCBgJHt0eXBlVGl0bGVDYXNlfUVuZGAsIGAke3R5cGV9ZW5kYF07XG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBwcmVmaXhlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0aWYgKGZlYXR1cmVzLmFuaW1hdGlvbkVsZW1lbnRfLnN0eWxlW3ByZWZpeGVzW2ldICsgdHlwZVRpdGxlQ2FzZV0gIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRyZXR1cm4gcHJlZml4ZXNbaV0udG9Mb3dlckNhc2UoKSArIHN1ZmZpeGVzW2ldO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gYCR7dHlwZX1lbmRgO1xuXHR9XG5cblx0LyoqXG5cdCAqIFNvbWUgYnJvd3NlcnMgKGxpa2UgSUU5KSBjaGFuZ2UgdGhlIG9yZGVyIG9mIGVsZW1lbnQgYXR0cmlidXRlcywgd2hlbiBodG1sXG5cdCAqIGlzIHJlbmRlcmVkLiBUaGlzIG1ldGhvZCBjYW4gYmUgdXNlZCB0byBjaGVjayBpZiB0aGlzIGJlaGF2aW9yIGhhcHBlbnMgb25cblx0ICogdGhlIGN1cnJlbnQgYnJvd3Nlci5cblx0ICogQHJldHVybiB7Ym9vbGVhbn1cblx0ICovXG5cdHN0YXRpYyBjaGVja0F0dHJPcmRlckNoYW5nZSgpIHtcblx0XHRpZiAoZmVhdHVyZXMuYXR0ck9yZGVyQ2hhbmdlXyA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRjb25zdCBvcmlnaW5hbENvbnRlbnQgPSAnPGRpdiBkYXRhLWNvbXBvbmVudD1cIlwiIGRhdGEtcmVmPVwiXCI+PC9kaXY+Jztcblx0XHRcdGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblx0XHRcdGFwcGVuZChlbGVtZW50LCBvcmlnaW5hbENvbnRlbnQpO1xuXHRcdFx0ZmVhdHVyZXMuYXR0ck9yZGVyQ2hhbmdlXyA9IG9yaWdpbmFsQ29udGVudCAhPT0gZWxlbWVudC5pbm5lckhUTUw7XG5cdFx0fVxuXHRcdHJldHVybiBmZWF0dXJlcy5hdHRyT3JkZXJDaGFuZ2VfO1xuXHR9XG59XG5cbmZlYXR1cmVzLmFuaW1hdGlvbkVsZW1lbnRfID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5mZWF0dXJlcy5hbmltYXRpb25FdmVudE5hbWVfID0gdW5kZWZpbmVkO1xuZmVhdHVyZXMuYXR0ck9yZGVyQ2hhbmdlXyA9IHVuZGVmaW5lZDtcblxuZXhwb3J0IGRlZmF1bHQgZmVhdHVyZXM7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB7IGFzeW5jIH0gZnJvbSAnbWV0YWwnO1xuaW1wb3J0IHsgZXhpdERvY3VtZW50LCBvbmNlIH0gZnJvbSAnLi9kb20nO1xuXG4vKipcbiAqIFV0aWxpdHkgZnVuY3Rpb25zIGZvciBydW5uaW5nIGphdmFzY3JpcHQgY29kZSBpbiB0aGUgZ2xvYmFsIHNjb3BlLlxuICovXG5jbGFzcyBnbG9iYWxFdmFsIHtcblx0LyoqXG5cdCAqIEV2YWx1YXRlcyB0aGUgZ2l2ZW4gc3RyaW5nIGluIHRoZSBnbG9iYWwgc2NvcGUuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0XG5cdCAqIEBwYXJhbSB7ZnVuY3Rpb24oKT19IG9wdF9hcHBlbmRGbiBPcHRpb25hbCBmdW5jdGlvbiB0byBhcHBlbmQgdGhlIG5vZGVcblx0ICogICBpbnRvIGRvY3VtZW50LlxuXHQgKiBAcmV0dXJuIHtFbGVtZW50fSBzY3JpcHRcblx0ICovXG5cdHN0YXRpYyBydW4odGV4dCwgb3B0X2FwcGVuZEZuKSB7XG5cdFx0Y29uc3Qgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG5cdFx0c2NyaXB0LnRleHQgPSB0ZXh0O1xuXHRcdGlmIChvcHRfYXBwZW5kRm4pIHtcblx0XHRcdG9wdF9hcHBlbmRGbihzY3JpcHQpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHNjcmlwdCk7XG5cdFx0fVxuXHRcdGV4aXREb2N1bWVudChzY3JpcHQpO1xuXHRcdHJldHVybiBzY3JpcHQ7XG5cdH1cblxuXHQvKipcblx0ICogRXZhbHVhdGVzIHRoZSBnaXZlbiBqYXZhc2NyaXB0IGZpbGUgaW4gdGhlIGdsb2JhbCBzY29wZS5cblx0ICogQHBhcmFtIHtzdHJpbmd9IHNyYyBUaGUgZmlsZSdzIHBhdGguXG5cdCAqIEBwYXJhbSB7ZnVuY3Rpb24oKT19IG9wdF9jYWxsYmFjayBPcHRpb25hbCBmdW5jdGlvbiB0byBiZSBjYWxsZWRcblx0ICogICB3aGVuIHRoZSBzY3JpcHQgaGFzIGJlZW4gcnVuLlxuXHQgKiBAcGFyYW0ge2Z1bmN0aW9uKCk9fSBvcHRfYXBwZW5kRm4gT3B0aW9uYWwgZnVuY3Rpb24gdG8gYXBwZW5kIHRoZSBub2RlXG5cdCAqICAgaW50byBkb2N1bWVudC5cblx0ICogQHJldHVybiB7RWxlbWVudH0gc2NyaXB0XG5cdCAqL1xuXHRzdGF0aWMgcnVuRmlsZShzcmMsIG9wdF9jYWxsYmFjaywgb3B0X2FwcGVuZEZuKSB7XG5cdFx0Y29uc3Qgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG5cdFx0c2NyaXB0LnNyYyA9IHNyYztcblxuXHRcdGNvbnN0IGNhbGxiYWNrID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRleGl0RG9jdW1lbnQoc2NyaXB0KTtcblx0XHRcdG9wdF9jYWxsYmFjayAmJiBvcHRfY2FsbGJhY2soKTtcblx0XHR9O1xuXHRcdG9uY2Uoc2NyaXB0LCAnbG9hZCcsIGNhbGxiYWNrKTtcblx0XHRvbmNlKHNjcmlwdCwgJ2Vycm9yJywgY2FsbGJhY2spO1xuXG5cdFx0aWYgKG9wdF9hcHBlbmRGbikge1xuXHRcdFx0b3B0X2FwcGVuZEZuKHNjcmlwdCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcblx0XHR9XG5cblx0XHRyZXR1cm4gc2NyaXB0O1xuXHR9XG5cblx0LyoqXG5cdCAqIEV2YWx1YXRlcyB0aGUgY29kZSByZWZlcmVuY2VkIGJ5IHRoZSBnaXZlbiBzY3JpcHQgZWxlbWVudC5cblx0ICogQHBhcmFtIHshRWxlbWVudH0gc2NyaXB0XG5cdCAqIEBwYXJhbSB7ZnVuY3Rpb24oKT19IG9wdF9jYWxsYmFjayBPcHRpb25hbCBmdW5jdGlvbiB0byBiZSBjYWxsZWRcblx0ICogICB3aGVuIHRoZSBzY3JpcHQgaGFzIGJlZW4gcnVuLlxuXHQgKiBAcGFyYW0ge2Z1bmN0aW9uKCk9fSBvcHRfYXBwZW5kRm4gT3B0aW9uYWwgZnVuY3Rpb24gdG8gYXBwZW5kIHRoZSBub2RlXG5cdCAqICAgaW50byBkb2N1bWVudC5cblx0ICogQHJldHVybiB7RWxlbWVudH0gc2NyaXB0XG5cdCAqL1xuXHRzdGF0aWMgcnVuU2NyaXB0KHNjcmlwdCwgb3B0X2NhbGxiYWNrLCBvcHRfYXBwZW5kRm4pIHtcblx0XHRjb25zdCBjYWxsYmFjayA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0b3B0X2NhbGxiYWNrICYmIG9wdF9jYWxsYmFjaygpO1xuXHRcdH07XG5cdFx0aWYgKHNjcmlwdC50eXBlICYmIHNjcmlwdC50eXBlICE9PSAndGV4dC9qYXZhc2NyaXB0Jykge1xuXHRcdFx0YXN5bmMubmV4dFRpY2soY2FsbGJhY2spO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRleGl0RG9jdW1lbnQoc2NyaXB0KTtcblx0XHRpZiAoc2NyaXB0LnNyYykge1xuXHRcdFx0cmV0dXJuIGdsb2JhbEV2YWwucnVuRmlsZShzY3JpcHQuc3JjLCBvcHRfY2FsbGJhY2ssIG9wdF9hcHBlbmRGbik7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGFzeW5jLm5leHRUaWNrKGNhbGxiYWNrKTtcblx0XHRcdHJldHVybiBnbG9iYWxFdmFsLnJ1bihzY3JpcHQudGV4dCwgb3B0X2FwcGVuZEZuKTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogRXZhbHVhdGVzIGFueSBzY3JpcHQgdGFncyBwcmVzZW50IGluIHRoZSBnaXZlbiBlbGVtZW50LlxuXHQgKiBAcGFyYW0geyFFbGVtZW50fSBlbGVtZW50XG5cdCAqIEBwYXJhbSB7ZnVuY3Rpb24oKT19IG9wdF9jYWxsYmFjayBPcHRpb25hbCBmdW5jdGlvbiB0byBiZSBjYWxsZWRcblx0ICogICB3aGVuIHRoZSBzY3JpcHQgaGFzIGJlZW4gcnVuLlxuXHQgKiBAcGFyYW0ge2Z1bmN0aW9uKCk9fSBvcHRfYXBwZW5kRm4gT3B0aW9uYWwgZnVuY3Rpb24gdG8gYXBwZW5kIHRoZSBub2RlXG5cdCAqICAgaW50byBkb2N1bWVudC5cblx0ICovXG5cdHN0YXRpYyBydW5TY3JpcHRzSW5FbGVtZW50KGVsZW1lbnQsIG9wdF9jYWxsYmFjaywgb3B0X2FwcGVuZEZuKSB7XG5cdFx0Y29uc3Qgc2NyaXB0cyA9IGVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnc2NyaXB0Jyk7XG5cdFx0aWYgKHNjcmlwdHMubGVuZ3RoKSB7XG5cdFx0XHRnbG9iYWxFdmFsLnJ1blNjcmlwdHNJbk9yZGVyKHNjcmlwdHMsIDAsIG9wdF9jYWxsYmFjaywgb3B0X2FwcGVuZEZuKTtcblx0XHR9IGVsc2UgaWYgKG9wdF9jYWxsYmFjaykge1xuXHRcdFx0YXN5bmMubmV4dFRpY2sob3B0X2NhbGxiYWNrKTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogUnVucyB0aGUgZ2l2ZW4gc2NyaXB0cyBlbGVtZW50cyBpbiB0aGUgb3JkZXIgdGhhdCB0aGV5IGFwcGVhci5cblx0ICogQHBhcmFtIHshTm9kZUxpc3R9IHNjcmlwdHNcblx0ICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG5cdCAqIEBwYXJhbSB7ZnVuY3Rpb24oKT19IG9wdF9jYWxsYmFjayBPcHRpb25hbCBmdW5jdGlvbiB0byBiZSBjYWxsZWRcblx0ICogICB3aGVuIHRoZSBzY3JpcHQgaGFzIGJlZW4gcnVuLlxuXHQgKiBAcGFyYW0ge2Z1bmN0aW9uKCk9fSBvcHRfYXBwZW5kRm4gT3B0aW9uYWwgZnVuY3Rpb24gdG8gYXBwZW5kIHRoZSBub2RlXG5cdCAqICAgaW50byBkb2N1bWVudC5cblx0ICovXG5cdHN0YXRpYyBydW5TY3JpcHRzSW5PcmRlcihzY3JpcHRzLCBpbmRleCwgb3B0X2NhbGxiYWNrLCBvcHRfYXBwZW5kRm4pIHtcblx0XHRnbG9iYWxFdmFsLnJ1blNjcmlwdChzY3JpcHRzLml0ZW0oaW5kZXgpLCBmdW5jdGlvbigpIHtcblx0XHRcdGlmIChpbmRleCA8IHNjcmlwdHMubGVuZ3RoIC0gMSkge1xuXHRcdFx0XHRnbG9iYWxFdmFsLnJ1blNjcmlwdHNJbk9yZGVyKHNjcmlwdHMsIGluZGV4ICsgMSwgb3B0X2NhbGxiYWNrLCBvcHRfYXBwZW5kRm4pO1xuXHRcdFx0fSBlbHNlIGlmIChvcHRfY2FsbGJhY2spIHtcblx0XHRcdFx0YXN5bmMubmV4dFRpY2sob3B0X2NhbGxiYWNrKTtcblx0XHRcdH1cblx0XHR9LCBvcHRfYXBwZW5kRm4pO1xuXHR9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdsb2JhbEV2YWw7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB7IGFzeW5jIH0gZnJvbSAnbWV0YWwnO1xuaW1wb3J0IHsgb25jZSB9IGZyb20gJy4vZG9tJztcblxuLyoqXG4gKiBVdGlsaXR5IGZ1bmN0aW9ucyBmb3IgcnVubmluZyBzdHlsZXMuXG4gKi9cbmNsYXNzIGdsb2JhbEV2YWxTdHlsZXMge1xuXHQvKipcblx0ICogRXZhbHVhdGVzIHRoZSBnaXZlbiBzdHlsZS5cblx0ICogQHBhcmFtIHtzdHJpbmd9IHRleHRcblx0ICogQHBhcmFtIHtmdW5jdGlvbigpPX0gb3B0X2FwcGVuZEZuIE9wdGlvbmFsIGZ1bmN0aW9uIHRvIGFwcGVuZCB0aGUgbm9kZVxuXHQgKiAgIGludG8gZG9jdW1lbnQuXG5cdCAqIEByZXR1cm4ge0VsZW1lbnR9IHN0eWxlXG5cdCAqL1xuXHRzdGF0aWMgcnVuKHRleHQsIG9wdF9hcHBlbmRGbikge1xuXHRcdGNvbnN0IHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcblx0XHRzdHlsZS5pbm5lckhUTUwgPSB0ZXh0O1xuXHRcdGlmIChvcHRfYXBwZW5kRm4pIHtcblx0XHRcdG9wdF9hcHBlbmRGbihzdHlsZSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuXHRcdH1cblx0XHRyZXR1cm4gc3R5bGU7XG5cdH1cblxuXHQvKipcblx0ICogRXZhbHVhdGVzIHRoZSBnaXZlbiBzdHlsZSBmaWxlLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gaHJlZiBUaGUgZmlsZSdzIHBhdGguXG5cdCAqIEBwYXJhbSB7ZnVuY3Rpb24oKT19IG9wdF9jYWxsYmFjayBPcHRpb25hbCBmdW5jdGlvbiB0byBiZSBjYWxsZWRcblx0ICogICB3aGVuIHRoZSBzdHlsZXMgaGFzIGJlZW4gcnVuLlxuXHQgKiBAcGFyYW0ge2Z1bmN0aW9uKCk9fSBvcHRfYXBwZW5kRm4gT3B0aW9uYWwgZnVuY3Rpb24gdG8gYXBwZW5kIHRoZSBub2RlXG5cdCAqICAgaW50byBkb2N1bWVudC5cblx0ICogQHJldHVybiB7RWxlbWVudH0gc3R5bGVcblx0ICovXG5cdHN0YXRpYyBydW5GaWxlKGhyZWYsIG9wdF9jYWxsYmFjaywgb3B0X2FwcGVuZEZuKSB7XG5cdFx0Y29uc3QgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpbmsnKTtcblx0XHRsaW5rLnJlbCA9ICdzdHlsZXNoZWV0Jztcblx0XHRsaW5rLmhyZWYgPSBocmVmO1xuXHRcdGdsb2JhbEV2YWxTdHlsZXMucnVuU3R5bGUobGluaywgb3B0X2NhbGxiYWNrLCBvcHRfYXBwZW5kRm4pO1xuXHRcdHJldHVybiBsaW5rO1xuXHR9XG5cblx0LyoqXG5cdCAqIEV2YWx1YXRlcyB0aGUgY29kZSByZWZlcmVuY2VkIGJ5IHRoZSBnaXZlbiBzdHlsZS9saW5rIGVsZW1lbnQuXG5cdCAqIEBwYXJhbSB7IUVsZW1lbnR9IHN0eWxlXG5cdCAqIEBwYXJhbSB7ZnVuY3Rpb24oKT19IG9wdF9jYWxsYmFjayBPcHRpb25hbCBmdW5jdGlvbiB0byBiZSBjYWxsZWRcblx0ICogICB3aGVuIHRoZSBzY3JpcHQgaGFzIGJlZW4gcnVuLlxuXHQgKiBAcGFyYW0ge2Z1bmN0aW9uKCk9fSBvcHRfYXBwZW5kRm4gT3B0aW9uYWwgZnVuY3Rpb24gdG8gYXBwZW5kIHRoZSBub2RlXG5cdCAqICAgaW50byBkb2N1bWVudC5cblx0ICogIEByZXR1cm4ge0VsZW1lbnR9IHN0eWxlXG5cdCAqL1xuXHRzdGF0aWMgcnVuU3R5bGUoc3R5bGUsIG9wdF9jYWxsYmFjaywgb3B0X2FwcGVuZEZuKSB7XG5cdFx0Y29uc3QgY2FsbGJhY2sgPSBmdW5jdGlvbigpIHtcblx0XHRcdG9wdF9jYWxsYmFjayAmJiBvcHRfY2FsbGJhY2soKTtcblx0XHR9O1xuXHRcdGlmIChzdHlsZS5yZWwgJiYgc3R5bGUucmVsICE9PSAnc3R5bGVzaGVldCcpIHtcblx0XHRcdGFzeW5jLm5leHRUaWNrKGNhbGxiYWNrKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoc3R5bGUudGFnTmFtZSA9PT0gJ1NUWUxFJykge1xuXHRcdFx0YXN5bmMubmV4dFRpY2soY2FsbGJhY2spO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRvbmNlKHN0eWxlLCAnbG9hZCcsIGNhbGxiYWNrKTtcblx0XHRcdG9uY2Uoc3R5bGUsICdlcnJvcicsIGNhbGxiYWNrKTtcblx0XHR9XG5cblx0XHRpZiAob3B0X2FwcGVuZEZuKSB7XG5cdFx0XHRvcHRfYXBwZW5kRm4oc3R5bGUpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHN0eWxlKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gc3R5bGU7XG5cdH1cblxuXHQvKipcblx0ICogRXZhbHVhdGVzIGFueSBzdHlsZSBwcmVzZW50IGluIHRoZSBnaXZlbiBlbGVtZW50LlxuXHQgKiBAcGFyYW0geyFFbGVtZW50fSBlbGVtZW50XG5cdCAqIEBwYXJhbSB7ZnVuY3Rpb24oKT19IG9wdF9jYWxsYmFjayBPcHRpb25hbCBmdW5jdGlvbiB0byBiZSBjYWxsZWQgd2hlbiB0aGVcblx0ICogICBzdHlsZSBoYXMgYmVlbiBydW4uXG5cdCAqIEBwYXJhbSB7ZnVuY3Rpb24oKT19IG9wdF9hcHBlbmRGbiBPcHRpb25hbCBmdW5jdGlvbiB0byBhcHBlbmQgdGhlIG5vZGVcblx0ICogICBpbnRvIGRvY3VtZW50LlxuXHQgKi9cblx0c3RhdGljIHJ1blN0eWxlc0luRWxlbWVudChlbGVtZW50LCBvcHRfY2FsbGJhY2ssIG9wdF9hcHBlbmRGbikge1xuXHRcdGNvbnN0IHN0eWxlcyA9IGVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnc3R5bGUsbGluaycpO1xuXHRcdGlmIChzdHlsZXMubGVuZ3RoID09PSAwICYmIG9wdF9jYWxsYmFjaykge1xuXHRcdFx0YXN5bmMubmV4dFRpY2sob3B0X2NhbGxiYWNrKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRsZXQgbG9hZENvdW50ID0gMDtcblx0XHRjb25zdCBjYWxsYmFjayA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKG9wdF9jYWxsYmFjayAmJiArK2xvYWRDb3VudCA9PT0gc3R5bGVzLmxlbmd0aCkge1xuXHRcdFx0XHRhc3luYy5uZXh0VGljayhvcHRfY2FsbGJhY2spO1xuXHRcdFx0fVxuXHRcdH07XG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdGdsb2JhbEV2YWxTdHlsZXMucnVuU3R5bGUoc3R5bGVzW2ldLCBjYWxsYmFjaywgb3B0X2FwcGVuZEZuKTtcblx0XHR9XG5cdH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZ2xvYmFsRXZhbFN0eWxlcztcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHsgcmVnaXN0ZXJDdXN0b21FdmVudCB9IGZyb20gJy4vZG9tJztcbmltcG9ydCBmZWF0dXJlcyBmcm9tICcuL2ZlYXR1cmVzJztcblxuY29uc3QgbW91c2VFdmVudE1hcCA9IHtcblx0bW91c2VlbnRlcjogJ21vdXNlb3ZlcicsXG5cdG1vdXNlbGVhdmU6ICdtb3VzZW91dCcsXG5cdHBvaW50ZXJlbnRlcjogJ3BvaW50ZXJvdmVyJyxcblx0cG9pbnRlcmxlYXZlOiAncG9pbnRlcm91dCdcbn07XG5PYmplY3Qua2V5cyhtb3VzZUV2ZW50TWFwKS5mb3JFYWNoKGZ1bmN0aW9uKGV2ZW50TmFtZSkge1xuXHRyZWdpc3RlckN1c3RvbUV2ZW50KGV2ZW50TmFtZSwge1xuXHRcdGRlbGVnYXRlOiB0cnVlLFxuXHRcdGhhbmRsZXI6IGZ1bmN0aW9uKGNhbGxiYWNrLCBldmVudCkge1xuXHRcdFx0Y29uc3QgcmVsYXRlZCA9IGV2ZW50LnJlbGF0ZWRUYXJnZXQ7XG5cdFx0XHRjb25zdCB0YXJnZXQgPSBldmVudC5kZWxlZ2F0ZVRhcmdldDtcblx0XHRcdGlmICghcmVsYXRlZCB8fCAocmVsYXRlZCAhPT0gdGFyZ2V0ICYmICF0YXJnZXQuY29udGFpbnMocmVsYXRlZCkpKSB7XG5cdFx0XHRcdGV2ZW50LmN1c3RvbVR5cGUgPSBldmVudE5hbWU7XG5cdFx0XHRcdHJldHVybiBjYWxsYmFjayhldmVudCk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRvcmlnaW5hbEV2ZW50OiBtb3VzZUV2ZW50TWFwW2V2ZW50TmFtZV1cblx0fSk7XG59KTtcblxuY29uc3QgYW5pbWF0aW9uRXZlbnRNYXAgPSB7XG5cdGFuaW1hdGlvbjogJ2FuaW1hdGlvbmVuZCcsXG5cdHRyYW5zaXRpb246ICd0cmFuc2l0aW9uZW5kJ1xufTtcbk9iamVjdC5rZXlzKGFuaW1hdGlvbkV2ZW50TWFwKS5mb3JFYWNoKGZ1bmN0aW9uKGV2ZW50VHlwZSkge1xuXHRjb25zdCBldmVudE5hbWUgPSBhbmltYXRpb25FdmVudE1hcFtldmVudFR5cGVdO1xuXHRyZWdpc3RlckN1c3RvbUV2ZW50KGV2ZW50TmFtZSwge1xuXHRcdGV2ZW50OiB0cnVlLFxuXHRcdGRlbGVnYXRlOiB0cnVlLFxuXHRcdGhhbmRsZXI6IGZ1bmN0aW9uKGNhbGxiYWNrLCBldmVudCkge1xuXHRcdFx0ZXZlbnQuY3VzdG9tVHlwZSA9IGV2ZW50TmFtZTtcblx0XHRcdHJldHVybiBjYWxsYmFjayhldmVudCk7XG5cdFx0fSxcblx0XHRvcmlnaW5hbEV2ZW50OiBmZWF0dXJlcy5jaGVja0FuaW1hdGlvbkV2ZW50TmFtZSgpW2V2ZW50VHlwZV1cblx0fSk7XG59KTtcbiIsIi8qIVxuICogUHJvbWlzZXMgcG9seWZpbGwgZnJvbSBHb29nbGUncyBDbG9zdXJlIExpYnJhcnkuXG4gKlxuICogICAgICBDb3B5cmlnaHQgMjAxMyBUaGUgQ2xvc3VyZSBMaWJyYXJ5IEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTk9URShlZHVhcmRvKTogUHJvbWlzZSBzdXBwb3J0IGlzIG5vdCByZWFkeSBvbiBhbGwgc3VwcG9ydGVkIGJyb3dzZXJzLFxuICogdGhlcmVmb3JlIG1ldGFsLXByb21pc2UgaXMgdGVtcG9yYXJpbHkgdXNpbmcgR29vZ2xlJ3MgcHJvbWlzZXMgYXMgcG9seWZpbGwuXG4gKiBJdCBzdXBwb3J0cyBjYW5jZWxsYWJsZSBwcm9taXNlcyBhbmQgaGFzIGNsZWFuIGFuZCBmYXN0IGltcGxlbWVudGF0aW9uLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHsgaXNEZWYsIGlzRnVuY3Rpb24sIGlzT2JqZWN0IH0gZnJvbSAnbWV0YWwnO1xuaW1wb3J0IHsgYXN5bmMgfSBmcm9tICdtZXRhbCc7XG5cbi8qKlxuICogUHJvdmlkZXMgYSBtb3JlIHN0cmljdCBpbnRlcmZhY2UgZm9yIFRoZW5hYmxlcyBpbiB0ZXJtcyBvZlxuICogaHR0cDovL3Byb21pc2VzYXBsdXMuY29tIGZvciBpbnRlcm9wIHdpdGgge0BzZWUgQ2FuY2VsbGFibGVQcm9taXNlfS5cbiAqXG4gKiBAaW50ZXJmYWNlXG4gKiBAZXh0ZW5kcyB7SVRoZW5hYmxlLjxUWVBFPn1cbiAqIEB0ZW1wbGF0ZSBUWVBFXG4gKi9cbnZhciBUaGVuYWJsZSA9IGZ1bmN0aW9uKCkge307XG5cbi8qKlxuICogQWRkcyBjYWxsYmFja3MgdGhhdCB3aWxsIG9wZXJhdGUgb24gdGhlIHJlc3VsdCBvZiB0aGUgVGhlbmFibGUsIHJldHVybmluZyBhXG4gKiBuZXcgY2hpbGQgUHJvbWlzZS5cbiAqXG4gKiBJZiB0aGUgVGhlbmFibGUgaXMgZnVsZmlsbGVkLCB0aGUge0Bjb2RlIG9uRnVsZmlsbGVkfSBjYWxsYmFjayB3aWxsIGJlXG4gKiBpbnZva2VkIHdpdGggdGhlIGZ1bGZpbGxtZW50IHZhbHVlIGFzIGFyZ3VtZW50LCBhbmQgdGhlIGNoaWxkIFByb21pc2Ugd2lsbFxuICogYmUgZnVsZmlsbGVkIHdpdGggdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgY2FsbGJhY2suIElmIHRoZSBjYWxsYmFjayB0aHJvd3NcbiAqIGFuIGV4Y2VwdGlvbiwgdGhlIGNoaWxkIFByb21pc2Ugd2lsbCBiZSByZWplY3RlZCB3aXRoIHRoZSB0aHJvd24gdmFsdWVcbiAqIGluc3RlYWQuXG4gKlxuICogSWYgdGhlIFRoZW5hYmxlIGlzIHJlamVjdGVkLCB0aGUge0Bjb2RlIG9uUmVqZWN0ZWR9IGNhbGxiYWNrIHdpbGwgYmUgaW52b2tlZFxuICogd2l0aCB0aGUgcmVqZWN0aW9uIHJlYXNvbiBhcyBhcmd1bWVudCwgYW5kIHRoZSBjaGlsZCBQcm9taXNlIHdpbGwgYmUgcmVqZWN0ZWRcbiAqIHdpdGggdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgY2FsbGJhY2sgb3IgdGhyb3duIHZhbHVlLlxuICpcbiAqIEBwYXJhbSB7PyhmdW5jdGlvbih0aGlzOlRISVMsIFRZUEUpOlxuICogICAgICAgICAgICAgKFJFU1VMVHxJVGhlbmFibGUuPFJFU1VMVD58VGhlbmFibGUpKT19IG9wdF9vbkZ1bGZpbGxlZCBBXG4gKiAgICAgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGludm9rZWQgd2l0aCB0aGUgZnVsZmlsbG1lbnQgdmFsdWUgaWYgdGhlIFByb21pc2VcbiAqICAgICBpcyBmdWxsZmlsbGVkLlxuICogQHBhcmFtIHs/KGZ1bmN0aW9uKCopOiAqKT19IG9wdF9vblJlamVjdGVkIEEgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGludm9rZWRcbiAqICAgICB3aXRoIHRoZSByZWplY3Rpb24gcmVhc29uIGlmIHRoZSBQcm9taXNlIGlzIHJlamVjdGVkLlxuICogQHBhcmFtIHtUSElTPX0gb3B0X2NvbnRleHQgQW4gb3B0aW9uYWwgY29udGV4dCBvYmplY3QgdGhhdCB3aWxsIGJlIHRoZVxuICogICAgIGV4ZWN1dGlvbiBjb250ZXh0IGZvciB0aGUgY2FsbGJhY2tzLiBCeSBkZWZhdWx0LCBmdW5jdGlvbnMgYXJlIGV4ZWN1dGVkXG4gKiAgICAgd2l0aCB0aGUgZGVmYXVsdCB0aGlzLlxuICogQHJldHVybiB7IUNhbmNlbGxhYmxlUHJvbWlzZS48UkVTVUxUPn0gQSBuZXcgUHJvbWlzZSB0aGF0IHdpbGwgcmVjZWl2ZSB0aGVcbiAqICAgICByZXN1bHQgb2YgdGhlIGZ1bGZpbGxtZW50IG9yIHJlamVjdGlvbiBjYWxsYmFjay5cbiAqIEB0ZW1wbGF0ZSBSRVNVTFQsVEhJU1xuICovXG5UaGVuYWJsZS5wcm90b3R5cGUudGhlbiA9IGZ1bmN0aW9uKCkge307XG5cblxuLyoqXG4gKiBBbiBleHBhbmRvIHByb3BlcnR5IHRvIGluZGljYXRlIHRoYXQgYW4gb2JqZWN0IGltcGxlbWVudHNcbiAqIHtAY29kZSBUaGVuYWJsZX0uXG4gKlxuICoge0BzZWUgYWRkSW1wbGVtZW50YXRpb259LlxuICpcbiAqIEBjb25zdFxuICovXG5UaGVuYWJsZS5JTVBMRU1FTlRFRF9CWV9QUk9QID0gJyRnb29nX1RoZW5hYmxlJztcblxuXG4vKipcbiAqIE1hcmtzIGEgZ2l2ZW4gY2xhc3MgKGNvbnN0cnVjdG9yKSBhcyBhbiBpbXBsZW1lbnRhdGlvbiBvZiBUaGVuYWJsZSwgc29cbiAqIHRoYXQgd2UgY2FuIHF1ZXJ5IHRoYXQgZmFjdCBhdCBydW50aW1lLiBUaGUgY2xhc3MgbXVzdCBoYXZlIGFscmVhZHlcbiAqIGltcGxlbWVudGVkIHRoZSBpbnRlcmZhY2UuXG4gKiBFeHBvcnRzIGEgJ3RoZW4nIG1ldGhvZCBvbiB0aGUgY29uc3RydWN0b3IgcHJvdG90eXBlLCBzbyB0aGF0IHRoZSBvYmplY3RzXG4gKiBhbHNvIGltcGxlbWVudCB0aGUgZXh0ZXJuIHtAc2VlIFRoZW5hYmxlfSBpbnRlcmZhY2UgZm9yIGludGVyb3Agd2l0aFxuICogb3RoZXIgUHJvbWlzZSBpbXBsZW1lbnRhdGlvbnMuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKG5ldzpUaGVuYWJsZSwuLi5bP10pfSBjdG9yIFRoZSBjbGFzcyBjb25zdHJ1Y3Rvci4gVGhlXG4gKiAgICAgY29ycmVzcG9uZGluZyBjbGFzcyBtdXN0IGhhdmUgYWxyZWFkeSBpbXBsZW1lbnRlZCB0aGUgaW50ZXJmYWNlLlxuICovXG5UaGVuYWJsZS5hZGRJbXBsZW1lbnRhdGlvbiA9IGZ1bmN0aW9uKGN0b3IpIHtcbiAgY3Rvci5wcm90b3R5cGUudGhlbiA9IGN0b3IucHJvdG90eXBlLnRoZW47XG4gIGN0b3IucHJvdG90eXBlLiRnb29nX1RoZW5hYmxlID0gdHJ1ZTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0geyp9IG9iamVjdFxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciBhIGdpdmVuIGluc3RhbmNlIGltcGxlbWVudHMge0Bjb2RlIFRoZW5hYmxlfS5cbiAqICAgICBUaGUgY2xhc3Mvc3VwZXJjbGFzcyBvZiB0aGUgaW5zdGFuY2UgbXVzdCBjYWxsIHtAY29kZSBhZGRJbXBsZW1lbnRhdGlvbn0uXG4gKi9cblRoZW5hYmxlLmlzSW1wbGVtZW50ZWRCeSA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICBpZiAoIW9iamVjdCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB0cnkge1xuICAgIHJldHVybiAhIW9iamVjdC4kZ29vZ19UaGVuYWJsZTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIFByb3BlcnR5IGFjY2VzcyBzZWVtcyB0byBiZSBmb3JiaWRkZW4uXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuXG5cbi8qKlxuICogTGlrZSBiaW5kKCksIGV4Y2VwdCB0aGF0IGEgJ3RoaXMgb2JqZWN0JyBpcyBub3QgcmVxdWlyZWQuIFVzZWZ1bCB3aGVuIHRoZVxuICogdGFyZ2V0IGZ1bmN0aW9uIGlzIGFscmVhZHkgYm91bmQuXG4gKlxuICogVXNhZ2U6XG4gKiB2YXIgZyA9IHBhcnRpYWwoZiwgYXJnMSwgYXJnMik7XG4gKiBnKGFyZzMsIGFyZzQpO1xuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIEEgZnVuY3Rpb24gdG8gcGFydGlhbGx5IGFwcGx5LlxuICogQHBhcmFtIHsuLi4qfSB2YXJfYXJncyBBZGRpdGlvbmFsIGFyZ3VtZW50cyB0aGF0IGFyZSBwYXJ0aWFsbHkgYXBwbGllZCB0byBmbi5cbiAqIEByZXR1cm4geyFGdW5jdGlvbn0gQSBwYXJ0aWFsbHktYXBwbGllZCBmb3JtIG9mIHRoZSBmdW5jdGlvbiBiaW5kKCkgd2FzXG4gKiAgICAgaW52b2tlZCBhcyBhIG1ldGhvZCBvZi5cbiAqL1xudmFyIHBhcnRpYWwgPSBmdW5jdGlvbihmbikge1xuICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAvLyBDbG9uZSB0aGUgYXJyYXkgKHdpdGggc2xpY2UoKSkgYW5kIGFwcGVuZCBhZGRpdGlvbmFsIGFyZ3VtZW50c1xuICAgIC8vIHRvIHRoZSBleGlzdGluZyBhcmd1bWVudHMuXG4gICAgdmFyIG5ld0FyZ3MgPSBhcmdzLnNsaWNlKCk7XG4gICAgbmV3QXJncy5wdXNoLmFwcGx5KG5ld0FyZ3MsIGFyZ3VtZW50cyk7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIG5ld0FyZ3MpO1xuICB9O1xufTtcblxuLyoqXG4gKiBQcm9taXNlcyBwcm92aWRlIGEgcmVzdWx0IHRoYXQgbWF5IGJlIHJlc29sdmVkIGFzeW5jaHJvbm91c2x5LiBBIFByb21pc2UgbWF5XG4gKiBiZSByZXNvbHZlZCBieSBiZWluZyBmdWxmaWxsZWQgb3IgcmVqZWN0ZWQgd2l0aCBhIHZhbHVlLCB3aGljaCB3aWxsIGJlIGtub3duXG4gKiBhcyB0aGUgZnVsZmlsbG1lbnQgdmFsdWUgb3IgdGhlIHJlamVjdGlvbiByZWFzb24uIFdoZXRoZXIgZnVsZmlsbGVkIG9yXG4gKiByZWplY3RlZCwgdGhlIFByb21pc2UgcmVzdWx0IGlzIGltbXV0YWJsZSBvbmNlIGl0IGlzIHNldC5cbiAqXG4gKiBQcm9taXNlcyBtYXkgcmVwcmVzZW50IHJlc3VsdHMgb2YgYW55IHR5cGUsIGluY2x1ZGluZyB1bmRlZmluZWQuIFJlamVjdGlvblxuICogcmVhc29ucyBhcmUgdHlwaWNhbGx5IEVycm9ycywgYnV0IG1heSBhbHNvIGJlIG9mIGFueSB0eXBlLiBDbG9zdXJlIFByb21pc2VzXG4gKiBhbGxvdyBmb3Igb3B0aW9uYWwgdHlwZSBhbm5vdGF0aW9ucyB0aGF0IGVuZm9yY2UgdGhhdCBmdWxmaWxsbWVudCB2YWx1ZXMgYXJlXG4gKiBvZiB0aGUgYXBwcm9wcmlhdGUgdHlwZXMgYXQgY29tcGlsZSB0aW1lLlxuICpcbiAqIFRoZSByZXN1bHQgb2YgYSBQcm9taXNlIGlzIGFjY2Vzc2libGUgYnkgY2FsbGluZyB7QGNvZGUgdGhlbn0gYW5kIHJlZ2lzdGVyaW5nXG4gKiB7QGNvZGUgb25GdWxmaWxsZWR9IGFuZCB7QGNvZGUgb25SZWplY3RlZH0gY2FsbGJhY2tzLiBPbmNlIHRoZSBQcm9taXNlXG4gKiByZXNvbHZlcywgdGhlIHJlbGV2YW50IGNhbGxiYWNrcyBhcmUgaW52b2tlZCB3aXRoIHRoZSBmdWxmaWxsbWVudCB2YWx1ZSBvclxuICogcmVqZWN0aW9uIHJlYXNvbiBhcyBhcmd1bWVudC4gQ2FsbGJhY2tzIGFyZSBhbHdheXMgaW52b2tlZCBpbiB0aGUgb3JkZXIgdGhleVxuICogd2VyZSByZWdpc3RlcmVkLCBldmVuIHdoZW4gYWRkaXRpb25hbCB7QGNvZGUgdGhlbn0gY2FsbHMgYXJlIG1hZGUgZnJvbSBpbnNpZGVcbiAqIGFub3RoZXIgY2FsbGJhY2suIEEgY2FsbGJhY2sgaXMgYWx3YXlzIHJ1biBhc3luY2hyb25vdXNseSBzb21ldGltZSBhZnRlciB0aGVcbiAqIHNjb3BlIGNvbnRhaW5pbmcgdGhlIHJlZ2lzdGVyaW5nIHtAY29kZSB0aGVufSBpbnZvY2F0aW9uIGhhcyByZXR1cm5lZC5cbiAqXG4gKiBJZiBhIFByb21pc2UgaXMgcmVzb2x2ZWQgd2l0aCBhbm90aGVyIFByb21pc2UsIHRoZSBmaXJzdCBQcm9taXNlIHdpbGwgYmxvY2tcbiAqIHVudGlsIHRoZSBzZWNvbmQgaXMgcmVzb2x2ZWQsIGFuZCB0aGVuIGFzc3VtZXMgdGhlIHNhbWUgcmVzdWx0IGFzIHRoZSBzZWNvbmRcbiAqIFByb21pc2UuIFRoaXMgYWxsb3dzIFByb21pc2VzIHRvIGRlcGVuZCBvbiB0aGUgcmVzdWx0cyBvZiBvdGhlciBQcm9taXNlcyxcbiAqIGxpbmtpbmcgdG9nZXRoZXIgbXVsdGlwbGUgYXN5bmNocm9ub3VzIG9wZXJhdGlvbnMuXG4gKlxuICogVGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBjb21wYXRpYmxlIHdpdGggdGhlIFByb21pc2VzL0ErIHNwZWNpZmljYXRpb24gYW5kXG4gKiBwYXNzZXMgdGhhdCBzcGVjaWZpY2F0aW9uJ3MgY29uZm9ybWFuY2UgdGVzdCBzdWl0ZS4gQSBDbG9zdXJlIFByb21pc2UgbWF5IGJlXG4gKiByZXNvbHZlZCB3aXRoIGEgUHJvbWlzZSBpbnN0YW5jZSAob3Igc3VmZmljaWVudGx5IGNvbXBhdGlibGUgUHJvbWlzZS1saWtlXG4gKiBvYmplY3QpIGNyZWF0ZWQgYnkgb3RoZXIgUHJvbWlzZSBpbXBsZW1lbnRhdGlvbnMuIEZyb20gdGhlIHNwZWNpZmljYXRpb24sXG4gKiBQcm9taXNlLWxpa2Ugb2JqZWN0cyBhcmUga25vd24gYXMgXCJUaGVuYWJsZXNcIi5cbiAqXG4gKiBAc2VlIGh0dHA6Ly9wcm9taXNlc2FwbHVzLmNvbS9cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFxuICogICAgICAgICAgICAgdGhpczpSRVNPTFZFUl9DT05URVhULFxuICogICAgICAgICAgICAgZnVuY3Rpb24oKFRZUEV8SVRoZW5hYmxlLjxUWVBFPnxUaGVuYWJsZSkpLFxuICogICAgICAgICAgICAgZnVuY3Rpb24oKikpOiB2b2lkfSByZXNvbHZlclxuICogICAgIEluaXRpYWxpemF0aW9uIGZ1bmN0aW9uIHRoYXQgaXMgaW52b2tlZCBpbW1lZGlhdGVseSB3aXRoIHtAY29kZSByZXNvbHZlfVxuICogICAgIGFuZCB7QGNvZGUgcmVqZWN0fSBmdW5jdGlvbnMgYXMgYXJndW1lbnRzLiBUaGUgUHJvbWlzZSBpcyByZXNvbHZlZCBvclxuICogICAgIHJlamVjdGVkIHdpdGggdGhlIGZpcnN0IGFyZ3VtZW50IHBhc3NlZCB0byBlaXRoZXIgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge1JFU09MVkVSX0NPTlRFWFQ9fSBvcHRfY29udGV4dCBBbiBvcHRpb25hbCBjb250ZXh0IGZvciBleGVjdXRpbmcgdGhlXG4gKiAgICAgcmVzb2x2ZXIgZnVuY3Rpb24uIElmIHVuc3BlY2lmaWVkLCB0aGUgcmVzb2x2ZXIgZnVuY3Rpb24gd2lsbCBiZSBleGVjdXRlZFxuICogICAgIGluIHRoZSBkZWZhdWx0IHNjb3BlLlxuICogQGNvbnN0cnVjdG9yXG4gKiBAc3RydWN0XG4gKiBAZmluYWxcbiAqIEBpbXBsZW1lbnRzIHtUaGVuYWJsZS48VFlQRT59XG4gKiBAdGVtcGxhdGUgVFlQRSxSRVNPTFZFUl9DT05URVhUXG4gKi9cbnZhciBDYW5jZWxsYWJsZVByb21pc2UgPSBmdW5jdGlvbihyZXNvbHZlciwgb3B0X2NvbnRleHQpIHtcbiAgLyoqXG4gICAqIFRoZSBpbnRlcm5hbCBzdGF0ZSBvZiB0aGlzIFByb21pc2UuIEVpdGhlciBQRU5ESU5HLCBGVUxGSUxMRUQsIFJFSkVDVEVELCBvclxuICAgKiBCTE9DS0VELlxuICAgKiBAcHJpdmF0ZSB7Q2FuY2VsbGFibGVQcm9taXNlLlN0YXRlX31cbiAgICovXG4gIHRoaXMuc3RhdGVfID0gQ2FuY2VsbGFibGVQcm9taXNlLlN0YXRlXy5QRU5ESU5HO1xuXG4gIC8qKlxuICAgKiBUaGUgcmVzb2x2ZWQgcmVzdWx0IG9mIHRoZSBQcm9taXNlLiBJbW11dGFibGUgb25jZSBzZXQgd2l0aCBlaXRoZXIgYVxuICAgKiBmdWxmaWxsbWVudCB2YWx1ZSBvciByZWplY3Rpb24gcmVhc29uLlxuICAgKiBAcHJpdmF0ZSB7Kn1cbiAgICovXG4gIHRoaXMucmVzdWx0XyA9IHVuZGVmaW5lZDtcblxuICAvKipcbiAgICogRm9yIFByb21pc2VzIGNyZWF0ZWQgYnkgY2FsbGluZyB7QGNvZGUgdGhlbigpfSwgdGhlIG9yaWdpbmF0aW5nIHBhcmVudC5cbiAgICogQHByaXZhdGUge0NhbmNlbGxhYmxlUHJvbWlzZX1cbiAgICovXG4gIHRoaXMucGFyZW50XyA9IG51bGw7XG5cbiAgLyoqXG4gICAqIFRoZSBsaXN0IG9mIHtAY29kZSBvbkZ1bGZpbGxlZH0gYW5kIHtAY29kZSBvblJlamVjdGVkfSBjYWxsYmFja3MgYWRkZWQgdG9cbiAgICogdGhpcyBQcm9taXNlIGJ5IGNhbGxzIHRvIHtAY29kZSB0aGVuKCl9LlxuICAgKiBAcHJpdmF0ZSB7QXJyYXkuPENhbmNlbGxhYmxlUHJvbWlzZS5DYWxsYmFja0VudHJ5Xz59XG4gICAqL1xuICB0aGlzLmNhbGxiYWNrRW50cmllc18gPSBudWxsO1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRoZSBQcm9taXNlIGlzIGluIHRoZSBxdWV1ZSBvZiBQcm9taXNlcyB0byBleGVjdXRlLlxuICAgKiBAcHJpdmF0ZSB7Ym9vbGVhbn1cbiAgICovXG4gIHRoaXMuZXhlY3V0aW5nXyA9IGZhbHNlO1xuXG4gIGlmIChDYW5jZWxsYWJsZVByb21pc2UuVU5IQU5ETEVEX1JFSkVDVElPTl9ERUxBWSA+IDApIHtcbiAgICAvKipcbiAgICAgKiBBIHRpbWVvdXQgSUQgdXNlZCB3aGVuIHRoZSB7QGNvZGUgVU5IQU5ETEVEX1JFSkVDVElPTl9ERUxBWX0gaXMgZ3JlYXRlclxuICAgICAqIHRoYW4gMCBtaWxsaXNlY29uZHMuIFRoZSBJRCBpcyBzZXQgd2hlbiB0aGUgUHJvbWlzZSBpcyByZWplY3RlZCwgYW5kXG4gICAgICogY2xlYXJlZCBvbmx5IGlmIGFuIHtAY29kZSBvblJlamVjdGVkfSBjYWxsYmFjayBpcyBpbnZva2VkIGZvciB0aGVcbiAgICAgKiBQcm9taXNlIChvciBvbmUgb2YgaXRzIGRlc2NlbmRhbnRzKSBiZWZvcmUgdGhlIGRlbGF5IGlzIGV4Y2VlZGVkLlxuICAgICAqXG4gICAgICogSWYgdGhlIHJlamVjdGlvbiBpcyBub3QgaGFuZGxlZCBiZWZvcmUgdGhlIHRpbWVvdXQgY29tcGxldGVzLCB0aGVcbiAgICAgKiByZWplY3Rpb24gcmVhc29uIGlzIHBhc3NlZCB0byB0aGUgdW5oYW5kbGVkIHJlamVjdGlvbiBoYW5kbGVyLlxuICAgICAqIEBwcml2YXRlIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy51bmhhbmRsZWRSZWplY3Rpb25JZF8gPSAwO1xuICB9IGVsc2UgaWYgKENhbmNlbGxhYmxlUHJvbWlzZS5VTkhBTkRMRURfUkVKRUNUSU9OX0RFTEFZID09PSAwKSB7XG4gICAgLyoqXG4gICAgICogV2hlbiB0aGUge0Bjb2RlIFVOSEFORExFRF9SRUpFQ1RJT05fREVMQVl9IGlzIHNldCB0byAwIG1pbGxpc2Vjb25kcywgYVxuICAgICAqIGJvb2xlYW4gdGhhdCBpcyBzZXQgaWYgdGhlIFByb21pc2UgaXMgcmVqZWN0ZWQsIGFuZCByZXNldCB0byBmYWxzZSBpZiBhblxuICAgICAqIHtAY29kZSBvblJlamVjdGVkfSBjYWxsYmFjayBpcyBpbnZva2VkIGZvciB0aGUgUHJvbWlzZSAob3Igb25lIG9mIGl0c1xuICAgICAqIGRlc2NlbmRhbnRzKS4gSWYgdGhlIHJlamVjdGlvbiBpcyBub3QgaGFuZGxlZCBiZWZvcmUgdGhlIG5leHQgdGltZXN0ZXAsXG4gICAgICogdGhlIHJlamVjdGlvbiByZWFzb24gaXMgcGFzc2VkIHRvIHRoZSB1bmhhbmRsZWQgcmVqZWN0aW9uIGhhbmRsZXIuXG4gICAgICogQHByaXZhdGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgdGhpcy5oYWRVbmhhbmRsZWRSZWplY3Rpb25fID0gZmFsc2U7XG4gIH1cblxuICB0cnkge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICByZXNvbHZlci5jYWxsKFxuICAgICAgb3B0X2NvbnRleHQsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHNlbGYucmVzb2x2ZV8oQ2FuY2VsbGFibGVQcm9taXNlLlN0YXRlXy5GVUxGSUxMRUQsIHZhbHVlKTtcbiAgICAgIH0sIGZ1bmN0aW9uKHJlYXNvbikge1xuICAgICAgICBzZWxmLnJlc29sdmVfKENhbmNlbGxhYmxlUHJvbWlzZS5TdGF0ZV8uUkVKRUNURUQsIHJlYXNvbik7XG4gICAgICB9KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRoaXMucmVzb2x2ZV8oQ2FuY2VsbGFibGVQcm9taXNlLlN0YXRlXy5SRUpFQ1RFRCwgZSk7XG4gIH1cbn07XG5cbi8qKlxuICogVGhlIGRlbGF5IGluIG1pbGxpc2Vjb25kcyBiZWZvcmUgYSByZWplY3RlZCBQcm9taXNlJ3MgcmVhc29uIGlzIHBhc3NlZCB0b1xuICogdGhlIHJlamVjdGlvbiBoYW5kbGVyLiBCeSBkZWZhdWx0LCB0aGUgcmVqZWN0aW9uIGhhbmRsZXIgcmV0aHJvd3MgdGhlXG4gKiByZWplY3Rpb24gcmVhc29uIHNvIHRoYXQgaXQgYXBwZWFycyBpbiB0aGUgZGV2ZWxvcGVyIGNvbnNvbGUgb3JcbiAqIHtAY29kZSB3aW5kb3cub25lcnJvcn0gaGFuZGxlci5cbiAqIFJlamVjdGlvbnMgYXJlIHJldGhyb3duIGFzIHF1aWNrbHkgYXMgcG9zc2libGUgYnkgZGVmYXVsdC4gQSBuZWdhdGl2ZSB2YWx1ZVxuICogZGlzYWJsZXMgcmVqZWN0aW9uIGhhbmRsaW5nIGVudGlyZWx5LlxuICogQHR5cGUge251bWJlcn1cbiAqL1xuQ2FuY2VsbGFibGVQcm9taXNlLlVOSEFORExFRF9SRUpFQ1RJT05fREVMQVkgPSAwO1xuXG5cbi8qKlxuICogVGhlIHBvc3NpYmxlIGludGVybmFsIHN0YXRlcyBmb3IgYSBQcm9taXNlLiBUaGVzZSBzdGF0ZXMgYXJlIG5vdCBkaXJlY3RseVxuICogb2JzZXJ2YWJsZSB0byBleHRlcm5hbCBjYWxsZXJzLlxuICogQGVudW0ge251bWJlcn1cbiAqIEBwcml2YXRlXG4gKi9cbkNhbmNlbGxhYmxlUHJvbWlzZS5TdGF0ZV8gPSB7XG4gIC8qKiBUaGUgUHJvbWlzZSBpcyB3YWl0aW5nIGZvciByZXNvbHV0aW9uLiAqL1xuICBQRU5ESU5HOiAwLFxuXG4gIC8qKiBUaGUgUHJvbWlzZSBpcyBibG9ja2VkIHdhaXRpbmcgZm9yIHRoZSByZXN1bHQgb2YgYW5vdGhlciBUaGVuYWJsZS4gKi9cbiAgQkxPQ0tFRDogMSxcblxuICAvKiogVGhlIFByb21pc2UgaGFzIGJlZW4gcmVzb2x2ZWQgd2l0aCBhIGZ1bGZpbGxtZW50IHZhbHVlLiAqL1xuICBGVUxGSUxMRUQ6IDIsXG5cbiAgLyoqIFRoZSBQcm9taXNlIGhhcyBiZWVuIHJlc29sdmVkIHdpdGggYSByZWplY3Rpb24gcmVhc29uLiAqL1xuICBSRUpFQ1RFRDogM1xufTtcblxuXG4vKipcbiAqIFR5cGVkZWYgZm9yIGVudHJpZXMgaW4gdGhlIGNhbGxiYWNrIGNoYWluLiBFYWNoIGNhbGwgdG8ge0Bjb2RlIHRoZW59LFxuICoge0Bjb2RlIHRoZW5DYXRjaH0sIG9yIHtAY29kZSB0aGVuQWx3YXlzfSBjcmVhdGVzIGFuIGVudHJ5IGNvbnRhaW5pbmcgdGhlXG4gKiBmdW5jdGlvbnMgdGhhdCBtYXkgYmUgaW52b2tlZCBvbmNlIHRoZSBQcm9taXNlIGlzIHJlc29sdmVkLlxuICpcbiAqIEB0eXBlZGVmIHt7XG4gKiAgIGNoaWxkOiBDYW5jZWxsYWJsZVByb21pc2UsXG4gKiAgIG9uRnVsZmlsbGVkOiBmdW5jdGlvbigqKSxcbiAqICAgb25SZWplY3RlZDogZnVuY3Rpb24oKilcbiAqIH19XG4gKiBAcHJpdmF0ZVxuICovXG5DYW5jZWxsYWJsZVByb21pc2UuQ2FsbGJhY2tFbnRyeV8gPSBudWxsO1xuXG5cbi8qKlxuICogQHBhcmFtIHsoVFlQRXxUaGVuYWJsZS48VFlQRT58VGhlbmFibGUpPX0gb3B0X3ZhbHVlXG4gKiBAcmV0dXJuIHshQ2FuY2VsbGFibGVQcm9taXNlLjxUWVBFPn0gQSBuZXcgUHJvbWlzZSB0aGF0IGlzIGltbWVkaWF0ZWx5IHJlc29sdmVkXG4gKiAgICAgd2l0aCB0aGUgZ2l2ZW4gdmFsdWUuXG4gKiBAdGVtcGxhdGUgVFlQRVxuICovXG5DYW5jZWxsYWJsZVByb21pc2UucmVzb2x2ZSA9IGZ1bmN0aW9uKG9wdF92YWx1ZSkge1xuICByZXR1cm4gbmV3IENhbmNlbGxhYmxlUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlKSB7XG4gICAgICByZXNvbHZlKG9wdF92YWx1ZSk7XG4gICAgfSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHsqPX0gb3B0X3JlYXNvblxuICogQHJldHVybiB7IUNhbmNlbGxhYmxlUHJvbWlzZX0gQSBuZXcgUHJvbWlzZSB0aGF0IGlzIGltbWVkaWF0ZWx5IHJlamVjdGVkIHdpdGggdGhlXG4gKiAgICAgZ2l2ZW4gcmVhc29uLlxuICovXG5DYW5jZWxsYWJsZVByb21pc2UucmVqZWN0ID0gZnVuY3Rpb24ob3B0X3JlYXNvbikge1xuICByZXR1cm4gbmV3IENhbmNlbGxhYmxlUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHJlamVjdChvcHRfcmVhc29uKTtcbiAgICB9KTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0geyFBcnJheS48IShUaGVuYWJsZS48VFlQRT58VGhlbmFibGUpPn0gcHJvbWlzZXNcbiAqIEByZXR1cm4geyFDYW5jZWxsYWJsZVByb21pc2UuPFRZUEU+fSBBIFByb21pc2UgdGhhdCByZWNlaXZlcyB0aGUgcmVzdWx0IG9mIHRoZVxuICogICAgIGZpcnN0IFByb21pc2UgKG9yIFByb21pc2UtbGlrZSkgaW5wdXQgdG8gY29tcGxldGUuXG4gKiBAdGVtcGxhdGUgVFlQRVxuICovXG5DYW5jZWxsYWJsZVByb21pc2UucmFjZSA9IGZ1bmN0aW9uKHByb21pc2VzKSB7XG4gIHJldHVybiBuZXcgQ2FuY2VsbGFibGVQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgaWYgKCFwcm9taXNlcy5sZW5ndGgpIHtcbiAgICAgICAgcmVzb2x2ZSh1bmRlZmluZWQpO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgaSA9IDAsIHByb21pc2U7IChwcm9taXNlID0gcHJvbWlzZXNbaV0pOyBpKyspIHtcbiAgICAgICAgcHJvbWlzZS50aGVuKHJlc29sdmUsIHJlamVjdCk7XG4gICAgICB9XG4gICAgfSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHshQXJyYXkuPCEoVGhlbmFibGUuPFRZUEU+fFRoZW5hYmxlKT59IHByb21pc2VzXG4gKiBAcmV0dXJuIHshQ2FuY2VsbGFibGVQcm9taXNlLjwhQXJyYXkuPFRZUEU+Pn0gQSBQcm9taXNlIHRoYXQgcmVjZWl2ZXMgYSBsaXN0IG9mXG4gKiAgICAgZXZlcnkgZnVsZmlsbGVkIHZhbHVlIG9uY2UgZXZlcnkgaW5wdXQgUHJvbWlzZSAob3IgUHJvbWlzZS1saWtlKSBpc1xuICogICAgIHN1Y2Nlc3NmdWxseSBmdWxmaWxsZWQsIG9yIGlzIHJlamVjdGVkIGJ5IHRoZSBmaXJzdCByZWplY3Rpb24gcmVzdWx0LlxuICogQHRlbXBsYXRlIFRZUEVcbiAqL1xuQ2FuY2VsbGFibGVQcm9taXNlLmFsbCA9IGZ1bmN0aW9uKHByb21pc2VzKSB7XG4gIHJldHVybiBuZXcgQ2FuY2VsbGFibGVQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIHRvRnVsZmlsbCA9IHByb21pc2VzLmxlbmd0aDtcbiAgICAgIHZhciB2YWx1ZXMgPSBbXTtcblxuICAgICAgaWYgKCF0b0Z1bGZpbGwpIHtcbiAgICAgICAgcmVzb2x2ZSh2YWx1ZXMpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBvbkZ1bGZpbGwgPSBmdW5jdGlvbihpbmRleCwgdmFsdWUpIHtcbiAgICAgICAgdG9GdWxmaWxsLS07XG4gICAgICAgIHZhbHVlc1tpbmRleF0gPSB2YWx1ZTtcbiAgICAgICAgaWYgKHRvRnVsZmlsbCA9PT0gMCkge1xuICAgICAgICAgIHJlc29sdmUodmFsdWVzKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgdmFyIG9uUmVqZWN0ID0gZnVuY3Rpb24ocmVhc29uKSB7XG4gICAgICAgIHJlamVjdChyZWFzb24pO1xuICAgICAgfTtcblxuICAgICAgZm9yICh2YXIgaSA9IDAsIHByb21pc2U7IChwcm9taXNlID0gcHJvbWlzZXNbaV0pOyBpKyspIHtcbiAgICAgICAgcHJvbWlzZS50aGVuKHBhcnRpYWwob25GdWxmaWxsLCBpKSwgb25SZWplY3QpO1xuICAgICAgfVxuICAgIH0pO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7IUFycmF5LjwhKFRoZW5hYmxlLjxUWVBFPnxUaGVuYWJsZSk+fSBwcm9taXNlc1xuICogQHJldHVybiB7IUNhbmNlbGxhYmxlUHJvbWlzZS48VFlQRT59IEEgUHJvbWlzZSB0aGF0IHJlY2VpdmVzIHRoZSB2YWx1ZSBvZlxuICogICAgIHRoZSBmaXJzdCBpbnB1dCB0byBiZSBmdWxmaWxsZWQsIG9yIGlzIHJlamVjdGVkIHdpdGggYSBsaXN0IG9mIGV2ZXJ5XG4gKiAgICAgcmVqZWN0aW9uIHJlYXNvbiBpZiBhbGwgaW5wdXRzIGFyZSByZWplY3RlZC5cbiAqIEB0ZW1wbGF0ZSBUWVBFXG4gKi9cbkNhbmNlbGxhYmxlUHJvbWlzZS5maXJzdEZ1bGZpbGxlZCA9IGZ1bmN0aW9uKHByb21pc2VzKSB7XG4gIHJldHVybiBuZXcgQ2FuY2VsbGFibGVQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIHRvUmVqZWN0ID0gcHJvbWlzZXMubGVuZ3RoO1xuICAgICAgdmFyIHJlYXNvbnMgPSBbXTtcblxuICAgICAgaWYgKCF0b1JlamVjdCkge1xuICAgICAgICByZXNvbHZlKHVuZGVmaW5lZCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIG9uRnVsZmlsbCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHJlc29sdmUodmFsdWUpO1xuICAgICAgfTtcblxuICAgICAgdmFyIG9uUmVqZWN0ID0gZnVuY3Rpb24oaW5kZXgsIHJlYXNvbikge1xuICAgICAgICB0b1JlamVjdC0tO1xuICAgICAgICByZWFzb25zW2luZGV4XSA9IHJlYXNvbjtcbiAgICAgICAgaWYgKHRvUmVqZWN0ID09PSAwKSB7XG4gICAgICAgICAgcmVqZWN0KHJlYXNvbnMpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBmb3IgKHZhciBpID0gMCwgcHJvbWlzZTsgKHByb21pc2UgPSBwcm9taXNlc1tpXSk7IGkrKykge1xuICAgICAgICBwcm9taXNlLnRoZW4ob25GdWxmaWxsLCBwYXJ0aWFsKG9uUmVqZWN0LCBpKSk7XG4gICAgICB9XG4gICAgfSk7XG59O1xuXG5cbi8qKlxuICogQWRkcyBjYWxsYmFja3MgdGhhdCB3aWxsIG9wZXJhdGUgb24gdGhlIHJlc3VsdCBvZiB0aGUgUHJvbWlzZSwgcmV0dXJuaW5nIGFcbiAqIG5ldyBjaGlsZCBQcm9taXNlLlxuICpcbiAqIElmIHRoZSBQcm9taXNlIGlzIGZ1bGZpbGxlZCwgdGhlIHtAY29kZSBvbkZ1bGZpbGxlZH0gY2FsbGJhY2sgd2lsbCBiZSBpbnZva2VkXG4gKiB3aXRoIHRoZSBmdWxmaWxsbWVudCB2YWx1ZSBhcyBhcmd1bWVudCwgYW5kIHRoZSBjaGlsZCBQcm9taXNlIHdpbGwgYmVcbiAqIGZ1bGZpbGxlZCB3aXRoIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIGNhbGxiYWNrLiBJZiB0aGUgY2FsbGJhY2sgdGhyb3dzIGFuXG4gKiBleGNlcHRpb24sIHRoZSBjaGlsZCBQcm9taXNlIHdpbGwgYmUgcmVqZWN0ZWQgd2l0aCB0aGUgdGhyb3duIHZhbHVlIGluc3RlYWQuXG4gKlxuICogSWYgdGhlIFByb21pc2UgaXMgcmVqZWN0ZWQsIHRoZSB7QGNvZGUgb25SZWplY3RlZH0gY2FsbGJhY2sgd2lsbCBiZSBpbnZva2VkXG4gKiB3aXRoIHRoZSByZWplY3Rpb24gcmVhc29uIGFzIGFyZ3VtZW50LCBhbmQgdGhlIGNoaWxkIFByb21pc2Ugd2lsbCBiZSByZWplY3RlZFxuICogd2l0aCB0aGUgcmV0dXJuIHZhbHVlIChvciB0aHJvd24gdmFsdWUpIG9mIHRoZSBjYWxsYmFjay5cbiAqXG4gKiBAb3ZlcnJpZGVcbiAqL1xuQ2FuY2VsbGFibGVQcm9taXNlLnByb3RvdHlwZS50aGVuID0gZnVuY3Rpb24ob3B0X29uRnVsZmlsbGVkLCBvcHRfb25SZWplY3RlZCwgb3B0X2NvbnRleHQpIHtcbiAgcmV0dXJuIHRoaXMuYWRkQ2hpbGRQcm9taXNlXyhcbiAgICBpc0Z1bmN0aW9uKG9wdF9vbkZ1bGZpbGxlZCkgPyBvcHRfb25GdWxmaWxsZWQgOiBudWxsLFxuICAgIGlzRnVuY3Rpb24ob3B0X29uUmVqZWN0ZWQpID8gb3B0X29uUmVqZWN0ZWQgOiBudWxsLFxuICAgIG9wdF9jb250ZXh0KTtcbn07XG5UaGVuYWJsZS5hZGRJbXBsZW1lbnRhdGlvbihDYW5jZWxsYWJsZVByb21pc2UpO1xuXG5cbi8qKlxuICogQWRkcyBhIGNhbGxiYWNrIHRoYXQgd2lsbCBiZSBpbnZva2VkIHdoZXRoZXIgdGhlIFByb21pc2UgaXMgZnVsZmlsbGVkIG9yXG4gKiByZWplY3RlZC4gVGhlIGNhbGxiYWNrIHJlY2VpdmVzIG5vIGFyZ3VtZW50LCBhbmQgbm8gbmV3IGNoaWxkIFByb21pc2UgaXNcbiAqIGNyZWF0ZWQuIFRoaXMgaXMgdXNlZnVsIGZvciBlbnN1cmluZyB0aGF0IGNsZWFudXAgdGFrZXMgcGxhY2UgYWZ0ZXIgY2VydGFpblxuICogYXN5bmNocm9ub3VzIG9wZXJhdGlvbnMuIENhbGxiYWNrcyBhZGRlZCB3aXRoIHtAY29kZSB0aGVuQWx3YXlzfSB3aWxsIGJlXG4gKiBleGVjdXRlZCBpbiB0aGUgc2FtZSBvcmRlciB3aXRoIG90aGVyIGNhbGxzIHRvIHtAY29kZSB0aGVufSxcbiAqIHtAY29kZSB0aGVuQWx3YXlzfSwgb3Ige0Bjb2RlIHRoZW5DYXRjaH0uXG4gKlxuICogU2luY2UgaXQgZG9lcyBub3QgcHJvZHVjZSBhIG5ldyBjaGlsZCBQcm9taXNlLCBjYW5jZWxsYXRpb24gcHJvcGFnYXRpb24gaXNcbiAqIG5vdCBwcmV2ZW50ZWQgYnkgYWRkaW5nIGNhbGxiYWNrcyB3aXRoIHtAY29kZSB0aGVuQWx3YXlzfS4gQSBQcm9taXNlIHRoYXQgaGFzXG4gKiBhIGNsZWFudXAgaGFuZGxlciBhZGRlZCB3aXRoIHtAY29kZSB0aGVuQWx3YXlzfSB3aWxsIGJlIGNhbmNlbGVkIGlmIGFsbCBvZlxuICogaXRzIGNoaWxkcmVuIGNyZWF0ZWQgYnkge0Bjb2RlIHRoZW59IChvciB7QGNvZGUgdGhlbkNhdGNofSkgYXJlIGNhbmNlbGVkLlxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb24odGhpczpUSElTKTogdm9pZH0gb25SZXNvbHZlZCBBIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBpbnZva2VkXG4gKiAgICAgd2hlbiB0aGUgUHJvbWlzZSBpcyByZXNvbHZlZC5cbiAqIEBwYXJhbSB7VEhJUz19IG9wdF9jb250ZXh0IEFuIG9wdGlvbmFsIGNvbnRleHQgb2JqZWN0IHRoYXQgd2lsbCBiZSB0aGVcbiAqICAgICBleGVjdXRpb24gY29udGV4dCBmb3IgdGhlIGNhbGxiYWNrcy4gQnkgZGVmYXVsdCwgZnVuY3Rpb25zIGFyZSBleGVjdXRlZFxuICogICAgIGluIHRoZSBnbG9iYWwgc2NvcGUuXG4gKiBAcmV0dXJuIHshQ2FuY2VsbGFibGVQcm9taXNlLjxUWVBFPn0gVGhpcyBQcm9taXNlLCBmb3IgY2hhaW5pbmcgYWRkaXRpb25hbCBjYWxscy5cbiAqIEB0ZW1wbGF0ZSBUSElTXG4gKi9cbkNhbmNlbGxhYmxlUHJvbWlzZS5wcm90b3R5cGUudGhlbkFsd2F5cyA9IGZ1bmN0aW9uKG9uUmVzb2x2ZWQsIG9wdF9jb250ZXh0KSB7XG4gIHZhciBjYWxsYmFjayA9IGZ1bmN0aW9uKCkge1xuICAgIHRyeSB7XG4gICAgICAvLyBFbnN1cmUgdGhhdCBubyBhcmd1bWVudHMgYXJlIHBhc3NlZCB0byBvblJlc29sdmVkLlxuICAgICAgb25SZXNvbHZlZC5jYWxsKG9wdF9jb250ZXh0KTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIENhbmNlbGxhYmxlUHJvbWlzZS5oYW5kbGVSZWplY3Rpb25fLmNhbGwobnVsbCwgZXJyKTtcbiAgICB9XG4gIH07XG5cbiAgdGhpcy5hZGRDYWxsYmFja0VudHJ5Xyh7XG4gICAgY2hpbGQ6IG51bGwsXG4gICAgb25SZWplY3RlZDogY2FsbGJhY2ssXG4gICAgb25GdWxmaWxsZWQ6IGNhbGxiYWNrXG4gIH0pO1xuICByZXR1cm4gdGhpcztcbn07XG5cblxuLyoqXG4gKiBBZGRzIGEgY2FsbGJhY2sgdGhhdCB3aWxsIGJlIGludm9rZWQgb25seSBpZiB0aGUgUHJvbWlzZSBpcyByZWplY3RlZC4gVGhpc1xuICogaXMgZXF1aXZhbGVudCB0byB7QGNvZGUgdGhlbihudWxsLCBvblJlamVjdGVkKX0uXG4gKlxuICogQHBhcmFtIHshZnVuY3Rpb24odGhpczpUSElTLCAqKTogKn0gb25SZWplY3RlZCBBIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZVxuICogICAgIGludm9rZWQgd2l0aCB0aGUgcmVqZWN0aW9uIHJlYXNvbiBpZiB0aGUgUHJvbWlzZSBpcyByZWplY3RlZC5cbiAqIEBwYXJhbSB7VEhJUz19IG9wdF9jb250ZXh0IEFuIG9wdGlvbmFsIGNvbnRleHQgb2JqZWN0IHRoYXQgd2lsbCBiZSB0aGVcbiAqICAgICBleGVjdXRpb24gY29udGV4dCBmb3IgdGhlIGNhbGxiYWNrcy4gQnkgZGVmYXVsdCwgZnVuY3Rpb25zIGFyZSBleGVjdXRlZFxuICogICAgIGluIHRoZSBnbG9iYWwgc2NvcGUuXG4gKiBAcmV0dXJuIHshQ2FuY2VsbGFibGVQcm9taXNlfSBBIG5ldyBQcm9taXNlIHRoYXQgd2lsbCByZWNlaXZlIHRoZSByZXN1bHQgb2YgdGhlXG4gKiAgICAgY2FsbGJhY2suXG4gKiBAdGVtcGxhdGUgVEhJU1xuICovXG5DYW5jZWxsYWJsZVByb21pc2UucHJvdG90eXBlLnRoZW5DYXRjaCA9IGZ1bmN0aW9uKG9uUmVqZWN0ZWQsIG9wdF9jb250ZXh0KSB7XG4gIHJldHVybiB0aGlzLmFkZENoaWxkUHJvbWlzZV8obnVsbCwgb25SZWplY3RlZCwgb3B0X2NvbnRleHQpO1xufTtcblxuLyoqXG4gKiBBbGlhcyBvZiB7QGxpbmsgQ2FuY2VsbGFibGVQcm9taXNlLnByb3RvdHlwZS50aGVuQ2F0Y2h9XG4gKi9cbkNhbmNlbGxhYmxlUHJvbWlzZS5wcm90b3R5cGUuY2F0Y2ggPSBDYW5jZWxsYWJsZVByb21pc2UucHJvdG90eXBlLnRoZW5DYXRjaDtcblxuXG4vKipcbiAqIENhbmNlbHMgdGhlIFByb21pc2UgaWYgaXQgaXMgc3RpbGwgcGVuZGluZyBieSByZWplY3RpbmcgaXQgd2l0aCBhIGNhbmNlbFxuICogRXJyb3IuIE5vIGFjdGlvbiBpcyBwZXJmb3JtZWQgaWYgdGhlIFByb21pc2UgaXMgYWxyZWFkeSByZXNvbHZlZC5cbiAqXG4gKiBBbGwgY2hpbGQgUHJvbWlzZXMgb2YgdGhlIGNhbmNlbGVkIFByb21pc2Ugd2lsbCBiZSByZWplY3RlZCB3aXRoIHRoZSBzYW1lXG4gKiBjYW5jZWwgZXJyb3IsIGFzIHdpdGggbm9ybWFsIFByb21pc2UgcmVqZWN0aW9uLiBJZiB0aGUgUHJvbWlzZSB0byBiZSBjYW5jZWxlZFxuICogaXMgdGhlIG9ubHkgY2hpbGQgb2YgYSBwZW5kaW5nIFByb21pc2UsIHRoZSBwYXJlbnQgUHJvbWlzZSB3aWxsIGFsc28gYmVcbiAqIGNhbmNlbGVkLiBDYW5jZWxsYXRpb24gbWF5IHByb3BhZ2F0ZSB1cHdhcmQgdGhyb3VnaCBtdWx0aXBsZSBnZW5lcmF0aW9ucy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZz19IG9wdF9tZXNzYWdlIEFuIG9wdGlvbmFsIGRlYnVnZ2luZyBtZXNzYWdlIGZvciBkZXNjcmliaW5nIHRoZVxuICogICAgIGNhbmNlbGxhdGlvbiByZWFzb24uXG4gKi9cbkNhbmNlbGxhYmxlUHJvbWlzZS5wcm90b3R5cGUuY2FuY2VsID0gZnVuY3Rpb24ob3B0X21lc3NhZ2UpIHtcbiAgaWYgKHRoaXMuc3RhdGVfID09PSBDYW5jZWxsYWJsZVByb21pc2UuU3RhdGVfLlBFTkRJTkcpIHtcbiAgICBhc3luYy5ydW4oZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgZXJyID0gbmV3IENhbmNlbGxhYmxlUHJvbWlzZS5DYW5jZWxsYXRpb25FcnJvcihvcHRfbWVzc2FnZSk7XG4gICAgICBlcnIuSVNfQ0FOQ0VMTEFUSU9OX0VSUk9SID0gdHJ1ZTtcbiAgICAgIHRoaXMuY2FuY2VsSW50ZXJuYWxfKGVycik7XG4gICAgfSwgdGhpcyk7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBDYW5jZWxzIHRoaXMgUHJvbWlzZSB3aXRoIHRoZSBnaXZlbiBlcnJvci5cbiAqXG4gKiBAcGFyYW0geyFFcnJvcn0gZXJyIFRoZSBjYW5jZWxsYXRpb24gZXJyb3IuXG4gKiBAcHJpdmF0ZVxuICovXG5DYW5jZWxsYWJsZVByb21pc2UucHJvdG90eXBlLmNhbmNlbEludGVybmFsXyA9IGZ1bmN0aW9uKGVycikge1xuICBpZiAodGhpcy5zdGF0ZV8gPT09IENhbmNlbGxhYmxlUHJvbWlzZS5TdGF0ZV8uUEVORElORykge1xuICAgIGlmICh0aGlzLnBhcmVudF8pIHtcbiAgICAgIC8vIENhbmNlbCB0aGUgUHJvbWlzZSBhbmQgcmVtb3ZlIGl0IGZyb20gdGhlIHBhcmVudCdzIGNoaWxkIGxpc3QuXG4gICAgICB0aGlzLnBhcmVudF8uY2FuY2VsQ2hpbGRfKHRoaXMsIGVycik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucmVzb2x2ZV8oQ2FuY2VsbGFibGVQcm9taXNlLlN0YXRlXy5SRUpFQ1RFRCwgZXJyKTtcbiAgICB9XG4gIH1cbn07XG5cblxuLyoqXG4gKiBDYW5jZWxzIGEgY2hpbGQgUHJvbWlzZSBmcm9tIHRoZSBsaXN0IG9mIGNhbGxiYWNrIGVudHJpZXMuIElmIHRoZSBQcm9taXNlIGhhc1xuICogbm90IGFscmVhZHkgYmVlbiByZXNvbHZlZCwgcmVqZWN0IGl0IHdpdGggYSBjYW5jZWwgZXJyb3IuIElmIHRoZXJlIGFyZSBub1xuICogb3RoZXIgY2hpbGRyZW4gaW4gdGhlIGxpc3Qgb2YgY2FsbGJhY2sgZW50cmllcywgcHJvcGFnYXRlIHRoZSBjYW5jZWxsYXRpb25cbiAqIGJ5IGNhbmNlbGluZyB0aGlzIFByb21pc2UgYXMgd2VsbC5cbiAqXG4gKiBAcGFyYW0geyFDYW5jZWxsYWJsZVByb21pc2V9IGNoaWxkUHJvbWlzZSBUaGUgUHJvbWlzZSB0byBjYW5jZWwuXG4gKiBAcGFyYW0geyFFcnJvcn0gZXJyIFRoZSBjYW5jZWwgZXJyb3IgdG8gdXNlIGZvciByZWplY3RpbmcgdGhlIFByb21pc2UuXG4gKiBAcHJpdmF0ZVxuICovXG5DYW5jZWxsYWJsZVByb21pc2UucHJvdG90eXBlLmNhbmNlbENoaWxkXyA9IGZ1bmN0aW9uKGNoaWxkUHJvbWlzZSwgZXJyKSB7XG4gIGlmICghdGhpcy5jYWxsYmFja0VudHJpZXNfKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBjaGlsZENvdW50ID0gMDtcbiAgdmFyIGNoaWxkSW5kZXggPSAtMTtcblxuICAvLyBGaW5kIHRoZSBjYWxsYmFjayBlbnRyeSBmb3IgdGhlIGNoaWxkUHJvbWlzZSwgYW5kIGNvdW50IHdoZXRoZXIgdGhlcmUgYXJlXG4gIC8vIGFkZGl0aW9uYWwgY2hpbGQgUHJvbWlzZXMuXG4gIGZvciAodmFyIGkgPSAwLCBlbnRyeTsgKGVudHJ5ID0gdGhpcy5jYWxsYmFja0VudHJpZXNfW2ldKTsgaSsrKSB7XG4gICAgdmFyIGNoaWxkID0gZW50cnkuY2hpbGQ7XG4gICAgaWYgKGNoaWxkKSB7XG4gICAgICBjaGlsZENvdW50Kys7XG4gICAgICBpZiAoY2hpbGQgPT09IGNoaWxkUHJvbWlzZSkge1xuICAgICAgICBjaGlsZEluZGV4ID0gaTtcbiAgICAgIH1cbiAgICAgIGlmIChjaGlsZEluZGV4ID49IDAgJiYgY2hpbGRDb3VudCA+IDEpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gSWYgdGhlIGNoaWxkIFByb21pc2Ugd2FzIHRoZSBvbmx5IGNoaWxkLCBjYW5jZWwgdGhpcyBQcm9taXNlIGFzIHdlbGwuXG4gIC8vIE90aGVyd2lzZSwgcmVqZWN0IG9ubHkgdGhlIGNoaWxkIFByb21pc2Ugd2l0aCB0aGUgY2FuY2VsIGVycm9yLlxuICBpZiAoY2hpbGRJbmRleCA+PSAwKSB7XG4gICAgaWYgKHRoaXMuc3RhdGVfID09PSBDYW5jZWxsYWJsZVByb21pc2UuU3RhdGVfLlBFTkRJTkcgJiYgY2hpbGRDb3VudCA9PT0gMSkge1xuICAgICAgdGhpcy5jYW5jZWxJbnRlcm5hbF8oZXJyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGNhbGxiYWNrRW50cnkgPSB0aGlzLmNhbGxiYWNrRW50cmllc18uc3BsaWNlKGNoaWxkSW5kZXgsIDEpWzBdO1xuICAgICAgdGhpcy5leGVjdXRlQ2FsbGJhY2tfKFxuICAgICAgICBjYWxsYmFja0VudHJ5LCBDYW5jZWxsYWJsZVByb21pc2UuU3RhdGVfLlJFSkVDVEVELCBlcnIpO1xuICAgIH1cbiAgfVxufTtcblxuXG4vKipcbiAqIEFkZHMgYSBjYWxsYmFjayBlbnRyeSB0byB0aGUgY3VycmVudCBQcm9taXNlLCBhbmQgc2NoZWR1bGVzIGNhbGxiYWNrXG4gKiBleGVjdXRpb24gaWYgdGhlIFByb21pc2UgaGFzIGFscmVhZHkgYmVlbiByZXNvbHZlZC5cbiAqXG4gKiBAcGFyYW0ge0NhbmNlbGxhYmxlUHJvbWlzZS5DYWxsYmFja0VudHJ5X30gY2FsbGJhY2tFbnRyeSBSZWNvcmQgY29udGFpbmluZ1xuICogICAgIHtAY29kZSBvbkZ1bGZpbGxlZH0gYW5kIHtAY29kZSBvblJlamVjdGVkfSBjYWxsYmFja3MgdG8gZXhlY3V0ZSBhZnRlclxuICogICAgIHRoZSBQcm9taXNlIGlzIHJlc29sdmVkLlxuICogQHByaXZhdGVcbiAqL1xuQ2FuY2VsbGFibGVQcm9taXNlLnByb3RvdHlwZS5hZGRDYWxsYmFja0VudHJ5XyA9IGZ1bmN0aW9uKGNhbGxiYWNrRW50cnkpIHtcbiAgaWYgKCghdGhpcy5jYWxsYmFja0VudHJpZXNfIHx8ICF0aGlzLmNhbGxiYWNrRW50cmllc18ubGVuZ3RoKSAmJlxuICAgICh0aGlzLnN0YXRlXyA9PT0gQ2FuY2VsbGFibGVQcm9taXNlLlN0YXRlXy5GVUxGSUxMRUQgfHxcbiAgICB0aGlzLnN0YXRlXyA9PT0gQ2FuY2VsbGFibGVQcm9taXNlLlN0YXRlXy5SRUpFQ1RFRCkpIHtcbiAgICB0aGlzLnNjaGVkdWxlQ2FsbGJhY2tzXygpO1xuICB9XG4gIGlmICghdGhpcy5jYWxsYmFja0VudHJpZXNfKSB7XG4gICAgdGhpcy5jYWxsYmFja0VudHJpZXNfID0gW107XG4gIH1cbiAgdGhpcy5jYWxsYmFja0VudHJpZXNfLnB1c2goY2FsbGJhY2tFbnRyeSk7XG59O1xuXG5cbi8qKlxuICogQ3JlYXRlcyBhIGNoaWxkIFByb21pc2UgYW5kIGFkZHMgaXQgdG8gdGhlIGNhbGxiYWNrIGVudHJ5IGxpc3QuIFRoZSByZXN1bHQgb2ZcbiAqIHRoZSBjaGlsZCBQcm9taXNlIGlzIGRldGVybWluZWQgYnkgdGhlIHN0YXRlIG9mIHRoZSBwYXJlbnQgUHJvbWlzZSBhbmQgdGhlXG4gKiByZXN1bHQgb2YgdGhlIHtAY29kZSBvbkZ1bGZpbGxlZH0gb3Ige0Bjb2RlIG9uUmVqZWN0ZWR9IGNhbGxiYWNrcyBhc1xuICogc3BlY2lmaWVkIGluIHRoZSBQcm9taXNlIHJlc29sdXRpb24gcHJvY2VkdXJlLlxuICpcbiAqIEBzZWUgaHR0cDovL3Byb21pc2VzYXBsdXMuY29tLyN0aGVfX21ldGhvZFxuICpcbiAqIEBwYXJhbSB7P2Z1bmN0aW9uKHRoaXM6VEhJUywgVFlQRSk6XG4gKiAgICAgICAgICAoUkVTVUxUfENhbmNlbGxhYmxlUHJvbWlzZS48UkVTVUxUPnxUaGVuYWJsZSl9IG9uRnVsZmlsbGVkIEEgY2FsbGJhY2sgdGhhdFxuICogICAgIHdpbGwgYmUgaW52b2tlZCBpZiB0aGUgUHJvbWlzZSBpcyBmdWxsZmlsbGVkLCBvciBudWxsLlxuICogQHBhcmFtIHs/ZnVuY3Rpb24odGhpczpUSElTLCAqKTogKn0gb25SZWplY3RlZCBBIGNhbGxiYWNrIHRoYXQgd2lsbCBiZVxuICogICAgIGludm9rZWQgaWYgdGhlIFByb21pc2UgaXMgcmVqZWN0ZWQsIG9yIG51bGwuXG4gKiBAcGFyYW0ge1RISVM9fSBvcHRfY29udGV4dCBBbiBvcHRpb25hbCBleGVjdXRpb24gY29udGV4dCBmb3IgdGhlIGNhbGxiYWNrcy5cbiAqICAgICBpbiB0aGUgZGVmYXVsdCBjYWxsaW5nIGNvbnRleHQuXG4gKiBAcmV0dXJuIHshQ2FuY2VsbGFibGVQcm9taXNlfSBUaGUgY2hpbGQgUHJvbWlzZS5cbiAqIEB0ZW1wbGF0ZSBSRVNVTFQsVEhJU1xuICogQHByaXZhdGVcbiAqL1xuQ2FuY2VsbGFibGVQcm9taXNlLnByb3RvdHlwZS5hZGRDaGlsZFByb21pc2VfID0gZnVuY3Rpb24oXG5vbkZ1bGZpbGxlZCwgb25SZWplY3RlZCwgb3B0X2NvbnRleHQpIHtcblxuICB2YXIgY2FsbGJhY2tFbnRyeSA9IHtcbiAgICBjaGlsZDogbnVsbCxcbiAgICBvbkZ1bGZpbGxlZDogbnVsbCxcbiAgICBvblJlamVjdGVkOiBudWxsXG4gIH07XG5cbiAgY2FsbGJhY2tFbnRyeS5jaGlsZCA9IG5ldyBDYW5jZWxsYWJsZVByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgLy8gSW52b2tlIG9uRnVsZmlsbGVkLCBvciByZXNvbHZlIHdpdGggdGhlIHBhcmVudCdzIHZhbHVlIGlmIGFic2VudC5cbiAgICBjYWxsYmFja0VudHJ5Lm9uRnVsZmlsbGVkID0gb25GdWxmaWxsZWQgPyBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IG9uRnVsZmlsbGVkLmNhbGwob3B0X2NvbnRleHQsIHZhbHVlKTtcbiAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgfVxuICAgIH0gOiByZXNvbHZlO1xuXG4gICAgLy8gSW52b2tlIG9uUmVqZWN0ZWQsIG9yIHJlamVjdCB3aXRoIHRoZSBwYXJlbnQncyByZWFzb24gaWYgYWJzZW50LlxuICAgIGNhbGxiYWNrRW50cnkub25SZWplY3RlZCA9IG9uUmVqZWN0ZWQgPyBmdW5jdGlvbihyZWFzb24pIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBvblJlamVjdGVkLmNhbGwob3B0X2NvbnRleHQsIHJlYXNvbik7XG4gICAgICAgIGlmICghaXNEZWYocmVzdWx0KSAmJiByZWFzb24uSVNfQ0FOQ0VMTEFUSU9OX0VSUk9SKSB7XG4gICAgICAgICAgLy8gUHJvcGFnYXRlIGNhbmNlbGxhdGlvbiB0byBjaGlsZHJlbiBpZiBubyBvdGhlciByZXN1bHQgaXMgcmV0dXJuZWQuXG4gICAgICAgICAgcmVqZWN0KHJlYXNvbik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICB9XG4gICAgfSA6IHJlamVjdDtcbiAgfSk7XG5cbiAgY2FsbGJhY2tFbnRyeS5jaGlsZC5wYXJlbnRfID0gdGhpcztcbiAgdGhpcy5hZGRDYWxsYmFja0VudHJ5XyhcbiAgICAvKiogQHR5cGUge0NhbmNlbGxhYmxlUHJvbWlzZS5DYWxsYmFja0VudHJ5X30gKi8gKGNhbGxiYWNrRW50cnkpKTtcbiAgcmV0dXJuIGNhbGxiYWNrRW50cnkuY2hpbGQ7XG59O1xuXG5cbi8qKlxuICogVW5ibG9ja3MgdGhlIFByb21pc2UgYW5kIGZ1bGZpbGxzIGl0IHdpdGggdGhlIGdpdmVuIHZhbHVlLlxuICpcbiAqIEBwYXJhbSB7VFlQRX0gdmFsdWVcbiAqIEBwcml2YXRlXG4gKi9cbkNhbmNlbGxhYmxlUHJvbWlzZS5wcm90b3R5cGUudW5ibG9ja0FuZEZ1bGZpbGxfID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgaWYgKHRoaXMuc3RhdGVfICE9PSBDYW5jZWxsYWJsZVByb21pc2UuU3RhdGVfLkJMT0NLRUQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0NhbmNlbGxhYmxlUHJvbWlzZSBpcyBub3QgYmxvY2tlZC4nKTtcbiAgfVxuICB0aGlzLnN0YXRlXyA9IENhbmNlbGxhYmxlUHJvbWlzZS5TdGF0ZV8uUEVORElORztcbiAgdGhpcy5yZXNvbHZlXyhDYW5jZWxsYWJsZVByb21pc2UuU3RhdGVfLkZVTEZJTExFRCwgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIFVuYmxvY2tzIHRoZSBQcm9taXNlIGFuZCByZWplY3RzIGl0IHdpdGggdGhlIGdpdmVuIHJlamVjdGlvbiByZWFzb24uXG4gKlxuICogQHBhcmFtIHsqfSByZWFzb25cbiAqIEBwcml2YXRlXG4gKi9cbkNhbmNlbGxhYmxlUHJvbWlzZS5wcm90b3R5cGUudW5ibG9ja0FuZFJlamVjdF8gPSBmdW5jdGlvbihyZWFzb24pIHtcbiAgaWYgKHRoaXMuc3RhdGVfICE9PSBDYW5jZWxsYWJsZVByb21pc2UuU3RhdGVfLkJMT0NLRUQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0NhbmNlbGxhYmxlUHJvbWlzZSBpcyBub3QgYmxvY2tlZC4nKTtcbiAgfVxuICB0aGlzLnN0YXRlXyA9IENhbmNlbGxhYmxlUHJvbWlzZS5TdGF0ZV8uUEVORElORztcbiAgdGhpcy5yZXNvbHZlXyhDYW5jZWxsYWJsZVByb21pc2UuU3RhdGVfLlJFSkVDVEVELCByZWFzb24pO1xufTtcblxuXG4vKipcbiAqIEF0dGVtcHRzIHRvIHJlc29sdmUgYSBQcm9taXNlIHdpdGggYSBnaXZlbiByZXNvbHV0aW9uIHN0YXRlIGFuZCB2YWx1ZS4gVGhpc1xuICogaXMgYSBuby1vcCBpZiB0aGUgZ2l2ZW4gUHJvbWlzZSBoYXMgYWxyZWFkeSBiZWVuIHJlc29sdmVkLlxuICpcbiAqIElmIHRoZSBnaXZlbiByZXN1bHQgaXMgYSBUaGVuYWJsZSAoc3VjaCBhcyBhbm90aGVyIFByb21pc2UpLCB0aGUgUHJvbWlzZSB3aWxsXG4gKiBiZSByZXNvbHZlZCB3aXRoIHRoZSBzYW1lIHN0YXRlIGFuZCByZXN1bHQgYXMgdGhlIFRoZW5hYmxlIG9uY2UgaXQgaXMgaXRzZWxmXG4gKiByZXNvbHZlZC5cbiAqXG4gKiBJZiB0aGUgZ2l2ZW4gcmVzdWx0IGlzIG5vdCBhIFRoZW5hYmxlLCB0aGUgUHJvbWlzZSB3aWxsIGJlIGZ1bGZpbGxlZCBvclxuICogcmVqZWN0ZWQgd2l0aCB0aGF0IHJlc3VsdCBiYXNlZCBvbiB0aGUgZ2l2ZW4gc3RhdGUuXG4gKlxuICogQHNlZSBodHRwOi8vcHJvbWlzZXNhcGx1cy5jb20vI3RoZV9wcm9taXNlX3Jlc29sdXRpb25fcHJvY2VkdXJlXG4gKlxuICogQHBhcmFtIHtDYW5jZWxsYWJsZVByb21pc2UuU3RhdGVffSBzdGF0ZVxuICogQHBhcmFtIHsqfSB4IFRoZSByZXN1bHQgdG8gYXBwbHkgdG8gdGhlIFByb21pc2UuXG4gKiBAcHJpdmF0ZVxuICovXG5DYW5jZWxsYWJsZVByb21pc2UucHJvdG90eXBlLnJlc29sdmVfID0gZnVuY3Rpb24oc3RhdGUsIHgpIHtcbiAgaWYgKHRoaXMuc3RhdGVfICE9PSBDYW5jZWxsYWJsZVByb21pc2UuU3RhdGVfLlBFTkRJTkcpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAodGhpcyA9PT0geCkge1xuICAgIHN0YXRlID0gQ2FuY2VsbGFibGVQcm9taXNlLlN0YXRlXy5SRUpFQ1RFRDtcbiAgICB4ID0gbmV3IFR5cGVFcnJvcignQ2FuY2VsbGFibGVQcm9taXNlIGNhbm5vdCByZXNvbHZlIHRvIGl0c2VsZicpO1xuXG4gIH0gZWxzZSBpZiAoVGhlbmFibGUuaXNJbXBsZW1lbnRlZEJ5KHgpKSB7XG4gICAgeCA9IC8qKiBAdHlwZSB7IVRoZW5hYmxlfSAqLyAoeCk7XG4gICAgdGhpcy5zdGF0ZV8gPSBDYW5jZWxsYWJsZVByb21pc2UuU3RhdGVfLkJMT0NLRUQ7XG4gICAgeC50aGVuKHRoaXMudW5ibG9ja0FuZEZ1bGZpbGxfLCB0aGlzLnVuYmxvY2tBbmRSZWplY3RfLCB0aGlzKTtcbiAgICByZXR1cm47XG5cbiAgfSBlbHNlIGlmIChpc09iamVjdCh4KSkge1xuICAgIHRyeSB7XG4gICAgICB2YXIgdGhlbiA9IHgudGhlbjtcbiAgICAgIGlmIChpc0Z1bmN0aW9uKHRoZW4pKSB7XG4gICAgICAgIHRoaXMudHJ5VGhlbl8oeCwgdGhlbik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBzdGF0ZSA9IENhbmNlbGxhYmxlUHJvbWlzZS5TdGF0ZV8uUkVKRUNURUQ7XG4gICAgICB4ID0gZTtcbiAgICB9XG4gIH1cblxuICB0aGlzLnJlc3VsdF8gPSB4O1xuICB0aGlzLnN0YXRlXyA9IHN0YXRlO1xuICB0aGlzLnNjaGVkdWxlQ2FsbGJhY2tzXygpO1xuXG4gIGlmIChzdGF0ZSA9PT0gQ2FuY2VsbGFibGVQcm9taXNlLlN0YXRlXy5SRUpFQ1RFRCAmJiAheC5JU19DQU5DRUxMQVRJT05fRVJST1IpIHtcbiAgICBDYW5jZWxsYWJsZVByb21pc2UuYWRkVW5oYW5kbGVkUmVqZWN0aW9uXyh0aGlzLCB4KTtcbiAgfVxufTtcblxuXG4vKipcbiAqIEF0dGVtcHRzIHRvIGNhbGwgdGhlIHtAY29kZSB0aGVufSBtZXRob2Qgb24gYW4gb2JqZWN0IGluIHRoZSBob3BlcyB0aGF0IGl0IGlzXG4gKiBhIFByb21pc2UtY29tcGF0aWJsZSBpbnN0YW5jZS4gVGhpcyBhbGxvd3MgaW50ZXJvcGVyYXRpb24gYmV0d2VlbiBkaWZmZXJlbnRcbiAqIFByb21pc2UgaW1wbGVtZW50YXRpb25zLCBob3dldmVyIGEgbm9uLWNvbXBsaWFudCBvYmplY3QgbWF5IGNhdXNlIGEgUHJvbWlzZVxuICogdG8gaGFuZyBpbmRlZmluaXRlbHkuIElmIHRoZSB7QGNvZGUgdGhlbn0gbWV0aG9kIHRocm93cyBhbiBleGNlcHRpb24sIHRoZVxuICogZGVwZW5kZW50IFByb21pc2Ugd2lsbCBiZSByZWplY3RlZCB3aXRoIHRoZSB0aHJvd24gdmFsdWUuXG4gKlxuICogQHNlZSBodHRwOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTcwXG4gKlxuICogQHBhcmFtIHtUaGVuYWJsZX0gdGhlbmFibGUgQW4gb2JqZWN0IHdpdGggYSB7QGNvZGUgdGhlbn0gbWV0aG9kIHRoYXQgbWF5IGJlXG4gKiAgICAgY29tcGF0aWJsZSB3aXRoIHRoZSBQcm9taXNlL0ErIHNwZWNpZmljYXRpb24uXG4gKiBAcGFyYW0geyFGdW5jdGlvbn0gdGhlbiBUaGUge0Bjb2RlIHRoZW59IG1ldGhvZCBvZiB0aGUgVGhlbmFibGUgb2JqZWN0LlxuICogQHByaXZhdGVcbiAqL1xuQ2FuY2VsbGFibGVQcm9taXNlLnByb3RvdHlwZS50cnlUaGVuXyA9IGZ1bmN0aW9uKHRoZW5hYmxlLCB0aGVuKSB7XG4gIHRoaXMuc3RhdGVfID0gQ2FuY2VsbGFibGVQcm9taXNlLlN0YXRlXy5CTE9DS0VEO1xuICB2YXIgcHJvbWlzZSA9IHRoaXM7XG4gIHZhciBjYWxsZWQgPSBmYWxzZTtcblxuICB2YXIgcmVzb2x2ZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgaWYgKCFjYWxsZWQpIHtcbiAgICAgIGNhbGxlZCA9IHRydWU7XG4gICAgICBwcm9taXNlLnVuYmxvY2tBbmRGdWxmaWxsXyh2YWx1ZSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciByZWplY3QgPSBmdW5jdGlvbihyZWFzb24pIHtcbiAgICBpZiAoIWNhbGxlZCkge1xuICAgICAgY2FsbGVkID0gdHJ1ZTtcbiAgICAgIHByb21pc2UudW5ibG9ja0FuZFJlamVjdF8ocmVhc29uKTtcbiAgICB9XG4gIH07XG5cbiAgdHJ5IHtcbiAgICB0aGVuLmNhbGwodGhlbmFibGUsIHJlc29sdmUsIHJlamVjdCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZWplY3QoZSk7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBFeGVjdXRlcyB0aGUgcGVuZGluZyBjYWxsYmFja3Mgb2YgYSByZXNvbHZlZCBQcm9taXNlIGFmdGVyIGEgdGltZW91dC5cbiAqXG4gKiBTZWN0aW9uIDIuMi40IG9mIHRoZSBQcm9taXNlcy9BKyBzcGVjaWZpY2F0aW9uIHJlcXVpcmVzIHRoYXQgUHJvbWlzZVxuICogY2FsbGJhY2tzIG11c3Qgb25seSBiZSBpbnZva2VkIGZyb20gYSBjYWxsIHN0YWNrIHRoYXQgb25seSBjb250YWlucyBQcm9taXNlXG4gKiBpbXBsZW1lbnRhdGlvbiBjb2RlLCB3aGljaCB3ZSBhY2NvbXBsaXNoIGJ5IGludm9raW5nIGNhbGxiYWNrIGV4ZWN1dGlvbiBhZnRlclxuICogYSB0aW1lb3V0LiBJZiB7QGNvZGUgc3RhcnRFeGVjdXRpb25ffSBpcyBjYWxsZWQgbXVsdGlwbGUgdGltZXMgZm9yIHRoZSBzYW1lXG4gKiBQcm9taXNlLCB0aGUgY2FsbGJhY2sgY2hhaW4gd2lsbCBiZSBldmFsdWF0ZWQgb25seSBvbmNlLiBBZGRpdGlvbmFsIGNhbGxiYWNrc1xuICogbWF5IGJlIGFkZGVkIGR1cmluZyB0aGUgZXZhbHVhdGlvbiBwaGFzZSwgYW5kIHdpbGwgYmUgZXhlY3V0ZWQgaW4gdGhlIHNhbWVcbiAqIGV2ZW50IGxvb3AuXG4gKlxuICogQWxsIFByb21pc2VzIGFkZGVkIHRvIHRoZSB3YWl0aW5nIGxpc3QgZHVyaW5nIHRoZSBzYW1lIGJyb3dzZXIgZXZlbnQgbG9vcFxuICogd2lsbCBiZSBleGVjdXRlZCBpbiBvbmUgYmF0Y2ggdG8gYXZvaWQgdXNpbmcgYSBzZXBhcmF0ZSB0aW1lb3V0IHBlciBQcm9taXNlLlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbkNhbmNlbGxhYmxlUHJvbWlzZS5wcm90b3R5cGUuc2NoZWR1bGVDYWxsYmFja3NfID0gZnVuY3Rpb24oKSB7XG4gIGlmICghdGhpcy5leGVjdXRpbmdfKSB7XG4gICAgdGhpcy5leGVjdXRpbmdfID0gdHJ1ZTtcbiAgICBhc3luYy5ydW4odGhpcy5leGVjdXRlQ2FsbGJhY2tzXywgdGhpcyk7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBFeGVjdXRlcyBhbGwgcGVuZGluZyBjYWxsYmFja3MgZm9yIHRoaXMgUHJvbWlzZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5DYW5jZWxsYWJsZVByb21pc2UucHJvdG90eXBlLmV4ZWN1dGVDYWxsYmFja3NfID0gZnVuY3Rpb24oKSB7XG4gIHdoaWxlICh0aGlzLmNhbGxiYWNrRW50cmllc18gJiYgdGhpcy5jYWxsYmFja0VudHJpZXNfLmxlbmd0aCkge1xuICAgIHZhciBlbnRyaWVzID0gdGhpcy5jYWxsYmFja0VudHJpZXNfO1xuICAgIHRoaXMuY2FsbGJhY2tFbnRyaWVzXyA9IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbnRyaWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLmV4ZWN1dGVDYWxsYmFja18oZW50cmllc1tpXSwgdGhpcy5zdGF0ZV8sIHRoaXMucmVzdWx0Xyk7XG4gICAgfVxuICB9XG4gIHRoaXMuZXhlY3V0aW5nXyA9IGZhbHNlO1xufTtcblxuXG4vKipcbiAqIEV4ZWN1dGVzIGEgcGVuZGluZyBjYWxsYmFjayBmb3IgdGhpcyBQcm9taXNlLiBJbnZva2VzIGFuIHtAY29kZSBvbkZ1bGZpbGxlZH1cbiAqIG9yIHtAY29kZSBvblJlamVjdGVkfSBjYWxsYmFjayBiYXNlZCBvbiB0aGUgcmVzb2x2ZWQgc3RhdGUgb2YgdGhlIFByb21pc2UuXG4gKlxuICogQHBhcmFtIHshQ2FuY2VsbGFibGVQcm9taXNlLkNhbGxiYWNrRW50cnlffSBjYWxsYmFja0VudHJ5IEFuIGVudHJ5IGNvbnRhaW5pbmcgdGhlXG4gKiAgICAgb25GdWxmaWxsZWQgYW5kL29yIG9uUmVqZWN0ZWQgY2FsbGJhY2tzIGZvciB0aGlzIHN0ZXAuXG4gKiBAcGFyYW0ge0NhbmNlbGxhYmxlUHJvbWlzZS5TdGF0ZV99IHN0YXRlIFRoZSByZXNvbHV0aW9uIHN0YXR1cyBvZiB0aGUgUHJvbWlzZSxcbiAqICAgICBlaXRoZXIgRlVMRklMTEVEIG9yIFJFSkVDVEVELlxuICogQHBhcmFtIHsqfSByZXN1bHQgVGhlIHJlc29sdmVkIHJlc3VsdCBvZiB0aGUgUHJvbWlzZS5cbiAqIEBwcml2YXRlXG4gKi9cbkNhbmNlbGxhYmxlUHJvbWlzZS5wcm90b3R5cGUuZXhlY3V0ZUNhbGxiYWNrXyA9IGZ1bmN0aW9uKFxuY2FsbGJhY2tFbnRyeSwgc3RhdGUsIHJlc3VsdCkge1xuICBpZiAoc3RhdGUgPT09IENhbmNlbGxhYmxlUHJvbWlzZS5TdGF0ZV8uRlVMRklMTEVEKSB7XG4gICAgY2FsbGJhY2tFbnRyeS5vbkZ1bGZpbGxlZChyZXN1bHQpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMucmVtb3ZlVW5oYW5kbGVkUmVqZWN0aW9uXygpO1xuICAgIGNhbGxiYWNrRW50cnkub25SZWplY3RlZChyZXN1bHQpO1xuICB9XG59O1xuXG5cbi8qKlxuICogTWFya3MgdGhpcyByZWplY3RlZCBQcm9taXNlIGFzIGhhdmluZyBiZWluZyBoYW5kbGVkLiBBbHNvIG1hcmtzIGFueSBwYXJlbnRcbiAqIFByb21pc2VzIGluIHRoZSByZWplY3RlZCBzdGF0ZSBhcyBoYW5kbGVkLiBUaGUgcmVqZWN0aW9uIGhhbmRsZXIgd2lsbCBub1xuICogbG9uZ2VyIGJlIGludm9rZWQgZm9yIHRoaXMgUHJvbWlzZSAoaWYgaXQgaGFzIG5vdCBiZWVuIGNhbGxlZCBhbHJlYWR5KS5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5DYW5jZWxsYWJsZVByb21pc2UucHJvdG90eXBlLnJlbW92ZVVuaGFuZGxlZFJlamVjdGlvbl8gPSBmdW5jdGlvbigpIHtcbiAgdmFyIHA7XG4gIGlmIChDYW5jZWxsYWJsZVByb21pc2UuVU5IQU5ETEVEX1JFSkVDVElPTl9ERUxBWSA+IDApIHtcbiAgICBmb3IgKHAgPSB0aGlzOyBwICYmIHAudW5oYW5kbGVkUmVqZWN0aW9uSWRfOyBwID0gcC5wYXJlbnRfKSB7XG4gICAgICBjbGVhclRpbWVvdXQocC51bmhhbmRsZWRSZWplY3Rpb25JZF8pO1xuICAgICAgcC51bmhhbmRsZWRSZWplY3Rpb25JZF8gPSAwO1xuICAgIH1cbiAgfSBlbHNlIGlmIChDYW5jZWxsYWJsZVByb21pc2UuVU5IQU5ETEVEX1JFSkVDVElPTl9ERUxBWSA9PT0gMCkge1xuICAgIGZvciAocCA9IHRoaXM7IHAgJiYgcC5oYWRVbmhhbmRsZWRSZWplY3Rpb25fOyBwID0gcC5wYXJlbnRfKSB7XG4gICAgICBwLmhhZFVuaGFuZGxlZFJlamVjdGlvbl8gPSBmYWxzZTtcbiAgICB9XG4gIH1cbn07XG5cblxuLyoqXG4gKiBNYXJrcyB0aGlzIHJlamVjdGVkIFByb21pc2UgYXMgdW5oYW5kbGVkLiBJZiBubyB7QGNvZGUgb25SZWplY3RlZH0gY2FsbGJhY2tcbiAqIGlzIGNhbGxlZCBmb3IgdGhpcyBQcm9taXNlIGJlZm9yZSB0aGUge0Bjb2RlIFVOSEFORExFRF9SRUpFQ1RJT05fREVMQVl9XG4gKiBleHBpcmVzLCB0aGUgcmVhc29uIHdpbGwgYmUgcGFzc2VkIHRvIHRoZSB1bmhhbmRsZWQgcmVqZWN0aW9uIGhhbmRsZXIuIFRoZVxuICogaGFuZGxlciB0eXBpY2FsbHkgcmV0aHJvd3MgdGhlIHJlamVjdGlvbiByZWFzb24gc28gdGhhdCBpdCBiZWNvbWVzIHZpc2libGUgaW5cbiAqIHRoZSBkZXZlbG9wZXIgY29uc29sZS5cbiAqXG4gKiBAcGFyYW0geyFDYW5jZWxsYWJsZVByb21pc2V9IHByb21pc2UgVGhlIHJlamVjdGVkIFByb21pc2UuXG4gKiBAcGFyYW0geyp9IHJlYXNvbiBUaGUgUHJvbWlzZSByZWplY3Rpb24gcmVhc29uLlxuICogQHByaXZhdGVcbiAqL1xuQ2FuY2VsbGFibGVQcm9taXNlLmFkZFVuaGFuZGxlZFJlamVjdGlvbl8gPSBmdW5jdGlvbihwcm9taXNlLCByZWFzb24pIHtcbiAgaWYgKENhbmNlbGxhYmxlUHJvbWlzZS5VTkhBTkRMRURfUkVKRUNUSU9OX0RFTEFZID4gMCkge1xuICAgIHByb21pc2UudW5oYW5kbGVkUmVqZWN0aW9uSWRfID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgIENhbmNlbGxhYmxlUHJvbWlzZS5oYW5kbGVSZWplY3Rpb25fLmNhbGwobnVsbCwgcmVhc29uKTtcbiAgICB9LCBDYW5jZWxsYWJsZVByb21pc2UuVU5IQU5ETEVEX1JFSkVDVElPTl9ERUxBWSk7XG5cbiAgfSBlbHNlIGlmIChDYW5jZWxsYWJsZVByb21pc2UuVU5IQU5ETEVEX1JFSkVDVElPTl9ERUxBWSA9PT0gMCkge1xuICAgIHByb21pc2UuaGFkVW5oYW5kbGVkUmVqZWN0aW9uXyA9IHRydWU7XG4gICAgYXN5bmMucnVuKGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHByb21pc2UuaGFkVW5oYW5kbGVkUmVqZWN0aW9uXykge1xuICAgICAgICBDYW5jZWxsYWJsZVByb21pc2UuaGFuZGxlUmVqZWN0aW9uXy5jYWxsKG51bGwsIHJlYXNvbik7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBBIG1ldGhvZCB0aGF0IGlzIGludm9rZWQgd2l0aCB0aGUgcmVqZWN0aW9uIHJlYXNvbnMgZm9yIFByb21pc2VzIHRoYXQgYXJlXG4gKiByZWplY3RlZCBidXQgaGF2ZSBubyB7QGNvZGUgb25SZWplY3RlZH0gY2FsbGJhY2tzIHJlZ2lzdGVyZWQgeWV0LlxuICogQHR5cGUge2Z1bmN0aW9uKCopfVxuICogQHByaXZhdGVcbiAqL1xuQ2FuY2VsbGFibGVQcm9taXNlLmhhbmRsZVJlamVjdGlvbl8gPSBhc3luYy50aHJvd0V4Y2VwdGlvbjtcblxuXG4vKipcbiAqIFNldHMgYSBoYW5kbGVyIHRoYXQgd2lsbCBiZSBjYWxsZWQgd2l0aCByZWFzb25zIGZyb20gdW5oYW5kbGVkIHJlamVjdGVkXG4gKiBQcm9taXNlcy4gSWYgdGhlIHJlamVjdGVkIFByb21pc2UgKG9yIG9uZSBvZiBpdHMgZGVzY2VuZGFudHMpIGhhcyBhblxuICoge0Bjb2RlIG9uUmVqZWN0ZWR9IGNhbGxiYWNrIHJlZ2lzdGVyZWQsIHRoZSByZWplY3Rpb24gd2lsbCBiZSBjb25zaWRlcmVkXG4gKiBoYW5kbGVkLCBhbmQgdGhlIHJlamVjdGlvbiBoYW5kbGVyIHdpbGwgbm90IGJlIGNhbGxlZC5cbiAqXG4gKiBCeSBkZWZhdWx0LCB1bmhhbmRsZWQgcmVqZWN0aW9ucyBhcmUgcmV0aHJvd24gc28gdGhhdCB0aGUgZXJyb3IgbWF5IGJlXG4gKiBjYXB0dXJlZCBieSB0aGUgZGV2ZWxvcGVyIGNvbnNvbGUgb3IgYSB7QGNvZGUgd2luZG93Lm9uZXJyb3J9IGhhbmRsZXIuXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbigqKX0gaGFuZGxlciBBIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBjYWxsZWQgd2l0aCByZWFzb25zIGZyb21cbiAqICAgICByZWplY3RlZCBQcm9taXNlcy4gRGVmYXVsdHMgdG8ge0Bjb2RlIGFzeW5jLnRocm93RXhjZXB0aW9ufS5cbiAqL1xuQ2FuY2VsbGFibGVQcm9taXNlLnNldFVuaGFuZGxlZFJlamVjdGlvbkhhbmRsZXIgPSBmdW5jdGlvbihoYW5kbGVyKSB7XG4gIENhbmNlbGxhYmxlUHJvbWlzZS5oYW5kbGVSZWplY3Rpb25fID0gaGFuZGxlcjtcbn07XG5cblxuXG4vKipcbiAqIEVycm9yIHVzZWQgYXMgYSByZWplY3Rpb24gcmVhc29uIGZvciBjYW5jZWxlZCBQcm9taXNlcy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZz19IG9wdF9tZXNzYWdlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBleHRlbmRzIHtFcnJvcn1cbiAqIEBmaW5hbFxuICovXG5DYW5jZWxsYWJsZVByb21pc2UuQ2FuY2VsbGF0aW9uRXJyb3IgPSBjbGFzcyBleHRlbmRzIEVycm9yIHtcbiAgY29uc3RydWN0b3Iob3B0X21lc3NhZ2UpIHtcbiAgICAgc3VwZXIob3B0X21lc3NhZ2UpO1xuXG4gICAgIGlmIChvcHRfbWVzc2FnZSkge1xuICAgICAgIHRoaXMubWVzc2FnZSA9IG9wdF9tZXNzYWdlO1xuICAgICB9XG4gICB9XG59O1xuXG4vKiogQG92ZXJyaWRlICovXG5DYW5jZWxsYWJsZVByb21pc2UuQ2FuY2VsbGF0aW9uRXJyb3IucHJvdG90eXBlLm5hbWUgPSAnY2FuY2VsJztcblxuZXhwb3J0IHtDYW5jZWxsYWJsZVByb21pc2V9O1xuZXhwb3J0IGRlZmF1bHQgQ2FuY2VsbGFibGVQcm9taXNlO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAgKiBEZWJvdW5jZXMgZnVuY3Rpb24gZXhlY3V0aW9uLlxuICAqIEBwYXJhbSB7IWZ1bmN0aW9uKCl9IGZuXG4gICogQHBhcmFtIHtudW1iZXJ9IGRlbGF5XG4gICogQHJldHVybiB7IWZ1bmN0aW9uKCl9XG4gICovXG5mdW5jdGlvbiBkZWJvdW5jZShmbiwgZGVsYXkpIHtcblx0cmV0dXJuIGZ1bmN0aW9uIGRlYm91bmNlZCgpIHtcblx0XHR2YXIgYXJncyA9IGFyZ3VtZW50cztcblx0XHRjYW5jZWxEZWJvdW5jZShkZWJvdW5jZWQpO1xuXHRcdGRlYm91bmNlZC5pZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cdFx0XHRmbi5hcHBseShudWxsLCBhcmdzKTtcblx0XHR9LCBkZWxheSk7XG5cdH07XG59XG5cbi8qKlxuICogQ2FuY2VscyB0aGUgc2NoZWR1bGVkIGRlYm91bmNlZCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gY2FuY2VsRGVib3VuY2UoZGVib3VuY2VkKSB7XG5cdGNsZWFyVGltZW91dChkZWJvdW5jZWQuaWQpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBkZWJvdW5jZTtcbmV4cG9ydCB7IGNhbmNlbERlYm91bmNlLCBkZWJvdW5jZSB9O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgY29yZSBmcm9tICdtZXRhbCc7XG5cbmNvbnN0IFJFR0VYID0gLyhbXFwvXSk/KD86KD86XFw6KFxcdyspKD86XFwoKCg/OlxcXFwufFteXFxcXCgpXSkqKVxcKSk/fFxcKCgoPzpcXFxcLnxbXlxcXFwoKV0pKylcXCkpKFsrKj9dKT8pL2c7XG5cbi8qKlxuICogQ29udmVydHMgdGhlIGdpdmVuIGFycmF5IG9mIHJlZ2V4IG1hdGNoZXMgdG8gYSBtb3JlIHJlYWRhYmxlIG9iamVjdCBmb3JtYXQuXG4gKiBAcGFyYW0geyFBcnJheTxzdHJpbmc+fSBtYXRjaGVzXG4gKiBAcmV0dXJuIHshT2JqZWN0fVxuICovXG5mdW5jdGlvbiBjb252ZXJ0TWF0Y2hlc1RvT2JqKG1hdGNoZXMpIHtcblx0cmV0dXJuIHtcblx0XHRtYXRjaDogbWF0Y2hlc1swXSxcblx0XHRwcmVmaXg6IG1hdGNoZXNbMV0sXG5cdFx0bmFtZTogbWF0Y2hlc1syXSxcblx0XHRwYXJhbVBhdHRlcm46IG1hdGNoZXNbM10sXG5cdFx0dW5uYW1lZFBhdHRlcm46IG1hdGNoZXNbNF0sXG5cdFx0bW9kaWZpZXI6IG1hdGNoZXNbNV1cblx0fTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyB0aGUgZ2l2ZW4gdG9rZW5zIHBhcnNlZCBmcm9tIGEgcm91dGUgZm9ybWF0IHN0cmluZyB0byBhIHJlZ2V4LlxuICogQHBhcmFtIHshQXJyYXk8c3RyaW5nfCFPYmplY3Q+fSB0b2tlbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIGNvbnZlcnRUb2tlbnNUb1JlZ2V4KHRva2Vucykge1xuXHRsZXQgcmVnZXggPSAnJztcblx0Zm9yIChsZXQgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcblx0XHRpZiAoY29yZS5pc1N0cmluZyh0b2tlbnNbaV0pKSB7XG5cdFx0XHRyZWdleCArPSBlc2NhcGUodG9rZW5zW2ldKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bGV0IGNhcHR1cmUgPSBlbmNsb3NlTm9uQ2FwdHVyaW5nR3JvdXAodG9rZW5zW2ldLnBhdHRlcm4pO1xuXHRcdFx0aWYgKHRva2Vuc1tpXS5yZXBlYXQpIHtcblx0XHRcdFx0Y2FwdHVyZSArPSBlbmNsb3NlTm9uQ2FwdHVyaW5nR3JvdXAoJ1xcXFwvJyArIGNhcHR1cmUpICsgJyonO1xuXHRcdFx0fVxuXHRcdFx0Y2FwdHVyZSA9IGVzY2FwZSh0b2tlbnNbaV0ucHJlZml4KSArIGAoJHtjYXB0dXJlfSlgO1xuXHRcdFx0aWYgKHRva2Vuc1tpXS5vcHRpb25hbCkge1xuXHRcdFx0XHRpZiAoIXRva2Vuc1tpXS5wYXJ0aWFsKSB7XG5cdFx0XHRcdFx0Y2FwdHVyZSA9IGVuY2xvc2VOb25DYXB0dXJpbmdHcm91cChjYXB0dXJlKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRjYXB0dXJlICs9ICc/Jztcblx0XHRcdH1cblx0XHRcdHJlZ2V4ICs9IGNhcHR1cmU7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBuZXcgUmVnRXhwKCdeJyArIG1ha2VUcmFpbGluZ1NsYXNoT3B0aW9uYWwocmVnZXgpICsgJyQnKTtcbn1cblxuLyoqXG4gKiBFbmNsb3NlcyB0aGUgZ2l2ZW4gcmVnZXggcGF0dGVybiBpbnRvIGEgbm9uIGNhcHR1cmluZyBncm91cC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXR0ZXJuXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVuY2xvc2VOb25DYXB0dXJpbmdHcm91cChwYXR0ZXJuKSB7XG5cdHJldHVybiBgKD86JHtwYXR0ZXJufSlgO1xufVxuXG4vKipcbiAqIEVzY2FwZXMgdGhlIGdpdmVuIHN0cmluZyB0byBzaG93IHVwIGluIHRoZSBwYXRoIHJlZ2V4LlxuICogQHBhcmFtIHtzdHJpbmd9IHN0clxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlc2NhcGUoc3RyKSB7XG5cdHJldHVybiBzdHIucmVwbGFjZSgvKFsuKyo/PV4hOiR7fSgpW1xcXXxcXC9cXFxcXSkvZywgJ1xcXFwkMScpO1xufVxuXG4vKipcbiAqIE1ha2VzIHRyYWlsaW5nIHNsYXNoIG9wdGlvbmFsIG9uIHBhdGhzLlxuICogQHBhcmFtIHtzdHJpbmd9IHJlZ2V4XG4gKiBAcGFyYW0ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gbWFrZVRyYWlsaW5nU2xhc2hPcHRpb25hbChyZWdleCkge1xuXHRpZiAoL1xcLyQvLnRlc3QocmVnZXgpKSB7XG5cdFx0cmVnZXggKz0gJz8nO1xuXHR9IGVsc2Uge1xuXHRcdHJlZ2V4ICs9ICdcXFxcLz8nO1xuXHR9XG5cdHJldHVybiByZWdleDtcbn1cblxuLyoqXG4gKiBQYXJzZXMgdGhlIGdpdmVuIHJvdXRlIGZvcm1hdCBzdHJpbmcgaW50byB0b2tlbnMgcmVwcmVzZW50aW5nIGl0cyBjb250ZW50cy5cbiAqIEBwYXJhbSB7IUFycmF5fHN0cmluZ30gcm91dGVPclRva2VucyBFaXRoZXIgYSByb3V0ZSBmb3JtYXQgc3RyaW5nIG9yIHRva2Vuc1xuICogICAgIHByZXZpb3VzbHkgcGFyc2VkIHZpYSB0aGUgYHBhcnNlYCBmdW5jdGlvbi5cbiAqIEByZXR1cm4geyFBcnJheTxzdHJpbmd8IU9iamVjdD59IEFuIGFycmF5IG9mIHRva2VucyB0aGF0IGNhbiBiZSBlaXRoZXIgcGxhaW5cbiAqICAgICBzdHJpbmdzIChwYXJ0IG9mIHRoZSByb3V0ZSkgb3Igb2JqZWN0cyBjb250YWluaW5nIGluZm9ybWF0aW9ucyBvbiBwYXJhbXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZShyb3V0ZU9yVG9rZW5zKSB7XG5cdGlmICghY29yZS5pc1N0cmluZyhyb3V0ZU9yVG9rZW5zKSkge1xuXHRcdHJldHVybiByb3V0ZU9yVG9rZW5zO1xuXHR9XG5cblx0Y29uc3Qgcm91dGUgPSByb3V0ZU9yVG9rZW5zO1xuXHRsZXQgdW5uYW1lZENvdW50ID0gMDtcblx0Y29uc3QgdG9rZW5zID0gW107XG5cdGxldCBjdXJyUGF0aCA9ICcnO1xuXHRsZXQgaW5kZXggPSAwO1xuXG5cdGxldCBtYXRjaGVzID0gUkVHRVguZXhlYyhyb3V0ZSk7XG5cdHdoaWxlIChtYXRjaGVzKSB7XG5cdFx0Y29uc3QgZGF0YSA9IGNvbnZlcnRNYXRjaGVzVG9PYmoobWF0Y2hlcyk7XG5cblx0XHRjdXJyUGF0aCA9IHJvdXRlLnNsaWNlKGluZGV4LCBtYXRjaGVzLmluZGV4KTtcblx0XHRpbmRleCA9IG1hdGNoZXMuaW5kZXggKyBkYXRhLm1hdGNoLmxlbmd0aDtcblx0XHR0b2tlbnMucHVzaChjdXJyUGF0aCk7XG5cblx0XHR0b2tlbnMucHVzaCh7XG5cdFx0XHRuYW1lOiBkYXRhLm5hbWUgPyBkYXRhLm5hbWUgOiAnJyArIHVubmFtZWRDb3VudCsrLFxuXHRcdFx0cGFydGlhbDogcm91dGVbaW5kZXhdICYmIHJvdXRlW2luZGV4XSAhPT0gZGF0YS5wcmVmaXgsXG5cdFx0XHRwcmVmaXg6IGRhdGEucHJlZml4IHx8ICcnLFxuXHRcdFx0cGF0dGVybjogZGF0YS5wYXJhbVBhdHRlcm4gfHwgZGF0YS51bm5hbWVkUGF0dGVybiB8fCAnW15cXFxcL10rJyxcblx0XHRcdHJlcGVhdDogZGF0YS5tb2RpZmllciA9PT0gJyonIHx8IGRhdGEubW9kaWZpZXIgPT09ICcrJyxcblx0XHRcdG9wdGlvbmFsOiBkYXRhLm1vZGlmaWVyID09PSAnKicgfHwgZGF0YS5tb2RpZmllciA9PT0gJz8nXG5cdFx0fSk7XG5cblx0XHRtYXRjaGVzID0gUkVHRVguZXhlYyhyb3V0ZSk7XG5cdH1cblxuXHRpZiAoaW5kZXggPCByb3V0ZS5sZW5ndGgpIHtcblx0XHR0b2tlbnMucHVzaChyb3V0ZS5zdWJzdHIoaW5kZXgpKTtcblx0fVxuXHRyZXR1cm4gdG9rZW5zO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIHRoZSBnaXZlbiByb3V0ZSBmb3JtYXQgc3RyaW5nIHRvIGEgcmVnZXggdGhhdCBjYW4gZXh0cmFjdCBwYXJhbVxuICogZGF0YSBmcm9tIHBhdGhzIG1hdGNoaW5nIGl0LlxuICogQHBhcmFtIHshQXJyYXl8c3RyaW5nfSByb3V0ZU9yVG9rZW5zIEVpdGhlciBhIHJvdXRlIGZvcm1hdCBzdHJpbmcgb3IgdG9rZW5zXG4gKiAgICAgcHJldmlvdXNseSBwYXJzZWQgdmlhIHRoZSBgcGFyc2VgIGZ1bmN0aW9uLlxuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRvUmVnZXgocm91dGVPclRva2Vucykge1xuXHRyZXR1cm4gY29udmVydFRva2Vuc1RvUmVnZXgocGFyc2Uocm91dGVPclRva2VucykpO1xufVxuXG4vKipcbiAqIEV4dHJhY3RzIGRhdGEgZnJvbSB0aGUgZ2l2ZW4gcGF0aCBhY2NvcmRpbmcgdG8gdGhlIHNwZWNpZmllZCByb3V0ZSBmb3JtYXQuXG4gKiBAcGFyYW0geyFBcnJheXxzdHJpbmd9IHJvdXRlT3JUb2tlbnMgRWl0aGVyIGEgcm91dGUgZm9ybWF0IHN0cmluZyBvciB0b2tlbnNcbiAqICAgICBwcmV2aW91c2x5IHBhcnNlZCB2aWEgdGhlIGBwYXJzZWAgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge3N0cmluZ30gVGhlIHBhdGggdG8gZXh0cmFjdCBwYXJhbSBkYXRhIGZyb20uXG4gKiBAcmV0dXJuIHtPYmplY3Q8c3RyaW5nLCBzdHJpbmc+fSBUaGUgZGF0YSBvYmplY3QsIG9yIG51bGwgaWYgdGhlIHBhdGggZG9lc24ndFxuICogICAgIG1hdGNoIHRoZSBnaXZlbiBmb3JtYXQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBleHRyYWN0RGF0YShyb3V0ZU9yVG9rZW5zLCBwYXRoKSB7XG5cdGNvbnN0IGRhdGEgPSB7fTtcblx0Y29uc3QgdG9rZW5zID0gcGFyc2Uocm91dGVPclRva2Vucyk7XG5cdGNvbnN0IG1hdGNoID0gcGF0aC5tYXRjaChjb252ZXJ0VG9rZW5zVG9SZWdleCh0b2tlbnMpKTtcblxuXHRpZiAoIW1hdGNoKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHRsZXQgcGFyYW1JbmRleCA9IDE7XG5cdGZvciAobGV0IGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG5cdFx0aWYgKCFjb3JlLmlzU3RyaW5nKHRva2Vuc1tpXSkpIHtcblx0XHRcdGxldCB2YWx1ZSA9IG1hdGNoW3BhcmFtSW5kZXgrK107XG5cdFx0XHRpZiAoY29yZS5pc0RlZih2YWx1ZSkpIHtcblx0XHRcdFx0aWYgKHRva2Vuc1tpXS5yZXBlYXQpIHtcblx0XHRcdFx0XHR2YWx1ZSA9IHZhbHVlLnNwbGl0KCcvJyk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZGF0YVt0b2tlbnNbaV0ubmFtZV0gPSB2YWx1ZTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0cmV0dXJuIGRhdGE7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB7IGlzRGVmQW5kTm90TnVsbCwgaXNGdW5jdGlvbiwgaXNTdHJpbmcgfSBmcm9tICdtZXRhbCc7XG5pbXBvcnQgeyBleHRyYWN0RGF0YSwgcGFyc2UsIHRvUmVnZXggfSBmcm9tICdtZXRhbC1wYXRoLXBhcnNlcic7XG5cbmNsYXNzIFJvdXRlIHtcblxuXHQvKipcblx0ICogUm91dGUgY2xhc3MuXG5cdCAqIEBwYXJhbSB7IXN0cmluZ3xSZWdFeHB8RnVuY3Rpb259IHBhdGhcblx0ICogQHBhcmFtIHshRnVuY3Rpb259IGhhbmRsZXJcblx0ICogQGNvbnN0cnVjdG9yXG5cdCAqL1xuXHRjb25zdHJ1Y3RvcihwYXRoLCBoYW5kbGVyKSB7XG5cdFx0aWYgKCFpc0RlZkFuZE5vdE51bGwocGF0aCkpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcignUm91dGUgcGF0aCBub3Qgc3BlY2lmaWVkLicpO1xuXHRcdH1cblx0XHRpZiAoIWlzRnVuY3Rpb24oaGFuZGxlcikpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcignUm91dGUgaGFuZGxlciBpcyBub3QgYSBmdW5jdGlvbi4nKTtcblx0XHR9XG5cblx0XHQvKipcblx0XHQgKiBEZWZpbmVzIHRoZSBoYW5kbGVyIHdoaWNoIHdpbGwgZXhlY3V0ZSBvbmNlIGEgVVJMIGluIHRoZSBhcHBsaWNhdGlvblxuXHRcdCAqIG1hdGNoZXMgdGhlIHBhdGguXG5cdFx0ICogQHR5cGUgeyFGdW5jdGlvbn1cblx0XHQgKiBAcHJvdGVjdGVkXG5cdFx0ICovXG5cdFx0dGhpcy5oYW5kbGVyID0gaGFuZGxlcjtcblxuXHRcdC8qKlxuXHRcdCAqIERlZmluZXMgdGhlIHBhdGggd2hpY2ggd2lsbCB0cmlnZ2VyIHRoZSByb3V0ZSBoYW5kbGVyLlxuXHRcdCAqIEB0eXBlIHshc3RyaW5nfFJlZ0V4cHxGdW5jdGlvbn1cblx0XHQgKiBAcHJvdGVjdGVkXG5cdFx0ICovXG5cdFx0dGhpcy5wYXRoID0gcGF0aDtcblx0fVxuXG5cdC8qKlxuXHQqIEJ1aWxkcyBwYXJzZWQgZGF0YSAocmVnZXggYW5kIHRva2VucykgZm9yIHRoaXMgcm91dGUuXG5cdCogQHJldHVybiB7IU9iamVjdH1cblx0KiBAcHJvdGVjdGVkXG5cdCovXG5cdGJ1aWxkUGFyc2VkRGF0YV8oKSB7XG5cdFx0aWYgKCF0aGlzLnBhcnNlZERhdGFfKSB7XG5cdFx0XHR2YXIgdG9rZW5zID0gcGFyc2UodGhpcy5wYXRoKTtcblx0XHRcdHZhciByZWdleCA9IHRvUmVnZXgodG9rZW5zKTtcblx0XHRcdHRoaXMucGFyc2VkRGF0YV8gPSB7XG5cdFx0XHRcdHJlZ2V4LFxuXHRcdFx0XHR0b2tlbnNcblx0XHRcdH07XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLnBhcnNlZERhdGFfO1xuXHR9XG5cblx0LyoqXG5cdCAqIEV4dHJhY3RzIHBhcmFtIGRhdGEgZnJvbSB0aGUgZ2l2ZW4gcGF0aCwgYWNjb3JkaW5nIHRvIHRoaXMgcm91dGUuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIFRoZSB1cmwgcGF0aCB0byBleHRyYWN0IHBhcmFtcyBmcm9tLlxuXHQgKiBAcmV0dXJuIHtPYmplY3R9IFRoZSBleHRyYWN0ZWQgZGF0YSwgaWYgdGhlIHBhdGggbWF0Y2hlcyB0aGlzIHJvdXRlLCBvclxuXHQgKiAgICAgbnVsbCBvdGhlcndpc2UuXG5cdCAqL1xuXHRleHRyYWN0UGFyYW1zKHBhdGgpIHtcblx0XHRpZiAoaXNTdHJpbmcodGhpcy5wYXRoKSkge1xuXHRcdFx0cmV0dXJuIGV4dHJhY3REYXRhKHRoaXMuYnVpbGRQYXJzZWREYXRhXygpLnRva2VucywgcGF0aCk7XG5cdFx0fVxuXHRcdHJldHVybiB7fTtcblx0fVxuXG5cdC8qKlxuXHQgKiBHZXRzIHRoZSByb3V0ZSBoYW5kbGVyLlxuXHQgKiBAcmV0dXJuIHshRnVuY3Rpb259XG5cdCAqL1xuXHRnZXRIYW5kbGVyKCkge1xuXHRcdHJldHVybiB0aGlzLmhhbmRsZXI7XG5cdH1cblxuXHQvKipcblx0ICogR2V0cyB0aGUgcm91dGUgcGF0aC5cblx0ICogQHJldHVybiB7IXN0cmluZ3xSZWdFeHB8RnVuY3Rpb259XG5cdCAqL1xuXHRnZXRQYXRoKCkge1xuXHRcdHJldHVybiB0aGlzLnBhdGg7XG5cdH1cblxuXHQvKipcbiBcdCAqIE1hdGNoZXMgaWYgdGhlIHJvdXRlciBjYW4gaGFuZGxlIHRoZSB0ZXN0ZWQgcGF0aC5cbiBcdCAqIEBwYXJhbSB7IXN0cmluZ30gdmFsdWUgUGF0aCB0byB0ZXN0IChtYXkgY29udGFpbiB0aGUgcXVlcnlzdHJpbmcgcGFydCkuXG5cdCAqIEByZXR1cm4ge2Jvb2xlYW59IFJldHVybnMgdHJ1ZSBpZiBtYXRjaGVzIGFueSByb3V0ZS5cblx0ICovXG5cdG1hdGNoZXNQYXRoKHZhbHVlKSB7XG5cdFx0dmFyIHBhdGggPSB0aGlzLnBhdGg7XG5cblx0XHRpZiAoaXNGdW5jdGlvbihwYXRoKSkge1xuXHRcdFx0cmV0dXJuIHBhdGgodmFsdWUpO1xuXHRcdH1cblx0XHRpZiAoaXNTdHJpbmcocGF0aCkpIHtcblx0XHRcdHBhdGggPSB0aGlzLmJ1aWxkUGFyc2VkRGF0YV8oKS5yZWdleDtcblx0XHR9XG5cdFx0aWYgKHBhdGggaW5zdGFuY2VvZiBSZWdFeHApIHtcblx0XHRcdHJldHVybiB2YWx1ZS5zZWFyY2gocGF0aCkgPiAtMTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBSb3V0ZTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHsgRGlzcG9zYWJsZSB9IGZyb20gJ21ldGFsJztcblxuY2xhc3MgQ2FjaGVhYmxlIGV4dGVuZHMgRGlzcG9zYWJsZSB7XG5cblx0LyoqXG5cdCAqIEFic3RyYWN0IGNsYXNzIGZvciBkZWZpbmluZyBjYWNoZWFibGUgYmVoYXZpb3IuXG5cdCAqIEBjb25zdHJ1Y3RvclxuXHQgKi9cblx0Y29uc3RydWN0b3IoKSB7XG5cdFx0c3VwZXIoKTtcblxuXHRcdC8qKlxuXHRcdCAqIEhvbGRzIHRoZSBjYWNoZWQgZGF0YS5cblx0XHQgKiBAdHlwZSB7IU9iamVjdH1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICogQHByb3RlY3RlZFxuXHRcdCAqL1xuXHRcdHRoaXMuY2FjaGUgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogSG9sZHMgd2hldGhlciBjbGFzcyBpcyBjYWNoZWFibGUuXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQGRlZmF1bHQgZmFsc2Vcblx0XHQgKiBAcHJvdGVjdGVkXG5cdFx0ICovXG5cdFx0dGhpcy5jYWNoZWFibGUgPSBmYWxzZTtcblx0fVxuXG5cdC8qKlxuXHQgKiBBZGRzIGNvbnRlbnQgdG8gdGhlIGNhY2hlLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gY29udGVudCBDb250ZW50IHRvIGJlIGNhY2hlZC5cblx0ICogQGNoYWluYWJsZVxuXHQgKi9cblx0YWRkQ2FjaGUoY29udGVudCkge1xuXHRcdGlmICh0aGlzLmNhY2hlYWJsZSkge1xuXHRcdFx0dGhpcy5jYWNoZSA9IGNvbnRlbnQ7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0LyoqXG5cdCAqIENsZWFycyB0aGUgY2FjaGUuXG5cdCAqIEBjaGFpbmFibGVcblx0ICovXG5cdGNsZWFyQ2FjaGUoKSB7XG5cdFx0dGhpcy5jYWNoZSA9IG51bGw7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHQvKipcblx0ICogRGlzcG9zZXMgb2YgdGhpcyBpbnN0YW5jZSdzIG9iamVjdCByZWZlcmVuY2VzLlxuXHQgKiBAb3ZlcnJpZGVcblx0ICovXG5cdGRpc3Bvc2VJbnRlcm5hbCgpIHtcblx0XHR0aGlzLmNsZWFyQ2FjaGUoKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBHZXRzIHRoZSBjYWNoZWQgY29udGVudC5cblx0ICogQHJldHVybiB7T2JqZWN0fSBDYWNoZWQgY29udGVudC5cblx0ICogQHByb3RlY3RlZFxuXHQgKi9cblx0Z2V0Q2FjaGUoKSB7XG5cdFx0cmV0dXJuIHRoaXMuY2FjaGU7XG5cdH1cblxuXHQvKipcblx0ICogV2hldGhlciB0aGUgY2xhc3MgaXMgY2FjaGVhYmxlLlxuXHQgKiBAcmV0dXJuIHtib29sZWFufSBSZXR1cm5zIHRydWUgd2hlbiBjbGFzcyBpcyBjYWNoZWFibGUsIGZhbHNlIG90aGVyd2lzZS5cblx0ICovXG5cdGlzQ2FjaGVhYmxlKCkge1xuXHRcdHJldHVybiB0aGlzLmNhY2hlYWJsZTtcblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHdoZXRoZXIgdGhlIGNsYXNzIGlzIGNhY2hlYWJsZS5cblx0ICogQHBhcmFtIHtib29sZWFufSBjYWNoZWFibGVcblx0ICovXG5cdHNldENhY2hlYWJsZShjYWNoZWFibGUpIHtcblx0XHRpZiAoIWNhY2hlYWJsZSkge1xuXHRcdFx0dGhpcy5jbGVhckNhY2hlKCk7XG5cdFx0fVxuXHRcdHRoaXMuY2FjaGVhYmxlID0gY2FjaGVhYmxlO1xuXHR9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ2FjaGVhYmxlO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgeyBnZXRVaWQgfSBmcm9tICdtZXRhbCc7XG5pbXBvcnQgeyBnbG9iYWxFdmFsIH0gZnJvbSAnbWV0YWwtZG9tJztcbmltcG9ydCBDYWNoZWFibGUgZnJvbSAnLi4vY2FjaGVhYmxlL0NhY2hlYWJsZSc7XG5pbXBvcnQgQ2FuY2VsbGFibGVQcm9taXNlIGZyb20gJ21ldGFsLXByb21pc2UnO1xuXG5jbGFzcyBTY3JlZW4gZXh0ZW5kcyBDYWNoZWFibGUge1xuXG5cdC8qKlxuXHQgKiBTY3JlZW4gY2xhc3MgaXMgYSBzcGVjaWFsIHR5cGUgb2Ygcm91dGUgaGFuZGxlciB0aGF0IHByb3ZpZGVzIGhlbHBlclxuXHQgKiB1dGlsaXRpZXMgdGhhdCBhZGRzIGxpZmVjeWNsZSBhbmQgbWV0aG9kcyB0byBwcm92aWRlIGNvbnRlbnQgdG8gZWFjaFxuXHQgKiByZWdpc3RlcmVkIHN1cmZhY2UuXG5cdCAqIEBjb25zdHJ1Y3RvclxuXHQgKiBAZXh0ZW5kcyB7Q2FjaGVhYmxlfVxuXHQgKi9cblx0Y29uc3RydWN0b3IoKSB7XG5cdFx0c3VwZXIoKTtcblxuXHRcdC8qKlxuXHRcdCAqIEhvbGRzIHRoZSBzY3JlZW4gaWQuXG5cdFx0ICogQHR5cGUge3N0cmluZ31cblx0XHQgKiBAcHJvdGVjdGVkXG5cdFx0ICovXG5cdFx0dGhpcy5pZCA9IHRoaXMubWFrZUlkXyhnZXRVaWQoKSk7XG5cblx0XHQvKipcblx0XHQgKiBIb2xkcyB0aGUgc2NyZWVuIHRpdGxlLiBSZWxldmFudCB3aGVuIHRoZSBwYWdlIHRpdGxlIHNob3VsZCBiZVxuXHRcdCAqIHVwYWRhdGVkIHdoZW4gc2NyZWVuIGlzIHJlbmRlcmVkLlxuXHRcdCAqIEB0eXBlIHs/c3RyaW5nPX1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICogQHByb3RlY3RlZFxuXHRcdCAqL1xuXHRcdHRoaXMudGl0bGUgPSBudWxsO1xuXHR9XG5cblx0LyoqXG5cdCAqIEZpcmVzIHdoZW4gdGhlIHNjcmVlbiBpcyBhY3RpdmUuIEFsbG93cyBhIHNjcmVlbiB0byBwZXJmb3JtIGFueSBzZXR1cFxuXHQgKiB0aGF0IHJlcXVpcmVzIGl0cyBET00gdG8gYmUgdmlzaWJsZS4gTGlmZWN5Y2xlLlxuXHQgKi9cblx0YWN0aXZhdGUoKSB7XG5cdFx0Y29uc29sZS5sb2coJ1NjcmVlbiBbJyArIHRoaXMgKyAnXSBhY3RpdmF0ZScpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEdpdmVzIHRoZSBTY3JlZW4gYSBjaGFuY2UgdG8gY2FuY2VsIHRoZSBuYXZpZ2F0aW9uIGFuZCBzdG9wIGl0c2VsZiBmcm9tXG5cdCAqIGJlaW5nIGRlYWN0aXZhdGVkLiBDYW4gYmUgdXNlZCwgZm9yIGV4YW1wbGUsIGlmIHRoZSBzY3JlZW4gaGFzIHVuc2F2ZWRcblx0ICogc3RhdGUuIExpZmVjeWNsZS4gQ2xlYW4tdXAgc2hvdWxkIG5vdCBiZSBwcmVmb3JtZWQgaGVyZSwgc2luY2UgdGhlXG5cdCAqIG5hdmlnYXRpb24gbWF5IHN0aWxsIGJlIGNhbmNlbGxlZC4gRG8gY2xlYW4tdXAgaW4gZGVhY3RpdmF0ZS5cblx0ICogQHJldHVybiB7Ym9vbGVhbj19IElmIHJldHVybnMgdHJ1ZSwgdGhlIGN1cnJlbnQgc2NyZWVuIGlzIGxvY2tlZCBhbmQgdGhlXG5cdCAqICAgICBuZXh0IG5hZ2l2YXRpb24gaW50ZXJydXB0ZWQuXG5cdCAqL1xuXHRiZWZvcmVEZWFjdGl2YXRlKCkge1xuXHRcdGNvbnNvbGUubG9nKCdTY3JlZW4gWycgKyB0aGlzICsgJ10gYmVmb3JlRGVhY3RpdmF0ZScpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEdpdmVzIHRoZSBTY3JlZW4gYSBjaGFuY2UgZm9ybWF0IHRoZSBwYXRoIGJlZm9yZSBoaXN0b3J5IHVwZGF0ZS5cblx0ICogQHBhdGggeyFzdHJpbmd9IHBhdGggTmF2aWdhdGlvbiBwYXRoLlxuXHQgKiBAcmV0dXJuIHshc3RyaW5nfSBOYXZpZ2F0aW9uIHBhdGggdG8gdXNlIG9uIGhpc3RvcnkuXG5cdCAqL1xuXHRiZWZvcmVVcGRhdGVIaXN0b3J5UGF0aChwYXRoKSB7XG5cdFx0cmV0dXJuIHBhdGg7XG5cdH1cblxuXHQvKipcblx0ICogR2l2ZXMgdGhlIFNjcmVlbiBhIGNoYW5jZSBmb3JtYXQgdGhlIHN0YXRlIGJlZm9yZSBoaXN0b3J5IHVwZGF0ZS5cblx0ICogQHBhdGggeyFvYmplY3R9IHN0YXRlIEhpc3Rvcnkgc3RhdGUuXG5cdCAqIEByZXR1cm4geyFvYmplY3R9IEhpc3Rvcnkgc3RhdGUgdG8gdXNlIG9uIGhpc3RvcnkuXG5cdCAqL1xuXHRiZWZvcmVVcGRhdGVIaXN0b3J5U3RhdGUoc3RhdGUpIHtcblx0XHRyZXR1cm4gc3RhdGU7XG5cdH1cblxuXHQvKipcblx0ICogQWxsb3dzIGEgc2NyZWVuIHRvIGRvIGFueSBjbGVhbnVwIG5lY2Vzc2FyeSBhZnRlciBpdCBoYXMgYmVlblxuXHQgKiBkZWFjdGl2YXRlZCwgZm9yIGV4YW1wbGUgY2FuY2VsbGluZyBvdXRzdGFuZGluZyByZXF1ZXN0cyBvciBzdG9wcGluZ1xuXHQgKiB0aW1lcnMuIExpZmVjeWNsZS5cblx0ICovXG5cdGRlYWN0aXZhdGUoKSB7XG5cdFx0Y29uc29sZS5sb2coJ1NjcmVlbiBbJyArIHRoaXMgKyAnXSBkZWFjdGl2YXRlJyk7XG5cdH1cblxuXHQvKipcblx0ICogRGlzcG9zZSBhIHNjcmVlbiwgZWl0aGVyIGFmdGVyIGl0IGlzIGRlYWN0aXZhdGVkIChpbiB0aGUgY2FzZSBvZiBhXG5cdCAqIG5vbi1jYWNoZWFibGUgdmlldykgb3Igd2hlbiB0aGUgQXBwIGlzIGl0c2VsZiBkaXNwb3NlZCBmb3Igd2hhdGV2ZXJcblx0ICogcmVhc29uLiBMaWZlY3ljbGUuXG5cdCAqL1xuXHRkaXNwb3NlSW50ZXJuYWwoKSB7XG5cdFx0c3VwZXIuZGlzcG9zZUludGVybmFsKCk7XG5cdFx0Y29uc29sZS5sb2coJ1NjcmVlbiBbJyArIHRoaXMgKyAnXSBkaXNwb3NlJyk7XG5cdH1cblxuXHQvKipcblx0ICogQWxsb3dzIGEgc2NyZWVuIHRvIGV2YWx1YXRlIHNjcmlwdHMgYmVmb3JlIHRoZSBlbGVtZW50IGlzIG1hZGUgdmlzaWJsZS5cblx0ICogTGlmZWN5Y2xlLlxuXHQgKiBAcGFyYW0geyFvYmplY3R9IHN1cmZhY2VzIE1hcCBvZiBzdXJmYWNlcyB0byBmbGlwIGtleWVkIGJ5IHN1cmZhY2UgaWQuXG5cdCAqIEByZXR1cm4gez9DYW5jZWxsYWJsZVByb21pc2U9fSBUaGlzIGNhbiByZXR1cm4gYSBwcm9taXNlLCB3aGljaCB3aWxsXG5cdCAqICAgICBwYXVzZSB0aGUgbmF2aWdhdGlvbiB1bnRpbCBpdCBpcyByZXNvbHZlZC5cblx0ICovXG5cdGV2YWx1YXRlU2NyaXB0cyhzdXJmYWNlcykge1xuXHRcdE9iamVjdC5rZXlzKHN1cmZhY2VzKS5mb3JFYWNoKHNJZCA9PiB7XG5cdFx0XHRpZiAoc3VyZmFjZXNbc0lkXS5hY3RpdmVDaGlsZCkge1xuXHRcdFx0XHRnbG9iYWxFdmFsLnJ1blNjcmlwdHNJbkVsZW1lbnQoc3VyZmFjZXNbc0lkXS5hY3RpdmVDaGlsZCk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0cmV0dXJuIENhbmNlbGxhYmxlUHJvbWlzZS5yZXNvbHZlKCk7XG5cdH1cblxuXHQvKipcblx0ICogQWxsb3dzIGEgc2NyZWVuIHRvIGV2YWx1YXRlIHN0eWxlcyBiZWZvcmUgdGhlIGVsZW1lbnQgaXMgbWFkZSB2aXNpYmxlLlxuXHQgKiBMaWZlY3ljbGUuXG5cdCAqIEBwYXJhbSB7IW9iamVjdH0gc3VyZmFjZXMgTWFwIG9mIHN1cmZhY2VzIHRvIGZsaXAga2V5ZWQgYnkgc3VyZmFjZSBpZC5cblx0ICogQHJldHVybiB7P0NhbmNlbGxhYmxlUHJvbWlzZT19IFRoaXMgY2FuIHJldHVybiBhIHByb21pc2UsIHdoaWNoIHdpbGxcblx0ICogICAgIHBhdXNlIHRoZSBuYXZpZ2F0aW9uIHVudGlsIGl0IGlzIHJlc29sdmVkLlxuXHQgKi9cblx0ZXZhbHVhdGVTdHlsZXMoKSB7XG5cdFx0cmV0dXJuIENhbmNlbGxhYmxlUHJvbWlzZS5yZXNvbHZlKCk7XG5cdH1cblxuXHQvKipcblx0ICogQWxsb3dzIGEgc2NyZWVuIHRvIHBlcmZvcm0gYW55IHNldHVwIGltbWVkaWF0ZWx5IGJlZm9yZSB0aGUgZWxlbWVudCBpc1xuXHQgKiBtYWRlIHZpc2libGUuIExpZmVjeWNsZS5cblx0ICogQHBhcmFtIHshb2JqZWN0fSBzdXJmYWNlcyBNYXAgb2Ygc3VyZmFjZXMgdG8gZmxpcCBrZXllZCBieSBzdXJmYWNlIGlkLlxuXHQgKiBAcmV0dXJuIHs/Q2FuY2VsbGFibGVQcm9taXNlPX0gVGhpcyBjYW4gcmV0dXJuIGEgcHJvbWlzZSwgd2hpY2ggd2lsbCBwYXVzZSB0aGVcblx0ICogICAgIG5hdmlnYXRpb24gdW50aWwgaXQgaXMgcmVzb2x2ZWQuXG5cdCAqL1xuXHRmbGlwKHN1cmZhY2VzKSB7XG5cdFx0Y29uc29sZS5sb2coJ1NjcmVlbiBbJyArIHRoaXMgKyAnXSBmbGlwJyk7XG5cblx0XHR2YXIgdHJhbnNpdGlvbnMgPSBbXTtcblxuXHRcdE9iamVjdC5rZXlzKHN1cmZhY2VzKS5mb3JFYWNoKHNJZCA9PiB7XG5cdFx0XHR2YXIgc3VyZmFjZSA9IHN1cmZhY2VzW3NJZF07XG5cdFx0XHR2YXIgZGVmZXJyZWQgPSBzdXJmYWNlLnNob3codGhpcy5pZCk7XG5cdFx0XHR0cmFuc2l0aW9ucy5wdXNoKGRlZmVycmVkKTtcblx0XHR9KTtcblxuXHRcdHJldHVybiBDYW5jZWxsYWJsZVByb21pc2UuYWxsKHRyYW5zaXRpb25zKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBHZXRzIHRoZSBzY3JlZW4gaWQuXG5cdCAqIEByZXR1cm4ge3N0cmluZ31cblx0ICovXG5cdGdldElkKCkge1xuXHRcdHJldHVybiB0aGlzLmlkO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIGNvbnRlbnQgZm9yIHRoZSBnaXZlbiBzdXJmYWNlLCBvciBudWxsIGlmIHRoZSBzdXJmYWNlIGlzbid0XG5cdCAqIHVzZWQgYnkgdGhpcyBzY3JlZW4uIFRoaXMgd2lsbCBiZSBjYWxsZWQgd2hlbiBhIHNjcmVlbiBpcyBpbml0aWFsbHlcblx0ICogY29uc3RydWN0ZWQgb3IsIGlmIGEgc2NyZWVuIGlzIG5vbi1jYWNoZWFibGUsIHdoZW4gbmF2aWdhdGVkLlxuXHQgKiBAcGFyYW0geyFzdHJpbmd9IHN1cmZhY2VJZCBUaGUgaWQgb2YgdGhlIHN1cmZhY2UgRE9NIGVsZW1lbnQuXG5cdCAqIEBwYXJhbSB7IU9iamVjdH0gcGFyYW1zIFBhcmFtcyBleHRyYWN0ZWQgZnJvbSB0aGUgY3VycmVudCBwYXRoLlxuXHQgKiBAcmV0dXJuIHs/c3RyaW5nfEVsZW1lbnQ9fSBUaGlzIGNhbiByZXR1cm4gYSBzdHJpbmcgb3Igbm9kZSByZXByZXNlbnRpbmdcblx0ICogICAgIHRoZSBjb250ZW50IG9mIHRoZSBzdXJmYWNlLiBJZiByZXR1cm5zIGZhbHN5IHZhbHVlcyBzdXJmYWNlIGRlZmF1bHRcblx0ICogICAgIGNvbnRlbnQgaXMgcmVzdG9yZWQuXG5cdCAqL1xuXHRnZXRTdXJmYWNlQ29udGVudCgpIHtcblx0XHRjb25zb2xlLmxvZygnU2NyZWVuIFsnICsgdGhpcyArICddIGdldFN1cmZhY2VDb250ZW50Jyk7XG5cdH1cblxuXHQvKipcblx0ICogR2V0cyB0aGUgc2NyZWVuIHRpdGxlLlxuXHQgKiBAcmV0dXJuIHs/c3RyaW5nPX1cblx0ICovXG5cdGdldFRpdGxlKCkge1xuXHRcdHJldHVybiB0aGlzLnRpdGxlO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYWxsIGNvbnRlbnRzIGZvciB0aGUgc3VyZmFjZXMuIFRoaXMgd2lsbCBwYXNzIHRoZSBsb2FkZWQgY29udGVudFxuXHQgKiB0byA8Y29kZT5TY3JlZW4ubG9hZDwvY29kZT4gd2l0aCBhbGwgaW5mb3JtYXRpb24geW91XG5cdCAqIG5lZWQgdG8gZnVsZmlsbCB0aGUgc3VyZmFjZXMuIExpZmVjeWNsZS5cblx0ICogQHBhcmFtIHshc3RyaW5nPX0gcGF0aCBUaGUgcmVxdWVzdGVkIHBhdGguXG5cdCAqIEByZXR1cm4geyFDYW5jZWxsYWJsZVByb21pc2V9IFRoaXMgY2FuIHJldHVybiBhIHN0cmluZyByZXByZXNlbnRpbmcgdGhlXG5cdCAqICAgICBjb250ZW50cyBvZiB0aGUgc3VyZmFjZXMgb3IgYSBwcm9taXNlLCB3aGljaCB3aWxsIHBhdXNlIHRoZSBuYXZpZ2F0aW9uXG5cdCAqICAgICB1bnRpbCBpdCBpcyByZXNvbHZlZC4gVGhpcyBpcyB1c2VmdWwgZm9yIGxvYWRpbmcgYXN5bmMgY29udGVudC5cblx0ICovXG5cdGxvYWQoKSB7XG5cdFx0Y29uc29sZS5sb2coJ1NjcmVlbiBbJyArIHRoaXMgKyAnXSBsb2FkJyk7XG5cdFx0cmV0dXJuIENhbmNlbGxhYmxlUHJvbWlzZS5yZXNvbHZlKCk7XG5cdH1cblxuXHQvKipcblx0ICogTWFrZXMgdGhlIGlkIGZvciB0aGUgc2NyZWVuLlxuXHQgKiBAcGFyYW0geyFzdHJpbmd9IGlkIFRoZSBzY3JlZW4gaWQgdGhlIGNvbnRlbnQgYmVsb25ncyB0b28uXG5cdCAqIEByZXR1cm4ge3N0cmluZ31cblx0ICogQHByaXZhdGVcblx0ICovXG5cdG1ha2VJZF8oaWQpIHtcblx0XHRyZXR1cm4gJ3NjcmVlbl8nICsgaWQ7XG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgc2NyZWVuIGlkLlxuXHQgKiBAcGFyYW0geyFzdHJpbmd9IGlkXG5cdCAqL1xuXHRzZXRJZChpZCkge1xuXHRcdHRoaXMuaWQgPSBpZDtcblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSBzY3JlZW4gdGl0bGUuXG5cdCAqIEBwYXJhbSB7P3N0cmluZz19IHRpdGxlXG5cdCAqL1xuXHRzZXRUaXRsZSh0aXRsZSkge1xuXHRcdHRoaXMudGl0bGUgPSB0aXRsZTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9XG5cdCAqL1xuXHR0b1N0cmluZygpIHtcblx0XHRyZXR1cm4gdGhpcy5pZDtcblx0fVxuXG59XG5cbi8qKlxuICogQHBhcmFtIHsqfSBvYmplY3RcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgYSBnaXZlbiBpbnN0YW5jZSBpbXBsZW1lbnRzXG4gKiA8Y29kZT5TY3JlZW48L2NvZGU+LlxuICovXG5TY3JlZW4uaXNJbXBsZW1lbnRlZEJ5ID0gZnVuY3Rpb24ob2JqZWN0KSB7XG5cdHJldHVybiBvYmplY3QgaW5zdGFuY2VvZiBTY3JlZW47XG59O1xuXG5leHBvcnQgZGVmYXVsdCBTY3JlZW47XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBnbG9iYWxzIGZyb20gJy4uL2dsb2JhbHMvZ2xvYmFscyc7XG5pbXBvcnQgeyBEaXNwb3NhYmxlLCBpc0RlZkFuZE5vdE51bGwgfSBmcm9tICdtZXRhbCc7XG5pbXBvcnQgeyBhcHBlbmQsIHJlbW92ZUNoaWxkcmVuLCBleGl0RG9jdW1lbnQgfSBmcm9tICdtZXRhbC1kb20nO1xuaW1wb3J0IENhbmNlbGxhYmxlUHJvbWlzZSBmcm9tICdtZXRhbC1wcm9taXNlJztcblxuY2xhc3MgU3VyZmFjZSBleHRlbmRzIERpc3Bvc2FibGUge1xuXG5cdC8qKlxuXHQgKiBTdXJmYWNlIGNsYXNzIHJlcHJlc2VudGluZyB0aGUgcmVmZXJlbmNlcyB0byBlbGVtZW50cyBvbiB0aGUgcGFnZSB0aGF0XG5cdCAqIGNhbiBwb3RlbnRpYWxseSBiZSB1cGRhdGVkIGJ5IDxjb2RlPkFwcDwvY29kZT4uXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBpZFxuXHQgKiBAY29uc3RydWN0b3Jcblx0ICovXG5cdGNvbnN0cnVjdG9yKGlkKSB7XG5cdFx0c3VwZXIoKTtcblxuXHRcdGlmICghaWQpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcignU3VyZmFjZSBlbGVtZW50IGlkIG5vdCBzcGVjaWZpZWQuIEEgc3VyZmFjZSBlbGVtZW50IHJlcXVpcmVzIGEgdmFsaWQgaWQuJyk7XG5cdFx0fVxuXG5cdFx0LyoqXG5cdFx0ICogSG9sZHMgdGhlIGFjdGl2ZSBjaGlsZCBlbGVtZW50LlxuXHRcdCAqIEB0eXBlIHtFbGVtZW50fVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKiBAcHJvdGVjdGVkXG5cdFx0ICovXG5cdFx0dGhpcy5hY3RpdmVDaGlsZCA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBIb2xkcyB0aGUgZGVmYXVsdCBjaGlsZCBlbGVtZW50LlxuXHRcdCAqIEB0eXBlIHtFbGVtZW50fVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKiBAcHJvdGVjdGVkXG5cdFx0ICovXG5cdFx0dGhpcy5kZWZhdWx0Q2hpbGQgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogSG9sZHMgdGhlIGVsZW1lbnQgd2l0aCB0aGUgc3BlY2lmaWVkIHN1cmZhY2UgaWQsIGlmIG5vdCBmb3VuZCBjcmVhdGVzIGFcblx0XHQgKiBuZXcgZWxlbWVudCB3aXRoIHRoZSBzcGVjaWZpZWQgaWQuXG5cdFx0ICogQHR5cGUge0VsZW1lbnR9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqIEBwcm90ZWN0ZWRcblx0XHQgKi9cblx0XHR0aGlzLmVsZW1lbnQgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogSG9sZHMgdGhlIHN1cmZhY2UgaWQuXG5cdFx0ICogQHR5cGUge1N0cmluZ31cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICogQHByb3RlY3RlZFxuXHRcdCAqL1xuXHRcdHRoaXMuaWQgPSBpZDtcblxuXHRcdC8qKlxuXHRcdCAqIEhvbGRzIHRoZSBkZWZhdWx0IHRyYW5zaXRpb25GbiBmb3IgdGhlIHN1cmZhY2VzLlxuXHRcdCAqIEBwYXJhbSB7P0VsZW1lbnQ9fSBmcm9tIFRoZSB2aXNpYmxlIHN1cmZhY2UgZWxlbWVudC5cblx0XHQgKiBAcGFyYW0gez9FbGVtZW50PX0gdG8gVGhlIHN1cmZhY2UgZWxlbWVudCB0byBiZSBmbGlwcGVkLlxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLnRyYW5zaXRpb25GbiA9IG51bGw7XG5cblx0XHR0aGlzLmRlZmF1bHRDaGlsZCA9IHRoaXMuZ2V0Q2hpbGQoU3VyZmFjZS5ERUZBVUxUKTtcblx0XHR0aGlzLm1heWJlV3JhcENvbnRlbnRBc0RlZmF1bHRfKCk7XG5cdFx0dGhpcy5hY3RpdmVDaGlsZCA9IHRoaXMuZGVmYXVsdENoaWxkO1xuXHR9XG5cblx0LyoqXG5cdCAqIEFkZHMgc2NyZWVuIGNvbnRlbnQgdG8gYSBzdXJmYWNlLiBJZiBjb250ZW50IGhhc24ndCBiZWVuIHBhc3NlZCwgc2VlIGlmXG5cdCAqIGFuIGVsZW1lbnQgZXhpc3RzIGluIHRoZSBET00gdGhhdCBtYXRjaGVzIHRoZSBpZC4gQnkgY29udmVudGlvbiwgdGhlXG5cdCAqIGVsZW1lbnQgc2hvdWxkIGFscmVhZHkgYmUgbmVzdGVkIGluIHRoZSByaWdodCBlbGVtZW50IGFuZCBzaG91bGQgaGF2ZSBhblxuXHQgKiBpZCB0aGF0IGlzIGEgY29uY2F0ZW50YXRpb24gb2YgdGhlIHN1cmZhY2UgaWQgKyAnLScgKyB0aGUgc2NyZWVuIGlkLlxuXHQgKiBAcGFyYW0geyFzdHJpbmd9IHNjcmVlbklkIFRoZSBzY3JlZW4gaWQgdGhlIGNvbnRlbnQgYmVsb25ncyB0b28uXG5cdCAqIEBwYXJhbSB7P3N0cmluZ3xFbGVtZW50PX0gb3B0X2NvbnRlbnQgVGhlIHN0cmluZyBjb250ZW50IG9yIGVsZW1lbnQgdG9cblx0ICogICAgIGFkZCBiZSBhZGRlZCBhcyBzdXJmYWNlIGNvbnRlbnQuXG5cdCAqIEByZXR1cm4ge0VsZW1lbnR9XG5cdCAqL1xuXHRhZGRDb250ZW50KHNjcmVlbklkLCBvcHRfY29udGVudCkge1xuXHRcdHZhciBjaGlsZCA9IHRoaXMuZGVmYXVsdENoaWxkO1xuXG5cdFx0aWYgKGlzRGVmQW5kTm90TnVsbChvcHRfY29udGVudCkpIHtcblx0XHRcdGNoaWxkID0gdGhpcy5nZXRDaGlsZChzY3JlZW5JZCk7XG5cdFx0XHRpZiAoY2hpbGQpIHtcblx0XHRcdFx0cmVtb3ZlQ2hpbGRyZW4oY2hpbGQpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y2hpbGQgPSB0aGlzLmNyZWF0ZUNoaWxkKHNjcmVlbklkKTtcblx0XHRcdFx0dGhpcy50cmFuc2l0aW9uKGNoaWxkLCBudWxsKTtcblx0XHRcdH1cblx0XHRcdGFwcGVuZChjaGlsZCwgb3B0X2NvbnRlbnQpO1xuXHRcdH1cblxuXHRcdHZhciBlbGVtZW50ID0gdGhpcy5nZXRFbGVtZW50KCk7XG5cblx0XHRpZiAoZWxlbWVudCAmJiBjaGlsZCkge1xuXHRcdFx0YXBwZW5kKGVsZW1lbnQsIGNoaWxkKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gY2hpbGQ7XG5cdH1cblxuXHQvKipcblx0ICogQ3JlYXRlcyBjaGlsZCBub2RlIGZvciB0aGUgc3VyZmFjZS5cblx0ICogQHBhcmFtIHshc3RyaW5nfSBzY3JlZW5JZCBUaGUgc2NyZWVuIGlkLlxuXHQgKiBAcmV0dXJuIHtFbGVtZW50fVxuXHQgKi9cblx0Y3JlYXRlQ2hpbGQoc2NyZWVuSWQpIHtcblx0XHR2YXIgY2hpbGQgPSBnbG9iYWxzLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXHRcdGNoaWxkLnNldEF0dHJpYnV0ZSgnaWQnLCB0aGlzLm1ha2VJZF8oc2NyZWVuSWQpKTtcblx0XHRyZXR1cm4gY2hpbGQ7XG5cdH1cblxuXHQvKipcblx0ICogR2V0cyBjaGlsZCBub2RlIG9mIHRoZSBzdXJmYWNlLlxuXHQgKiBAcGFyYW0geyFzdHJpbmd9IHNjcmVlbklkIFRoZSBzY3JlZW4gaWQuXG5cdCAqIEByZXR1cm4gez9FbGVtZW50fVxuXHQgKi9cblx0Z2V0Q2hpbGQoc2NyZWVuSWQpIHtcblx0XHRyZXR1cm4gZ2xvYmFscy5kb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLm1ha2VJZF8oc2NyZWVuSWQpKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBHZXRzIHRoZSBzdXJmYWNlIGVsZW1lbnQgZnJvbSBlbGVtZW50LCBhbmQgc2V0cyBpdCB0byB0aGUgZWwgcHJvcGVydHkgb2Zcblx0ICogdGhlIGN1cnJlbnQgaW5zdGFuY2UuXG5cdCAqIDxjb2RlPnRoaXMuZWxlbWVudDwvY29kZT4gd2lsbCBiZSB1c2VkLlxuXHQgKiBAcmV0dXJuIHs/RWxlbWVudH0gVGhlIGN1cnJlbnQgc3VyZmFjZSBlbGVtZW50LlxuXHQgKi9cblx0Z2V0RWxlbWVudCgpIHtcblx0XHRpZiAodGhpcy5lbGVtZW50KSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lbGVtZW50O1xuXHRcdH1cblx0XHR0aGlzLmVsZW1lbnQgPSBnbG9iYWxzLmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRoaXMuaWQpO1xuXHRcdHJldHVybiB0aGlzLmVsZW1lbnQ7XG5cdH1cblxuXHQvKipcblx0ICogR2V0cyB0aGUgc3VyZmFjZSBpZC5cblx0ICogQHJldHVybiB7U3RyaW5nfVxuXHQgKi9cblx0Z2V0SWQoKSB7XG5cdFx0cmV0dXJuIHRoaXMuaWQ7XG5cdH1cblxuXHQvKipcblx0ICogR2V0cyB0aGUgc3VyZmFjZSB0cmFuc2l0aW9uIGZ1bmN0aW9uLlxuXHQgKiBTZWUgPGNvZGU+U3VyZmFjZS5kZWZhdWx0VHJhbnNpdGlvbjwvY29kZT4uXG5cdCAqIEByZXR1cm4gez9GdW5jdGlvbj19IFRoZSB0cmFuc2l0aW9uIGZ1bmN0aW9uLlxuXHQgKi9cblx0Z2V0VHJhbnNpdGlvbkZuKCkge1xuXHRcdHJldHVybiB0aGlzLnRyYW5zaXRpb25Gbjtcblx0fVxuXG5cdC8qKlxuXHQgKiBNYWtlcyB0aGUgaWQgZm9yIHRoZSBlbGVtZW50IHRoYXQgaG9sZHMgY29udGVudCBmb3IgYSBzY3JlZW4uXG5cdCAqIEBwYXJhbSB7IXN0cmluZ30gc2NyZWVuSWQgVGhlIHNjcmVlbiBpZCB0aGUgY29udGVudCBiZWxvbmdzIHRvby5cblx0ICogQHJldHVybiB7U3RyaW5nfVxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0bWFrZUlkXyhzY3JlZW5JZCkge1xuXHRcdHJldHVybiB0aGlzLmlkICsgJy0nICsgc2NyZWVuSWQ7XG5cdH1cblxuXHQvKipcblx0ICogSWYgZGVmYXVsdCBjaGlsZCBpcyBtaXNzaW5nLCB3cmFwcyBzdXJmYWNlIGNvbnRlbnQgYXMgZGVmYXVsdCBjaGlsZC4gSWZcblx0ICogc3VyZmFjZSBoYXZlIHN0YXRpYyBjb250ZW50LCBtYWtlIHN1cmUgdG8gcGxhY2UgYVxuXHQgKiA8Y29kZT5zdXJmYWNlSWQtZGVmYXVsdDwvY29kZT4gZWxlbWVudCBpbnNpZGUgc3VyZmFjZSwgb25seSBjb250ZW50c1xuXHQgKiBpbnNpZGUgdGhlIGRlZmF1bHQgY2hpbGQgd2lsbCBiZSByZXBsYWNlZCBieSBuYXZpZ2F0aW9uLlxuXHQgKi9cblx0bWF5YmVXcmFwQ29udGVudEFzRGVmYXVsdF8oKSB7XG5cdFx0dmFyIGVsZW1lbnQgPSB0aGlzLmdldEVsZW1lbnQoKTtcblx0XHRpZiAoZWxlbWVudCAmJiAhdGhpcy5kZWZhdWx0Q2hpbGQpIHtcblx0XHRcdHZhciBmcmFnbWVudCA9IGdsb2JhbHMuZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuXHRcdFx0d2hpbGUgKGVsZW1lbnQuZmlyc3RDaGlsZCkge1xuXHRcdFx0XHRmcmFnbWVudC5hcHBlbmRDaGlsZChlbGVtZW50LmZpcnN0Q2hpbGQpO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5kZWZhdWx0Q2hpbGQgPSB0aGlzLmFkZENvbnRlbnQoU3VyZmFjZS5ERUZBVUxULCBmcmFnbWVudCk7XG5cdFx0XHR0aGlzLnRyYW5zaXRpb24obnVsbCwgdGhpcy5kZWZhdWx0Q2hpbGQpO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSBzdXJmYWNlIGlkLlxuXHQgKiBAcGFyYW0geyFzdHJpbmd9IGlkXG5cdCAqL1xuXHRzZXRJZChpZCkge1xuXHRcdHRoaXMuaWQgPSBpZDtcblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSBzdXJmYWNlIHRyYW5zaXRpb24gZnVuY3Rpb24uXG5cdCAqIFNlZSA8Y29kZT5TdXJmYWNlLmRlZmF1bHRUcmFuc2l0aW9uPC9jb2RlPi5cblx0ICogQHBhcmFtIHs/RnVuY3Rpb249fSB0cmFuc2l0aW9uRm4gVGhlIHRyYW5zaXRpb24gZnVuY3Rpb24uXG5cdCAqL1xuXHRzZXRUcmFuc2l0aW9uRm4odHJhbnNpdGlvbkZuKSB7XG5cdFx0dGhpcy50cmFuc2l0aW9uRm4gPSB0cmFuc2l0aW9uRm47XG5cdH1cblxuXHQvKipcblx0ICogU2hvd3Mgc2NyZWVuIGNvbnRlbnQgZnJvbSBhIHN1cmZhY2UuXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBzY3JlZW5JZCBUaGUgc2NyZWVuIGlkIHRvIHNob3cuXG5cdCAqIEByZXR1cm4ge0NhbmNlbGxhYmxlUHJvbWlzZX0gUGF1c2VzIHRoZSBuYXZpZ2F0aW9uIHVudGlsIGl0IGlzIHJlc29sdmVkLlxuXHQgKi9cblx0c2hvdyhzY3JlZW5JZCkge1xuXHRcdHZhciBmcm9tID0gdGhpcy5hY3RpdmVDaGlsZDtcblx0XHR2YXIgdG8gPSB0aGlzLmdldENoaWxkKHNjcmVlbklkKTtcblx0XHRpZiAoIXRvKSB7XG5cdFx0XHR0byA9IHRoaXMuZGVmYXVsdENoaWxkO1xuXHRcdH1cblx0XHR0aGlzLmFjdGl2ZUNoaWxkID0gdG87XG5cdFx0cmV0dXJuIHRoaXMudHJhbnNpdGlvbihmcm9tLCB0bykudGhlbkFsd2F5cygoKSA9PiB7XG5cdFx0XHRpZiAoZnJvbSAmJiBmcm9tICE9PSB0bykge1xuXHRcdFx0XHRleGl0RG9jdW1lbnQoZnJvbSk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cblxuXHQvKipcblx0ICogUmVtb3ZlcyBzY3JlZW4gY29udGVudCBmcm9tIGEgc3VyZmFjZS5cblx0ICogQHBhcmFtIHshc3RyaW5nfSBzY3JlZW5JZCBUaGUgc2NyZWVuIGlkIHRvIHJlbW92ZS5cblx0ICovXG5cdHJlbW92ZShzY3JlZW5JZCkge1xuXHRcdHZhciBjaGlsZCA9IHRoaXMuZ2V0Q2hpbGQoc2NyZWVuSWQpO1xuXHRcdGlmIChjaGlsZCkge1xuXHRcdFx0ZXhpdERvY3VtZW50KGNoaWxkKTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogQHJldHVybiB7U3RyaW5nfVxuXHQgKi9cblx0dG9TdHJpbmcoKSB7XG5cdFx0cmV0dXJuIHRoaXMuaWQ7XG5cdH1cblxuXHQvKipcblx0ICogSW52b2tlcyB0aGUgdHJhbnNpdGlvbiBmdW5jdGlvbiBzcGVjaWZpZWQgb24gPGNvZGU+dHJhbnNpdGlvbjwvY29kZT4gYXR0cmlidXRlLlxuXHQgKiBAcGFyYW0gez9FbGVtZW50PX0gZnJvbVxuXHQgKiBAcGFyYW0gez9FbGVtZW50PX0gdG9cblx0ICogQHJldHVybiB7P0NhbmNlbGxhYmxlUHJvbWlzZT19IFRoaXMgY2FuIHJldHVybiBhIHByb21pc2UsIHdoaWNoIHdpbGwgcGF1c2UgdGhlXG5cdCAqICAgICBuYXZpZ2F0aW9uIHVudGlsIGl0IGlzIHJlc29sdmVkLlxuXHQgKi9cblx0dHJhbnNpdGlvbihmcm9tLCB0bykge1xuXHRcdHZhciB0cmFuc2l0aW9uRm4gPSB0aGlzLnRyYW5zaXRpb25GbiB8fCBTdXJmYWNlLmRlZmF1bHRUcmFuc2l0aW9uO1xuXHRcdHJldHVybiBDYW5jZWxsYWJsZVByb21pc2UucmVzb2x2ZSh0cmFuc2l0aW9uRm4uY2FsbCh0aGlzLCBmcm9tLCB0bykpO1xuXHR9XG5cbn1cblxuLyoqXG4gICAqIEhvbGRzIHRoZSBkZWZhdWx0IHN1cmZhY2UgbmFtZS4gRWxlbWVudHMgb24gdGhlIHBhZ2UgbXVzdCBjb250YWluIGEgY2hpbGRcbiAgICogZWxlbWVudCBjb250YWluaW5nIHRoZSBkZWZhdWx0IGNvbnRlbnQsIHRoaXMgZWxlbWVudCBtdXN0IGJlIGFzIGZvbGxvd2luZzpcbiAgICpcbiAgICogRXhhbXBsZTpcbiAgICogPGNvZGU+XG4gICAqICAgPGRpdiBpZD1cIm15c3VyZmFjZVwiPlxuICAgKiAgICAgPGRpdiBpZD1cIm15c3VyZmFjZS1kZWZhdWx0XCI+RGVmYXVsdCBzdXJmYWNlIGNvbnRlbnQuPC9kaXY+XG4gICAqICAgPC9kaXY+XG4gICAqIDwvY29kZT5cbiAgICpcbiAgICogVGhlIGRlZmF1bHQgY29udGVudCBpcyByZWxldmFudCBmb3IgdGhlIGluaXRpYWwgcGFnZSBjb250ZW50LiBXaGVuIGFcbiAgICogc2NyZWVuIGRvZXNuJ3QgcHJvdmlkZSBjb250ZW50IGZvciB0aGUgc3VyZmFjZSB0aGUgZGVmYXVsdCBjb250ZW50IGlzXG4gICAqIHJlc3RvcmVkIGludG8gdGhlIHBhZ2UuXG4gICAqXG4gICAqIEB0eXBlIHshU3RyaW5nfVxuICAgKiBAZGVmYXVsdCBkZWZhdWx0XG4gICAqIEBzdGF0aWNcbiAgICovXG5TdXJmYWNlLkRFRkFVTFQgPSAnZGVmYXVsdCc7XG5cbi8qKlxuICogSG9sZHMgdGhlIGRlZmF1bHQgdHJhbnNpdGlvbiBmb3IgYWxsIHN1cmZhY2VzLiBFYWNoIHN1cmZhY2UgY291bGQgaGF2ZSBpdHNcbiAqIG93biB0cmFuc2l0aW9uLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogPGNvZGU+XG4gKiBzdXJmYWNlLnNldFRyYW5zaXRpb25GbihmdW5jdGlvbihmcm9tLCB0bykge1xuICogICBpZiAoZnJvbSkge1xuICogICAgIGZyb20uc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAqICAgICBmcm9tLmNsYXNzTGlzdC5yZW1vdmUoJ2ZsaXBwZWQnKTtcbiAqICAgfVxuICogICBpZiAodG8pIHtcbiAqICAgICB0by5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAqICAgICB0by5jbGFzc0xpc3QuYWRkKCdmbGlwcGVkJyk7XG4gKiAgIH1cbiAqICAgcmV0dXJuIG51bGw7XG4gKiB9KTtcbiAqIDwvY29kZT5cbiAqXG4gKiBAcGFyYW0gez9FbGVtZW50PX0gZnJvbSBUaGUgdmlzaWJsZSBzdXJmYWNlIGVsZW1lbnQuXG4gKiBAcGFyYW0gez9FbGVtZW50PX0gdG8gVGhlIHN1cmZhY2UgZWxlbWVudCB0byBiZSBmbGlwcGVkLlxuICogQHN0YXRpY1xuICovXG5TdXJmYWNlLmRlZmF1bHRUcmFuc2l0aW9uID0gZnVuY3Rpb24oZnJvbSwgdG8pIHtcblx0aWYgKGZyb20pIHtcblx0XHRmcm9tLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG5cdFx0ZnJvbS5jbGFzc0xpc3QucmVtb3ZlKCdmbGlwcGVkJyk7XG5cdH1cblx0aWYgKHRvKSB7XG5cdFx0dG8uc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG5cdFx0dG8uY2xhc3NMaXN0LmFkZCgnZmxpcHBlZCcpO1xuXHR9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBTdXJmYWNlO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgeyBhZGRDbGFzc2VzLCBkZWxlZ2F0ZSwgbWF0Y2gsIG9uLCByZW1vdmVDbGFzc2VzIH0gZnJvbSAnbWV0YWwtZG9tJztcbmltcG9ydCB7IGFycmF5LCBhc3luYywgaXNEZWZBbmROb3ROdWxsLCBpc1N0cmluZyB9IGZyb20gJ21ldGFsJztcbmltcG9ydCB7IEV2ZW50RW1pdHRlciwgRXZlbnRIYW5kbGVyIH0gZnJvbSAnbWV0YWwtZXZlbnRzJztcbmltcG9ydCBDYW5jZWxsYWJsZVByb21pc2UgZnJvbSAnbWV0YWwtcHJvbWlzZSc7XG5pbXBvcnQgZGVib3VuY2UgZnJvbSAnbWV0YWwtZGVib3VuY2UnO1xuaW1wb3J0IGdsb2JhbHMgZnJvbSAnLi4vZ2xvYmFscy9nbG9iYWxzJztcbmltcG9ydCBSb3V0ZSBmcm9tICcuLi9yb3V0ZS9Sb3V0ZSc7XG5pbXBvcnQgU2NyZWVuIGZyb20gJy4uL3NjcmVlbi9TY3JlZW4nO1xuaW1wb3J0IFN1cmZhY2UgZnJvbSAnLi4vc3VyZmFjZS9TdXJmYWNlJztcbmltcG9ydCBVcmkgZnJvbSAnbWV0YWwtdXJpJztcbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy91dGlscyc7XG5cbmNsYXNzIEFwcCBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG5cblx0LyoqXG5cdCAqIEFwcCBjbGFzcyB0aGF0IGhhbmRsZSByb3V0ZXMgYW5kIHNjcmVlbnMgbGlmZWN5Y2xlLlxuXHQgKiBAY29uc3RydWN0b3Jcblx0ICogQGV4dGVuZHMge0V2ZW50RW1pdHRlcn1cblx0ICovXG5cdGNvbnN0cnVjdG9yKCkge1xuXHRcdHN1cGVyKCk7XG5cblx0XHQvKipcblx0XHQgKiBIb2xkcyB0aGUgYWN0aXZlIHNjcmVlbi5cblx0XHQgKiBAdHlwZSB7P1NjcmVlbn1cblx0XHQgKiBAcHJvdGVjdGVkXG5cdFx0ICovXG5cdFx0dGhpcy5hY3RpdmVTY3JlZW4gPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogSG9sZHMgdGhlIGFjdGl2ZSBwYXRoIGNvbnRhaW5pbmcgdGhlIHF1ZXJ5IHBhcmFtZXRlcnMuXG5cdFx0ICogQHR5cGUgez9zdHJpbmd9XG5cdFx0ICogQHByb3RlY3RlZFxuXHRcdCAqL1xuXHRcdHRoaXMuYWN0aXZlUGF0aCA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBBbGxvd3MgcHJldmVudCBuYXZpZ2F0ZSBmcm9tIGRvbSBwcmV2ZW50ZWQgZXZlbnQuXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqIEBwcm90ZWN0ZWRcblx0XHQgKi9cblx0XHR0aGlzLmFsbG93UHJldmVudE5hdmlnYXRlID0gdHJ1ZTtcblxuXHRcdC8qKlxuXHRcdCAqIEhvbGRzIGxpbmsgYmFzZSBwYXRoLlxuXHRcdCAqIEB0eXBlIHshc3RyaW5nfVxuXHRcdCAqIEBkZWZhdWx0ICcnXG5cdFx0ICogQHByb3RlY3RlZFxuXHRcdCAqL1xuXHRcdHRoaXMuYmFzZVBhdGggPSAnJztcblxuXHRcdC8qKlxuXHRcdCAqIEhvbGRzIHRoZSB2YWx1ZSBvZiB0aGUgYnJvd3NlciBwYXRoIGJlZm9yZSBhIG5hdmlnYXRpb24gaXMgcGVyZm9ybWVkLlxuXHRcdCAqIEB0eXBlIHshc3RyaW5nfVxuXHRcdCAqIEBkZWZhdWx0IHRoZSBjdXJyZW50IGJyb3dzZXIgcGF0aC5cblx0XHQgKiBAcHJvdGVjdGVkXG5cdFx0ICovXG5cdFx0dGhpcy5icm93c2VyUGF0aEJlZm9yZU5hdmlnYXRlID0gdXRpbHMuZ2V0Q3VycmVudEJyb3dzZXJQYXRoV2l0aG91dEhhc2goKTtcblxuXHRcdC8qKlxuXHRcdCAqIENhcHR1cmVzIHNjcm9sbCBwb3NpdGlvbiBmcm9tIHNjcm9sbCBldmVudC5cblx0XHQgKiBAdHlwZSB7IWJvb2xlYW59XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqIEBwcm90ZWN0ZWRcblx0XHQgKi9cblx0XHR0aGlzLmNhcHR1cmVTY3JvbGxQb3NpdGlvbkZyb21TY3JvbGxFdmVudCA9IHRydWU7XG5cblx0XHQvKipcblx0XHQgKiBIb2xkcyB0aGUgZGVmYXVsdCBwYWdlIHRpdGxlLlxuXHRcdCAqIEB0eXBlIHtzdHJpbmd9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqIEBwcm90ZWN0ZWRcblx0XHQgKi9cblx0XHR0aGlzLmRlZmF1bHRUaXRsZSA9IGdsb2JhbHMuZG9jdW1lbnQudGl0bGU7XG5cblx0XHQvKipcblx0XHQgKiBIb2xkcyB0aGUgZm9ybSBzZWxlY3RvciB0byBkZWZpbmUgZm9ybXMgdGhhdCBhcmUgcm91dGVkLlxuXHRcdCAqIEB0eXBlIHshc3RyaW5nfVxuXHRcdCAqIEBkZWZhdWx0IGZvcm1bZW5jdHlwZT1cIm11bHRpcGFydC9mb3JtLWRhdGFcIl06bm90KFtkYXRhLXNlbm5hLW9mZl0pXG5cdFx0ICogQHByb3RlY3RlZFxuXHRcdCAqL1xuXHRcdHRoaXMuZm9ybVNlbGVjdG9yID0gJ2Zvcm1bZW5jdHlwZT1cIm11bHRpcGFydC9mb3JtLWRhdGFcIl06bm90KFtkYXRhLXNlbm5hLW9mZl0pJztcblxuXHRcdC8qKlxuXHRcdCAqIFdoZW4gZW5hYmxlZCwgdGhlIHJvdXRlIG1hdGNoaW5nIGlnbm9yZXMgcXVlcnkgc3RyaW5nIGZyb20gdGhlIHBhdGguXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQGRlZmF1bHQgZmFsc2Vcblx0XHQgKiBAcHJvdGVjdGVkXG5cdFx0ICovXG5cdFx0dGhpcy5pZ25vcmVRdWVyeVN0cmluZ0Zyb21Sb3V0ZVBhdGggPSBmYWxzZTtcblxuXHRcdC8qKlxuXHRcdCAqIEhvbGRzIHRoZSBsaW5rIHNlbGVjdG9yIHRvIGRlZmluZSBsaW5rcyB0aGF0IGFyZSByb3V0ZWQuXG5cdFx0ICogQHR5cGUgeyFzdHJpbmd9XG5cdFx0ICogQGRlZmF1bHQgYTpub3QoW2RhdGEtc2VubmEtb2ZmXSlcblx0XHQgKiBAcHJvdGVjdGVkXG5cdFx0ICovXG5cdFx0dGhpcy5saW5rU2VsZWN0b3IgPSAnYTpub3QoW2RhdGEtc2VubmEtb2ZmXSk6bm90KFt0YXJnZXQ9XCJfYmxhbmtcIl0pJztcblxuXHRcdC8qKlxuXHRcdCAqIEhvbGRzIHRoZSBsb2FkaW5nIGNzcyBjbGFzcy5cblx0XHQgKiBAdHlwZSB7IXN0cmluZ31cblx0XHQgKiBAZGVmYXVsdCBzZW5uYS1sb2FkaW5nXG5cdFx0ICogQHByb3RlY3RlZFxuXHRcdCAqL1xuXHRcdHRoaXMubG9hZGluZ0Nzc0NsYXNzID0gJ3Nlbm5hLWxvYWRpbmcnO1xuXG5cdFx0LyoqXG5cdFx0ICogVXNpbmcgdGhlIEhpc3RvcnkgQVBJIHRvIG1hbmFnZSB5b3VyIFVSTHMgaXMgYXdlc29tZSBhbmQsIGFzIGl0IGhhcHBlbnMsXG5cdFx0ICogYSBjcnVjaWFsIGZlYXR1cmUgb2YgZ29vZCB3ZWIgYXBwcy4gT25lIG9mIGl0cyBkb3duc2lkZXMsIGhvd2V2ZXIsIGlzXG5cdFx0ICogdGhhdCBzY3JvbGwgcG9zaXRpb25zIGFyZSBzdG9yZWQgYW5kIHRoZW4sIG1vcmUgaW1wb3J0YW50bHksIHJlc3RvcmVkXG5cdFx0ICogd2hlbmV2ZXIgeW91IHRyYXZlcnNlIHRoZSBoaXN0b3J5LiBUaGlzIG9mdGVuIG1lYW5zIHVuc2lnaHRseSBqdW1wcyBhc1xuXHRcdCAqIHRoZSBzY3JvbGwgcG9zaXRpb24gY2hhbmdlcyBhdXRvbWF0aWNhbGx5LCBhbmQgZXNwZWNpYWxseSBzbyBpZiB5b3VyIGFwcFxuXHRcdCAqIGRvZXMgdHJhbnNpdGlvbnMsIG9yIGNoYW5nZXMgdGhlIGNvbnRlbnRzIG9mIHRoZSBwYWdlIGluIGFueSB3YXkuXG5cdFx0ICogVWx0aW1hdGVseSB0aGlzIGxlYWRzIHRvIGFuIGhvcnJpYmxlIHVzZXIgZXhwZXJpZW5jZS4gVGhlIGdvb2QgbmV3cyBpcyxcblx0XHQgKiBob3dldmVyLCB0aGF0IHRoZXJl4oCZcyBhIHBvdGVudGlhbCBmaXg6IGhpc3Rvcnkuc2Nyb2xsUmVzdG9yYXRpb24uXG5cdFx0ICogaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vd2ViL3VwZGF0ZXMvMjAxNS8wOS9oaXN0b3J5LWFwaS1zY3JvbGwtcmVzdG9yYXRpb25cblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcHJvdGVjdGVkXG5cdFx0ICovXG5cdFx0dGhpcy5uYXRpdmVTY3JvbGxSZXN0b3JhdGlvblN1cHBvcnRlZCA9ICgnc2Nyb2xsUmVzdG9yYXRpb24nIGluIGdsb2JhbHMud2luZG93Lmhpc3RvcnkpO1xuXG5cdFx0LyoqXG5cdFx0ICogV2hlbiBzZXQgdG8gdHJ1ZSB0aGVyZSBpcyBhIHBlbmRpbmdOYXZpZ2F0ZSB0aGF0IGhhcyBub3QgeWV0IGJlZW5cblx0XHQgKiByZXNvbHZlZCBvciByZWplY3RlZC5cblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAZGVmYXVsdCBmYWxzZVxuXHRcdCAqIEBwcm90ZWN0ZWRcblx0XHQgKi9cblx0XHR0aGlzLmlzTmF2aWdhdGlvblBlbmRpbmcgPSBmYWxzZTtcblxuXHRcdC8qKlxuXHRcdCAqIEhvbGRzIGEgZGVmZXJyZWQgd2l0aCB0aGUgY3VycmVudCBuYXZpZ2F0aW9uLlxuXHRcdCAqIEB0eXBlIHs/Q2FuY2VsbGFibGVQcm9taXNlfVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKiBAcHJvdGVjdGVkXG5cdFx0ICovXG5cdFx0dGhpcy5wZW5kaW5nTmF2aWdhdGUgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogSG9sZHMgdGhlIHdpbmRvdyBob3Jpem9udGFsIHNjcm9sbCBwb3NpdGlvbiB3aGVuIHRoZSBuYXZpZ2F0aW9uIHVzaW5nXG5cdFx0ICogYmFjayBvciBmb3J3YXJkIGhhcHBlbnMgdG8gYmUgcmVzdG9yZWQgYWZ0ZXIgdGhlIHN1cmZhY2VzIGFyZSB1cGRhdGVkLlxuXHRcdCAqIEB0eXBlIHshTnVtYmVyfVxuXHRcdCAqIEBkZWZhdWx0IDBcblx0XHQgKiBAcHJvdGVjdGVkXG5cdFx0ICovXG5cdFx0dGhpcy5wb3BzdGF0ZVNjcm9sbExlZnQgPSAwO1xuXG5cdFx0LyoqXG5cdFx0ICogSG9sZHMgdGhlIHdpbmRvdyB2ZXJ0aWNhbCBzY3JvbGwgcG9zaXRpb24gd2hlbiB0aGUgbmF2aWdhdGlvbiB1c2luZ1xuXHRcdCAqIGJhY2sgb3IgZm9yd2FyZCBoYXBwZW5zIHRvIGJlIHJlc3RvcmVkIGFmdGVyIHRoZSBzdXJmYWNlcyBhcmUgdXBkYXRlZC5cblx0XHQgKiBAdHlwZSB7IU51bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAwXG5cdFx0ICogQHByb3RlY3RlZFxuXHRcdCAqL1xuXHRcdHRoaXMucG9wc3RhdGVTY3JvbGxUb3AgPSAwO1xuXG5cdFx0LyoqXG5cdFx0ICogSG9sZHMgdGhlIHJlZGlyZWN0IHBhdGggY29udGFpbmluZyB0aGUgcXVlcnkgcGFyYW1ldGVycy5cblx0XHQgKiBAdHlwZSB7P3N0cmluZ31cblx0XHQgKiBAcHJvdGVjdGVkXG5cdFx0ICovXG5cdFx0dGhpcy5yZWRpcmVjdFBhdGggPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogSG9sZHMgdGhlIHNjcmVlbiByb3V0ZXMgY29uZmlndXJhdGlvbi5cblx0XHQgKiBAdHlwZSB7P0FycmF5fVxuXHRcdCAqIEBkZWZhdWx0IFtdXG5cdFx0ICogQHByb3RlY3RlZFxuXHRcdCAqL1xuXHRcdHRoaXMucm91dGVzID0gW107XG5cblx0XHQvKipcblx0XHQgKiBNYXBzIHRoZSBzY3JlZW4gaW5zdGFuY2VzIGJ5IHRoZSB1cmwgY29udGFpbmluZyB0aGUgcGFyYW1ldGVycy5cblx0XHQgKiBAdHlwZSB7P09iamVjdH1cblx0XHQgKiBAZGVmYXVsdCB7fVxuXHRcdCAqIEBwcm90ZWN0ZWRcblx0XHQgKi9cblx0XHR0aGlzLnNjcmVlbnMgPSB7fTtcblxuXHRcdC8qKlxuXHRcdCAqIFdoZW4gc2V0IHRvIHRydWUgdGhlIGZpcnN0IGVycm9uZW91cyBwb3BzdGF0ZSBmaXJlZCBvbiBwYWdlIGxvYWQgd2lsbCBiZVxuXHRcdCAqIGlnbm9yZWQsIG9ubHkgaWYgPGNvZGU+Z2xvYmFscy53aW5kb3cuaGlzdG9yeS5zdGF0ZTwvY29kZT4gaXMgYWxzb1xuXHRcdCAqIDxjb2RlPm51bGw8L2NvZGU+LlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEBkZWZhdWx0IGZhbHNlXG5cdFx0ICogQHByb3RlY3RlZFxuXHRcdCAqL1xuXHRcdHRoaXMuc2tpcExvYWRQb3BzdGF0ZSA9IGZhbHNlO1xuXG5cdFx0LyoqXG5cdFx0ICogTWFwcyB0aGF0IGluZGV4IHRoZSBzdXJmYWNlcyBpbnN0YW5jZXMgYnkgdGhlIHN1cmZhY2UgaWQuXG5cdFx0ICogQHR5cGUgez9PYmplY3R9XG5cdFx0ICogQGRlZmF1bHQge31cblx0XHQgKiBAcHJvdGVjdGVkXG5cdFx0ICovXG5cdFx0dGhpcy5zdXJmYWNlcyA9IHt9O1xuXG5cdFx0LyoqXG5cdFx0ICogV2hlbiBzZXQgdG8gdHJ1ZSwgbW92ZXMgdGhlIHNjcm9sbCBwb3NpdGlvbiBhZnRlciBwb3BzdGF0ZSwgb3IgdG8gdGhlXG5cdFx0ICogdG9wIG9mIHRoZSB2aWV3cG9ydCBmb3IgbmV3IG5hdmlnYXRpb24uIElmIGZhbHNlLCB0aGUgYnJvd3NlciB3aWxsXG5cdFx0ICogdGFrZSBjYXJlIG9mIHNjcm9sbCByZXN0b3JhdGlvbi5cblx0XHQgKiBAdHlwZSB7IWJvb2xlYW59XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqIEBwcm90ZWN0ZWRcblx0XHQgKi9cblx0XHR0aGlzLnVwZGF0ZVNjcm9sbFBvc2l0aW9uID0gdHJ1ZTtcblxuXHRcdHRoaXMuYXBwRXZlbnRIYW5kbGVyc18gPSBuZXcgRXZlbnRIYW5kbGVyKCk7XG5cblx0XHR0aGlzLmFwcEV2ZW50SGFuZGxlcnNfLmFkZChcblx0XHRcdG9uKGdsb2JhbHMud2luZG93LCAnc2Nyb2xsJywgZGVib3VuY2UodGhpcy5vblNjcm9sbF8uYmluZCh0aGlzKSwgMTAwKSksXG5cdFx0XHRvbihnbG9iYWxzLndpbmRvdywgJ2xvYWQnLCB0aGlzLm9uTG9hZF8uYmluZCh0aGlzKSksXG5cdFx0XHRvbihnbG9iYWxzLndpbmRvdywgJ3BvcHN0YXRlJywgdGhpcy5vblBvcHN0YXRlXy5iaW5kKHRoaXMpKVxuXHRcdCk7XG5cblx0XHR0aGlzLm9uKCdzdGFydE5hdmlnYXRlJywgdGhpcy5vblN0YXJ0TmF2aWdhdGVfKTtcblx0XHR0aGlzLm9uKCdiZWZvcmVOYXZpZ2F0ZScsIHRoaXMub25CZWZvcmVOYXZpZ2F0ZV8pO1xuXHRcdHRoaXMub24oJ2JlZm9yZU5hdmlnYXRlJywgdGhpcy5vbkJlZm9yZU5hdmlnYXRlRGVmYXVsdF8sIHRydWUpO1xuXG5cdFx0dGhpcy5zZXRMaW5rU2VsZWN0b3IodGhpcy5saW5rU2VsZWN0b3IpO1xuXHRcdHRoaXMuc2V0Rm9ybVNlbGVjdG9yKHRoaXMuZm9ybVNlbGVjdG9yKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBBZGRzIG9uZSBvciBtb3JlIHNjcmVlbnMgdG8gdGhlIGFwcGxpY2F0aW9uLlxuXHQgKlxuXHQgKiBFeGFtcGxlOlxuXHQgKlxuXHQgKiA8Y29kZT5cblx0ICogICBhcHAuYWRkUm91dGVzKHsgcGF0aDogJy9mb28nLCBoYW5kbGVyOiBGb29TY3JlZW4gfSk7XG5cdCAqICAgb3Jcblx0ICogICBhcHAuYWRkUm91dGVzKFt7IHBhdGg6ICcvZm9vJywgaGFuZGxlcjogZnVuY3Rpb24ocm91dGUpIHsgcmV0dXJuIG5ldyBGb29TY3JlZW4oKTsgfSB9XSk7XG5cdCAqIDwvY29kZT5cblx0ICpcblx0ICogQHBhcmFtIHtPYmplY3R9IG9yIHtBcnJheX0gcm91dGVzIFNpbmdsZSBvYmplY3Qgb3IgYW4gYXJyYXkgb2Ygb2JqZWN0LlxuXHQgKiAgICAgRWFjaCBvYmplY3Qgc2hvdWxkIGNvbnRhaW4gPGNvZGU+cGF0aDwvY29kZT4gYW5kIDxjb2RlPnNjcmVlbjwvY29kZT4uXG5cdCAqICAgICBUaGUgPGNvZGU+cGF0aDwvY29kZT4gc2hvdWxkIGJlIGEgc3RyaW5nIG9yIGEgcmVnZXggdGhhdCBtYXBzIHRoZVxuXHQgKiAgICAgbmF2aWdhdGlvbiByb3V0ZSB0byBhIHNjcmVlbiBjbGFzcyBkZWZpbml0aW9uIChub3QgYW4gaW5zdGFuY2UpLCBlLmc6XG5cdCAqICAgICAgICAgPGNvZGU+eyBwYXRoOiBcIi9ob21lOnBhcmFtMVwiLCBoYW5kbGVyOiBNeVNjcmVlbiB9PC9jb2RlPlxuXHQgKiAgICAgICAgIDxjb2RlPnsgcGF0aDogL2Zvby4rLywgaGFuZGxlcjogTXlTY3JlZW4gfTwvY29kZT5cblx0ICogQGNoYWluYWJsZVxuXHQgKi9cblx0YWRkUm91dGVzKHJvdXRlcykge1xuXHRcdGlmICghQXJyYXkuaXNBcnJheShyb3V0ZXMpKSB7XG5cdFx0XHRyb3V0ZXMgPSBbcm91dGVzXTtcblx0XHR9XG5cdFx0cm91dGVzLmZvckVhY2goKHJvdXRlKSA9PiB7XG5cdFx0XHRpZiAoIShyb3V0ZSBpbnN0YW5jZW9mIFJvdXRlKSkge1xuXHRcdFx0XHRyb3V0ZSA9IG5ldyBSb3V0ZShyb3V0ZS5wYXRoLCByb3V0ZS5oYW5kbGVyKTtcblx0XHRcdH1cblx0XHRcdHRoaXMucm91dGVzLnB1c2gocm91dGUpO1xuXHRcdH0pO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0LyoqXG5cdCAqIEFkZHMgb25lIG9yIG1vcmUgc3VyZmFjZXMgdG8gdGhlIGFwcGxpY2F0aW9uLlxuXHQgKiBAcGFyYW0ge1N1cmZhY2V8U3RyaW5nfEFycmF5LjxTdXJmYWNlfFN0cmluZz59IHN1cmZhY2VzXG5cdCAqICAgICBTdXJmYWNlIGVsZW1lbnQgaWQgb3Igc3VyZmFjZSBpbnN0YW5jZS4gWW91IGNhbiBhbHNvIHBhc3MgYW4gQXJyYXlcblx0ICogICAgIHdoaWNoY29udGFpbnMgc3VyZmFjZSBpbnN0YW5jZXMgb3IgaWQuIEluIGNhc2Ugb2YgSUQsIHRoZXNlIHNob3VsZCBiZVxuXHQgKiAgICAgdGhlIGlkIG9mIHN1cmZhY2UgZWxlbWVudC5cblx0ICogQGNoYWluYWJsZVxuXHQgKi9cblx0YWRkU3VyZmFjZXMoc3VyZmFjZXMpIHtcblx0XHRpZiAoIUFycmF5LmlzQXJyYXkoc3VyZmFjZXMpKSB7XG5cdFx0XHRzdXJmYWNlcyA9IFtzdXJmYWNlc107XG5cdFx0fVxuXHRcdHN1cmZhY2VzLmZvckVhY2goKHN1cmZhY2UpID0+IHtcblx0XHRcdGlmIChpc1N0cmluZyhzdXJmYWNlKSkge1xuXHRcdFx0XHRzdXJmYWNlID0gbmV3IFN1cmZhY2Uoc3VyZmFjZSk7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLnN1cmZhY2VzW3N1cmZhY2UuZ2V0SWQoKV0gPSBzdXJmYWNlO1xuXHRcdH0pO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgaWYgY2FuIG5hdmlnYXRlIHRvIHBhdGguXG5cdCAqIEBwYXJhbSB7IXN0cmluZ30gdXJsXG5cdCAqIEByZXR1cm4ge2Jvb2xlYW59XG5cdCAqL1xuXHRjYW5OYXZpZ2F0ZSh1cmwpIHtcblx0XHRjb25zdCB1cmkgPSB1dGlscy5pc1dlYlVyaSh1cmwpO1xuXG5cdFx0aWYgKCF1cmkpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRjb25zdCBwYXRoID0gdXRpbHMuZ2V0VXJsUGF0aCh1cmwpO1xuXG5cdFx0aWYgKCF0aGlzLmlzTGlua1NhbWVPcmlnaW5fKHVyaS5nZXRIb3N0bmFtZSgpKSkge1xuXHRcdFx0Y29uc29sZS5sb2coJ09mZnNpdGUgbGluayBjbGlja2VkJyk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdGlmICghdGhpcy5pc1NhbWVCYXNlUGF0aF8ocGF0aCkpIHtcblx0XHRcdGNvbnNvbGUubG9nKCdMaW5rIGNsaWNrZWQgb3V0c2lkZSBhcHBcXCdzIGJhc2UgcGF0aCcpO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHQvLyBQcmV2ZW50cyBuYXZpZ2F0aW9uIGlmIGl0J3MgYSBoYXNoIGNoYW5nZSBvbiB0aGUgc2FtZSB1cmwuXG5cdFx0aWYgKHVyaS5nZXRIYXNoKCkgJiYgdXRpbHMuaXNDdXJyZW50QnJvd3NlclBhdGgocGF0aCkpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0aWYgKCF0aGlzLmZpbmRSb3V0ZShwYXRoKSkge1xuXHRcdFx0Y29uc29sZS5sb2coJ05vIHJvdXRlIGZvciAnICsgcGF0aCk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHQvKipcblx0ICogQ2xlYXIgc2NyZWVucyBjYWNoZS5cblx0ICogQGNoYWluYWJsZVxuXHQgKi9cblx0Y2xlYXJTY3JlZW5zQ2FjaGUoKSB7XG5cdFx0T2JqZWN0LmtleXModGhpcy5zY3JlZW5zKS5mb3JFYWNoKChwYXRoKSA9PiB7XG5cdFx0XHRpZiAocGF0aCA9PT0gdGhpcy5hY3RpdmVQYXRoKSB7XG5cdFx0XHRcdHRoaXMuYWN0aXZlU2NyZWVuLmNsZWFyQ2FjaGUoKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMucmVtb3ZlU2NyZWVuKHBhdGgpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJldHJpZXZlcyBvciBjcmVhdGUgYSBzY3JlZW4gaW5zdGFuY2UgdG8gYSBwYXRoLlxuXHQgKiBAcGFyYW0geyFzdHJpbmd9IHBhdGggUGF0aCBjb250YWluaW5nIHRoZSBxdWVyeXN0cmluZyBwYXJ0LlxuXHQgKiBAcmV0dXJuIHtTY3JlZW59XG5cdCAqL1xuXHRjcmVhdGVTY3JlZW5JbnN0YW5jZShwYXRoLCByb3V0ZSkge1xuXHRcdGlmICghdGhpcy5wZW5kaW5nTmF2aWdhdGUgJiYgcGF0aCA9PT0gdGhpcy5hY3RpdmVQYXRoKSB7XG5cdFx0XHRjb25zb2xlLmxvZygnQWxyZWFkeSBhdCBkZXN0aW5hdGlvbiwgcmVmcmVzaCBuYXZpZ2F0aW9uJyk7XG5cdFx0XHRyZXR1cm4gdGhpcy5hY3RpdmVTY3JlZW47XG5cdFx0fVxuXHRcdC8qIGpzaGludCBuZXdjYXA6IGZhbHNlICovXG5cdFx0dmFyIHNjcmVlbiA9IHRoaXMuc2NyZWVuc1twYXRoXTtcblx0XHRpZiAoIXNjcmVlbikge1xuXHRcdFx0dmFyIGhhbmRsZXIgPSByb3V0ZS5nZXRIYW5kbGVyKCk7XG5cdFx0XHRpZiAoaGFuZGxlciA9PT0gU2NyZWVuIHx8IFNjcmVlbi5pc0ltcGxlbWVudGVkQnkoaGFuZGxlci5wcm90b3R5cGUpKSB7XG5cdFx0XHRcdHNjcmVlbiA9IG5ldyBoYW5kbGVyKCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRzY3JlZW4gPSBoYW5kbGVyKHJvdXRlKSB8fCBuZXcgU2NyZWVuKCk7XG5cdFx0XHR9XG5cdFx0XHRjb25zb2xlLmxvZygnQ3JlYXRlIHNjcmVlbiBmb3IgWycgKyBwYXRoICsgJ10gWycgKyBzY3JlZW4gKyAnXScpO1xuXHRcdH1cblx0XHRyZXR1cm4gc2NyZWVuO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBpbmhlcml0RG9jXG5cdCAqL1xuXHRkaXNwb3NlSW50ZXJuYWwoKSB7XG5cdFx0aWYgKHRoaXMuYWN0aXZlU2NyZWVuKSB7XG5cdFx0XHR0aGlzLnJlbW92ZVNjcmVlbih0aGlzLmFjdGl2ZVBhdGgpO1xuXHRcdH1cblx0XHR0aGlzLmNsZWFyU2NyZWVuc0NhY2hlKCk7XG5cdFx0dGhpcy5mb3JtRXZlbnRIYW5kbGVyXy5yZW1vdmVMaXN0ZW5lcigpO1xuXHRcdHRoaXMubGlua0V2ZW50SGFuZGxlcl8ucmVtb3ZlTGlzdGVuZXIoKTtcblx0XHR0aGlzLmFwcEV2ZW50SGFuZGxlcnNfLnJlbW92ZUFsbExpc3RlbmVycygpO1xuXHRcdHN1cGVyLmRpc3Bvc2VJbnRlcm5hbCgpO1xuXHR9XG5cblx0LyoqXG5cdCAqIERpc3BhdGNoZXMgdG8gdGhlIGZpcnN0IHJvdXRlIGhhbmRsZXIgdGhhdCBtYXRjaGVzIHRoZSBjdXJyZW50IHBhdGgsIGlmXG5cdCAqIGFueS5cblx0ICogQHJldHVybiB7Q2FuY2VsbGFibGVQcm9taXNlfSBSZXR1cm5zIGEgcGVuZGluZyByZXF1ZXN0IGNhbmNlbGxhYmxlIHByb21pc2UuXG5cdCAqL1xuXHRkaXNwYXRjaCgpIHtcblx0XHRyZXR1cm4gdGhpcy5uYXZpZ2F0ZSh1dGlscy5nZXRDdXJyZW50QnJvd3NlclBhdGgoKSwgdHJ1ZSk7XG5cdH1cblxuXHQvKipcblx0ICogU3RhcnRzIG5hdmlnYXRpb24gdG8gYSBwYXRoLlxuXHQgKiBAcGFyYW0geyFzdHJpbmd9IHBhdGggUGF0aCBjb250YWluaW5nIHRoZSBxdWVyeXN0cmluZyBwYXJ0LlxuXHQgKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfcmVwbGFjZUhpc3RvcnkgUmVwbGFjZXMgYnJvd3NlciBoaXN0b3J5LlxuXHQgKiBAcmV0dXJuIHtDYW5jZWxsYWJsZVByb21pc2V9IFJldHVybnMgYSBwZW5kaW5nIHJlcXVlc3QgY2FuY2VsbGFibGUgcHJvbWlzZS5cblx0ICovXG5cdGRvTmF2aWdhdGVfKHBhdGgsIG9wdF9yZXBsYWNlSGlzdG9yeSkge1xuXHRcdGlmICh0aGlzLmFjdGl2ZVNjcmVlbiAmJiB0aGlzLmFjdGl2ZVNjcmVlbi5iZWZvcmVEZWFjdGl2YXRlKCkpIHtcblx0XHRcdHRoaXMucGVuZGluZ05hdmlnYXRlID0gQ2FuY2VsbGFibGVQcm9taXNlLnJlamVjdChuZXcgQ2FuY2VsbGFibGVQcm9taXNlLkNhbmNlbGxhdGlvbkVycm9yKCdDYW5jZWxsZWQgYnkgYWN0aXZlIHNjcmVlbicpKTtcblx0XHRcdHJldHVybiB0aGlzLnBlbmRpbmdOYXZpZ2F0ZTtcblx0XHR9XG5cblx0XHR2YXIgcm91dGUgPSB0aGlzLmZpbmRSb3V0ZShwYXRoKTtcblx0XHRpZiAoIXJvdXRlKSB7XG5cdFx0XHR0aGlzLnBlbmRpbmdOYXZpZ2F0ZSA9IENhbmNlbGxhYmxlUHJvbWlzZS5yZWplY3QobmV3IENhbmNlbGxhYmxlUHJvbWlzZS5DYW5jZWxsYXRpb25FcnJvcignTm8gcm91dGUgZm9yICcgKyBwYXRoKSk7XG5cdFx0XHRyZXR1cm4gdGhpcy5wZW5kaW5nTmF2aWdhdGU7XG5cdFx0fVxuXG5cdFx0Y29uc29sZS5sb2coJ05hdmlnYXRlIHRvIFsnICsgcGF0aCArICddJyk7XG5cblx0XHR0aGlzLnN0b3BQZW5kaW5nTmF2aWdhdGVfKCk7XG5cdFx0dGhpcy5pc05hdmlnYXRpb25QZW5kaW5nID0gdHJ1ZTtcblxuXHRcdHZhciBuZXh0U2NyZWVuID0gdGhpcy5jcmVhdGVTY3JlZW5JbnN0YW5jZShwYXRoLCByb3V0ZSk7XG5cblx0XHRyZXR1cm4gbmV4dFNjcmVlbi5sb2FkKHBhdGgpXG5cdFx0XHQudGhlbigoKSA9PiB7XG5cdFx0XHRcdGlmICh0aGlzLmFjdGl2ZVNjcmVlbikge1xuXHRcdFx0XHRcdHRoaXMuYWN0aXZlU2NyZWVuLmRlYWN0aXZhdGUoKTtcblx0XHRcdFx0fVxuXHRcdFx0XHR0aGlzLnByZXBhcmVOYXZpZ2F0ZUhpc3RvcnlfKHBhdGgsIG5leHRTY3JlZW4sIG9wdF9yZXBsYWNlSGlzdG9yeSk7XG5cdFx0XHRcdHRoaXMucHJlcGFyZU5hdmlnYXRlU3VyZmFjZXNfKFxuXHRcdFx0XHRcdG5leHRTY3JlZW4sXG5cdFx0XHRcdFx0dGhpcy5zdXJmYWNlcyxcblx0XHRcdFx0XHR0aGlzLmV4dHJhY3RQYXJhbXMocm91dGUsIHBhdGgpXG5cdFx0XHRcdCk7XG5cdFx0XHR9KVxuXHRcdFx0LnRoZW4oKCkgPT4gbmV4dFNjcmVlbi5ldmFsdWF0ZVN0eWxlcyh0aGlzLnN1cmZhY2VzKSlcblx0XHRcdC50aGVuKCgpID0+IG5leHRTY3JlZW4uZmxpcCh0aGlzLnN1cmZhY2VzKSlcblx0XHRcdC50aGVuKCgpID0+IG5leHRTY3JlZW4uZXZhbHVhdGVTY3JpcHRzKHRoaXMuc3VyZmFjZXMpKVxuXHRcdFx0LnRoZW4oKCkgPT4gdGhpcy5tYXliZVVwZGF0ZVNjcm9sbFBvc2l0aW9uU3RhdGVfKCkpXG5cdFx0XHQudGhlbigoKSA9PiB0aGlzLnN5bmNTY3JvbGxQb3NpdGlvblN5bmNUaGVuQXN5bmNfKCkpXG5cdFx0XHQudGhlbigoKSA9PiB0aGlzLmZpbmFsaXplTmF2aWdhdGVfKHBhdGgsIG5leHRTY3JlZW4pKVxuXHRcdFx0LmNhdGNoKChyZWFzb24pID0+IHtcblx0XHRcdFx0dGhpcy5pc05hdmlnYXRpb25QZW5kaW5nID0gZmFsc2U7XG5cdFx0XHRcdHRoaXMuaGFuZGxlTmF2aWdhdGVFcnJvcl8ocGF0aCwgbmV4dFNjcmVlbiwgcmVhc29uKTtcblx0XHRcdFx0dGhyb3cgcmVhc29uO1xuXHRcdFx0fSk7XG5cdH1cblxuXHQvKipcblx0ICogRXh0cmFjdHMgcGFyYW1zIGFjY29yZGluZyB0byB0aGUgZ2l2ZW4gcGF0aCBhbmQgcm91dGUuXG5cdCAqIEBwYXJhbSB7IVJvdXRlfSByb3V0ZVxuXHQgKiBAcGFyYW0ge3N0cmluZ30gcGF0aFxuXHQgKiBAcGFyYW0geyFPYmplY3R9XG5cdCAqL1xuXHRleHRyYWN0UGFyYW1zKHJvdXRlLCBwYXRoKSB7XG5cdFx0cmV0dXJuIHJvdXRlLmV4dHJhY3RQYXJhbXModGhpcy5nZXRSb3V0ZVBhdGgocGF0aCkpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEZpbmFsaXplcyBhIHNjcmVlbiBuYXZpZ2F0aW9uLlxuXHQgKiBAcGFyYW0geyFzdHJpbmd9IHBhdGggUGF0aCBjb250YWluaW5nIHRoZSBxdWVyeXN0cmluZyBwYXJ0LlxuXHQgKiBAcGFyYW0geyFTY3JlZW59IG5leHRTY3JlZW5cblx0ICogQHByb3RlY3RlZFxuXHQgKi9cblx0ZmluYWxpemVOYXZpZ2F0ZV8ocGF0aCwgbmV4dFNjcmVlbikge1xuXHRcdG5leHRTY3JlZW4uYWN0aXZhdGUoKTtcblxuXHRcdGlmICh0aGlzLmFjdGl2ZVNjcmVlbiAmJiAhdGhpcy5hY3RpdmVTY3JlZW4uaXNDYWNoZWFibGUoKSkge1xuXHRcdFx0aWYgKHRoaXMuYWN0aXZlU2NyZWVuICE9PSBuZXh0U2NyZWVuKSB7XG5cdFx0XHRcdHRoaXMucmVtb3ZlU2NyZWVuKHRoaXMuYWN0aXZlUGF0aCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0dGhpcy5hY3RpdmVQYXRoID0gcGF0aDtcblx0XHR0aGlzLmFjdGl2ZVNjcmVlbiA9IG5leHRTY3JlZW47XG5cdFx0dGhpcy5icm93c2VyUGF0aEJlZm9yZU5hdmlnYXRlID0gdXRpbHMuZ2V0Q3VycmVudEJyb3dzZXJQYXRoV2l0aG91dEhhc2goKTtcblx0XHR0aGlzLnNjcmVlbnNbcGF0aF0gPSBuZXh0U2NyZWVuO1xuXHRcdHRoaXMuaXNOYXZpZ2F0aW9uUGVuZGluZyA9IGZhbHNlO1xuXHRcdHRoaXMucGVuZGluZ05hdmlnYXRlID0gbnVsbDtcblx0XHRnbG9iYWxzLmNhcHR1cmVkRm9ybUVsZW1lbnQgPSBudWxsO1xuXHRcdGdsb2JhbHMuY2FwdHVyZWRGb3JtQnV0dG9uRWxlbWVudCA9IG51bGw7XG5cdFx0Y29uc29sZS5sb2coJ05hdmlnYXRpb24gZG9uZScpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEZpbmRzIGEgcm91dGUgZm9yIHRoZSB0ZXN0IHBhdGguIFJldHVybnMgdHJ1ZSBpZiBtYXRjaGVzIGhhcyBhIHJvdXRlLFxuXHQgKiBvdGhlcndpc2UgcmV0dXJucyBudWxsLlxuXHQgKiBAcGFyYW0geyFzdHJpbmd9IHBhdGggUGF0aCBjb250YWluaW5nIHRoZSBxdWVyeXN0cmluZyBwYXJ0LlxuXHQgKiBAcmV0dXJuIHs/T2JqZWN0fSBSb3V0ZSBoYW5kbGVyIGlmIG1hdGNoIGFueSBvciA8Y29kZT5udWxsPC9jb2RlPiBpZiB0aGVcblx0ICogICAgIHBhdGggaXMgdGhlIHNhbWUgYXMgdGhlIGN1cnJlbnQgdXJsIGFuZCB0aGUgcGF0aCBjb250YWlucyBhIGZyYWdtZW50LlxuXHQgKi9cblx0ZmluZFJvdXRlKHBhdGgpIHtcblx0XHRwYXRoID0gdGhpcy5nZXRSb3V0ZVBhdGgocGF0aCk7XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnJvdXRlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIHJvdXRlID0gdGhpcy5yb3V0ZXNbaV07XG5cdFx0XHRpZiAocm91dGUubWF0Y2hlc1BhdGgocGF0aCkpIHtcblx0XHRcdFx0cmV0dXJuIHJvdXRlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0LyoqXG5cdCAqIEdldHMgYWxsb3cgcHJldmVudCBuYXZpZ2F0ZS5cblx0ICogQHJldHVybiB7Ym9vbGVhbn1cblx0ICovXG5cdGdldEFsbG93UHJldmVudE5hdmlnYXRlKCkge1xuXHRcdHJldHVybiB0aGlzLmFsbG93UHJldmVudE5hdmlnYXRlO1xuXHR9XG5cblx0LyoqXG5cdCAqIEdldHMgbGluayBiYXNlIHBhdGguXG5cdCAqIEByZXR1cm4geyFzdHJpbmd9XG5cdCAqL1xuXHRnZXRCYXNlUGF0aCgpIHtcblx0XHRyZXR1cm4gdGhpcy5iYXNlUGF0aDtcblx0fVxuXG5cdC8qKlxuXHQgKiBHZXRzIHRoZSBkZWZhdWx0IHBhZ2UgdGl0bGUuXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gZGVmYXVsdFRpdGxlXG5cdCAqL1xuXHRnZXREZWZhdWx0VGl0bGUoKSB7XG5cdFx0cmV0dXJuIHRoaXMuZGVmYXVsdFRpdGxlO1xuXHR9XG5cblx0LyoqXG5cdCAqIEdldHMgdGhlIGZvcm0gc2VsZWN0b3IuXG5cdCAqIEByZXR1cm4geyFzdHJpbmd9XG5cdCAqL1xuXHRnZXRGb3JtU2VsZWN0b3IoKSB7XG5cdFx0cmV0dXJuIHRoaXMuZm9ybVNlbGVjdG9yO1xuXHR9XG5cblx0LyoqXG5cdCAqIENoZWNrIGlmIHJvdXRlIG1hdGNoaW5nIGlzIGlnbm9yaW5nIHF1ZXJ5IHN0cmluZyBmcm9tIHRoZSByb3V0ZSBwYXRoLlxuXHQgKiBAcmV0dXJuIHtib29sZWFufVxuXHQgKi9cblx0Z2V0SWdub3JlUXVlcnlTdHJpbmdGcm9tUm91dGVQYXRoKCkge1xuXHRcdHJldHVybiB0aGlzLmlnbm9yZVF1ZXJ5U3RyaW5nRnJvbVJvdXRlUGF0aDtcblx0fVxuXG5cdC8qKlxuXHQgKiBHZXRzIHRoZSBsaW5rIHNlbGVjdG9yLlxuXHQgKiBAcmV0dXJuIHshc3RyaW5nfVxuXHQgKi9cblx0Z2V0TGlua1NlbGVjdG9yKCkge1xuXHRcdHJldHVybiB0aGlzLmxpbmtTZWxlY3Rvcjtcblx0fVxuXG5cdC8qKlxuXHQgKiBHZXRzIHRoZSBsb2FkaW5nIGNzcyBjbGFzcy5cblx0ICogQHJldHVybiB7IXN0cmluZ31cblx0ICovXG5cdGdldExvYWRpbmdDc3NDbGFzcygpIHtcblx0XHRyZXR1cm4gdGhpcy5sb2FkaW5nQ3NzQ2xhc3M7XG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgZ2l2ZW4gcGF0aCBmb3JtYXR0ZWQgdG8gYmUgbWF0Y2hlZCBieSBhIHJvdXRlLiBUaGlzIHdpbGwsXG5cdCAqIGZvciBleGFtcGxlLCByZW1vdmUgdGhlIGJhc2UgcGF0aCBmcm9tIGl0LCBidXQgbWFrZSBzdXJlIGl0IHdpbGwgZW5kXG5cdCAqIHdpdGggYSAnLycuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoXG5cdCAqIEByZXR1cm4ge3N0cmluZ31cblx0ICovXG5cdGdldFJvdXRlUGF0aChwYXRoKSB7XG5cdFx0aWYgKHRoaXMuZ2V0SWdub3JlUXVlcnlTdHJpbmdGcm9tUm91dGVQYXRoKCkpIHtcblx0XHRcdHBhdGggPSB1dGlscy5nZXRVcmxQYXRoV2l0aG91dEhhc2hBbmRTZWFyY2gocGF0aCk7XG5cdFx0XHRyZXR1cm4gdXRpbHMuZ2V0VXJsUGF0aFdpdGhvdXRIYXNoQW5kU2VhcmNoKHBhdGguc3Vic3RyKHRoaXMuYmFzZVBhdGgubGVuZ3RoKSk7XG5cdFx0fVxuXG5cdFx0cGF0aCA9IHV0aWxzLmdldFVybFBhdGhXaXRob3V0SGFzaChwYXRoKTtcblx0XHRyZXR1cm4gdXRpbHMuZ2V0VXJsUGF0aFdpdGhvdXRIYXNoKHBhdGguc3Vic3RyKHRoaXMuYmFzZVBhdGgubGVuZ3RoKSk7XG5cdH1cblxuXHQvKipcblx0ICogR2V0cyB0aGUgdXBkYXRlIHNjcm9sbCBwb3NpdGlvbiB2YWx1ZS5cblx0ICogQHJldHVybiB7Ym9vbGVhbn1cblx0ICovXG5cdGdldFVwZGF0ZVNjcm9sbFBvc2l0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnVwZGF0ZVNjcm9sbFBvc2l0aW9uO1xuXHR9XG5cblx0LyoqXG5cdCAqIEhhbmRsZSBuYXZpZ2F0aW9uIGVycm9yLlxuXHQgKiBAcGFyYW0geyFzdHJpbmd9IHBhdGggUGF0aCBjb250YWluaW5nIHRoZSBxdWVyeXN0cmluZyBwYXJ0LlxuXHQgKiBAcGFyYW0geyFTY3JlZW59IG5leHRTY3JlZW5cblx0ICogQHBhcmFtIHshRXJyb3J9IGVycm9yXG5cdCAqIEBwcm90ZWN0ZWRcblx0ICovXG5cdGhhbmRsZU5hdmlnYXRlRXJyb3JfKHBhdGgsIG5leHRTY3JlZW4sIGVycikge1xuXHRcdGNvbnNvbGUubG9nKCdOYXZpZ2F0aW9uIGVycm9yIGZvciBbJyArIG5leHRTY3JlZW4gKyAnXSAoJyArIGVyciArICcpJyk7XG5cdFx0aWYgKCF1dGlscy5pc0N1cnJlbnRCcm93c2VyUGF0aChwYXRoKSkge1xuXHRcdFx0aWYgKHRoaXMuaXNOYXZpZ2F0aW9uUGVuZGluZyAmJiB0aGlzLnBlbmRpbmdOYXZpZ2F0ZSkge1xuXHRcdFx0XHR0aGlzLnBlbmRpbmdOYXZpZ2F0ZS50aGVuQWx3YXlzKCgpID0+IHRoaXMucmVtb3ZlU2NyZWVuKHBhdGgpLCB0aGlzKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMucmVtb3ZlU2NyZWVuKHBhdGgpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBDaGVja3MgaWYgYXBwIGhhcyByb3V0ZXMuXG5cdCAqIEByZXR1cm4ge2Jvb2xlYW59XG5cdCAqL1xuXHRoYXNSb3V0ZXMoKSB7XG5cdFx0cmV0dXJuIHRoaXMucm91dGVzLmxlbmd0aCA+IDA7XG5cdH1cblxuXHQvKipcblx0ICogVGVzdHMgaWYgaG9zdG5hbWUgaXMgYW4gb2Zmc2l0ZSBsaW5rLlxuXHQgKiBAcGFyYW0geyFzdHJpbmd9IGhvc3RuYW1lIExpbmsgaG9zdG5hbWUgdG8gY29tcGFyZSB3aXRoXG5cdCAqICAgICA8Y29kZT5nbG9iYWxzLndpbmRvdy5sb2NhdGlvbi5ob3N0bmFtZTwvY29kZT4uXG5cdCAqIEByZXR1cm4ge2Jvb2xlYW59XG5cdCAqIEBwcm90ZWN0ZWRcblx0ICovXG5cdGlzTGlua1NhbWVPcmlnaW5fKGhvc3RuYW1lKSB7XG5cdFx0cmV0dXJuIGhvc3RuYW1lID09PSBnbG9iYWxzLndpbmRvdy5sb2NhdGlvbi5ob3N0bmFtZTtcblx0fVxuXG5cdC8qKlxuXHQgKiBUZXN0cyBpZiBsaW5rIGVsZW1lbnQgaGFzIHRoZSBzYW1lIGFwcCdzIGJhc2UgcGF0aC5cblx0ICogQHBhcmFtIHshc3RyaW5nfSBwYXRoIExpbmsgcGF0aCBjb250YWluaW5nIHRoZSBxdWVyeXN0cmluZyBwYXJ0LlxuXHQgKiBAcmV0dXJuIHtib29sZWFufVxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqL1xuXHRpc1NhbWVCYXNlUGF0aF8ocGF0aCkge1xuXHRcdHJldHVybiBwYXRoLmluZGV4T2YodGhpcy5iYXNlUGF0aCkgPT09IDA7XG5cdH1cblxuXHQvKipcblx0ICogTG9jayB0aGUgZG9jdW1lbnQgc2Nyb2xsIGluIG9yZGVyIHRvIGF2b2lkIHRoZSBicm93c2VyIG5hdGl2ZSBiYWNrIGFuZFxuXHQgKiBmb3J3YXJkIG5hdmlnYXRpb24gdG8gY2hhbmdlIHRoZSBzY3JvbGwgcG9zaXRpb24uIEluIHRoZSBlbmQgb2Zcblx0ICogbmF2aWdhdGlvbiBsaWZlY3ljbGUgc2Nyb2xsIGlzIHJlcG9zaXRpb25lZC5cblx0ICogQHByb3RlY3RlZFxuXHQgKi9cblx0bG9ja0hpc3RvcnlTY3JvbGxQb3NpdGlvbl8oKSB7XG5cdFx0dmFyIHN0YXRlID0gZ2xvYmFscy53aW5kb3cuaGlzdG9yeS5zdGF0ZTtcblx0XHRpZiAoIXN0YXRlKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdC8vIEJyb3dzZXJzIGFyZSBpbmNvbnNpc3RlbnQgd2hlbiByZS1wb3NpdGlvbmluZyB0aGUgc2Nyb2xsIGhpc3Rvcnkgb25cblx0XHQvLyBwb3BzdGF0ZS4gQXQgc29tZSBicm93c2VycywgaGlzdG9yeSBzY3JvbGwgaGFwcGVucyBiZWZvcmUgcG9wc3RhdGUsIHRoZW5cblx0XHQvLyBsb2NrIHRoZSBzY3JvbGwgb24gdGhlIGxhc3Qga25vd24gcG9zaXRpb24gYXMgc29vbiBhcyBwb3NzaWJsZSBhZnRlciB0aGVcblx0XHQvLyBjdXJyZW50IEpTIGV4ZWN1dGlvbiBjb250ZXh0IGFuZCBjYXB0dXJlIHRoZSBjdXJyZW50IHZhbHVlLiBTb21lIG90aGVycyxcblx0XHQvLyBoaXN0b3J5IHNjcm9sbCBoYXBwZW5zIGFmdGVyIHBvcHN0YXRlLCBpbiB0aGlzIGNhc2UsIHdlIGJpbmQgYW4gb25jZVxuXHRcdC8vIHNjcm9sbCBldmVudCB0byBsb2NrIHRoZSBsYXMga25vd24gcG9zaXRpb24uIExhc3RseSwgdGhlIHByZXZpb3VzIHR3b1xuXHRcdC8vIGJlaGF2aW9ycyBjYW4gaGFwcGVuIGV2ZW4gb24gdGhlIHNhbWUgYnJvd3NlciwgaGVuY2UgdGhlIHJhY2Ugd2lsbCBkZWNpZGVcblx0XHQvLyB0aGUgd2lubmVyLlxuXHRcdHZhciB3aW5uZXIgPSBmYWxzZTtcblx0XHR2YXIgc3dpdGNoU2Nyb2xsUG9zaXRpb25SYWNlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRnbG9iYWxzLmRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHN3aXRjaFNjcm9sbFBvc2l0aW9uUmFjZSwgZmFsc2UpO1xuXHRcdFx0aWYgKCF3aW5uZXIpIHtcblx0XHRcdFx0Z2xvYmFscy53aW5kb3cuc2Nyb2xsVG8oc3RhdGUuc2Nyb2xsTGVmdCwgc3RhdGUuc2Nyb2xsVG9wKTtcblx0XHRcdFx0d2lubmVyID0gdHJ1ZTtcblx0XHRcdH1cblx0XHR9O1xuXHRcdGFzeW5jLm5leHRUaWNrKHN3aXRjaFNjcm9sbFBvc2l0aW9uUmFjZSk7XG5cdFx0Z2xvYmFscy5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBzd2l0Y2hTY3JvbGxQb3NpdGlvblJhY2UsIGZhbHNlKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBJZiBzdXBwb3J0ZWQgYnkgdGhlIGJyb3dzZXIsIGRpc2FibGVzIG5hdGl2ZSBzY3JvbGwgcmVzdG9yYXRpb24gYW5kXG5cdCAqIHN0b3JlcyBjdXJyZW50IHZhbHVlLlxuXHQgKi9cblx0bWF5YmVEaXNhYmxlTmF0aXZlU2Nyb2xsUmVzdG9yYXRpb24oKSB7XG5cdFx0aWYgKHRoaXMubmF0aXZlU2Nyb2xsUmVzdG9yYXRpb25TdXBwb3J0ZWQpIHtcblx0XHRcdHRoaXMubmF0aXZlU2Nyb2xsUmVzdG9yYXRpb25fID0gZ2xvYmFscy53aW5kb3cuaGlzdG9yeS5zY3JvbGxSZXN0b3JhdGlvbjtcblx0XHRcdGdsb2JhbHMud2luZG93Lmhpc3Rvcnkuc2Nyb2xsUmVzdG9yYXRpb24gPSAnbWFudWFsJztcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogTWF5YmUgbmF2aWdhdGUgdG8gYSBwYXRoLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gaHJlZiBJbmZvcm1hdGlvbiBhYm91dCB0aGUgbGluaydzIGhyZWYuXG5cdCAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IERvbSBldmVudCB0aGF0IGluaXRpYXRlZCB0aGUgbmF2aWdhdGlvbi5cblx0ICovXG5cdG1heWJlTmF2aWdhdGVfKGhyZWYsIGV2ZW50KSB7XG5cdFx0aWYgKCF0aGlzLmNhbk5hdmlnYXRlKGhyZWYpKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Z2xvYmFscy5jYXB0dXJlZEZvcm1FbGVtZW50ID0gZXZlbnQuY2FwdHVyZWRGb3JtRWxlbWVudDtcblx0XHRnbG9iYWxzLmNhcHR1cmVkRm9ybUJ1dHRvbkVsZW1lbnQgPSBldmVudC5jYXB0dXJlZEZvcm1CdXR0b25FbGVtZW50O1xuXG5cdFx0dmFyIG5hdmlnYXRlRmFpbGVkID0gZmFsc2U7XG5cdFx0dHJ5IHtcblx0XHRcdHRoaXMubmF2aWdhdGUodXRpbHMuZ2V0VXJsUGF0aChocmVmKSwgZmFsc2UsIGV2ZW50KTtcblx0XHR9IGNhdGNoIChlcnIpIHtcblx0XHRcdC8vIERvIG5vdCBwcmV2ZW50IGxpbmsgbmF2aWdhdGlvbiBpbiBjYXNlIHNvbWUgc3luY2hyb25vdXMgZXJyb3Igb2NjdXJzXG5cdFx0XHRuYXZpZ2F0ZUZhaWxlZCA9IHRydWU7XG5cdFx0fVxuXG5cdFx0aWYgKCFuYXZpZ2F0ZUZhaWxlZCkge1xuXHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogTWF5YmUgcmVwb3NpdGlvbiBzY3JvbGwgdG8gaGFzaGVkIGFuY2hvci5cblx0ICovXG5cdG1heWJlUmVwb3NpdGlvblNjcm9sbFRvSGFzaGVkQW5jaG9yKCkge1xuXHRcdGNvbnN0IGhhc2ggPSBnbG9iYWxzLndpbmRvdy5sb2NhdGlvbi5oYXNoO1xuXHRcdGlmIChoYXNoKSB7XG5cdFx0XHRsZXQgYW5jaG9yRWxlbWVudCA9IGdsb2JhbHMuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaGFzaC5zdWJzdHJpbmcoMSkpO1xuXHRcdFx0aWYgKGFuY2hvckVsZW1lbnQpIHtcblx0XHRcdFx0Y29uc3Qge29mZnNldExlZnQsIG9mZnNldFRvcH0gPSB1dGlscy5nZXROb2RlT2Zmc2V0KGFuY2hvckVsZW1lbnQpO1xuXHRcdFx0XHRnbG9iYWxzLndpbmRvdy5zY3JvbGxUbyhvZmZzZXRMZWZ0LCBvZmZzZXRUb3ApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBJZiBzdXBwb3J0ZWQgYnkgdGhlIGJyb3dzZXIsIHJlc3RvcmVzIG5hdGl2ZSBzY3JvbGwgcmVzdG9yYXRpb24gdG8gdGhlXG5cdCAqIHZhbHVlIGNhcHR1cmVkIGJ5IGBtYXliZURpc2FibGVOYXRpdmVTY3JvbGxSZXN0b3JhdGlvbmAuXG5cdCAqL1xuXHRtYXliZVJlc3RvcmVOYXRpdmVTY3JvbGxSZXN0b3JhdGlvbigpIHtcblx0XHRpZiAodGhpcy5uYXRpdmVTY3JvbGxSZXN0b3JhdGlvblN1cHBvcnRlZCAmJiB0aGlzLm5hdGl2ZVNjcm9sbFJlc3RvcmF0aW9uXykge1xuXHRcdFx0Z2xvYmFscy53aW5kb3cuaGlzdG9yeS5zY3JvbGxSZXN0b3JhdGlvbiA9IHRoaXMubmF0aXZlU2Nyb2xsUmVzdG9yYXRpb25fO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBNYXliZSByZXN0b3JlIHJlZGlyZWN0ZWQgcGF0aCBoYXNoIGluIGNhc2UgYm90aCB0aGUgY3VycmVudCBwYXRoIGFuZFxuXHQgKiB0aGUgZ2l2ZW4gcGF0aCBhcmUgdGhlIHNhbWUuXG5cdCAqIEBwYXJhbSB7IXN0cmluZ30gcGF0aCBQYXRoIGJlZm9yZSBuYXZpZ2F0aW9uLlxuXHQgKiBAcGFyYW0geyFzdHJpbmd9IHJlZGlyZWN0UGF0aCBQYXRoIGFmdGVyIG5hdmlnYXRpb24uXG5cdCAqIEBwYXJhbSB7IXN0cmluZ30gaGFzaCBIYXNoIHRvIGJlIGFkZGVkIHRvIHRoZSBwYXRoLlxuXHQgKiBAcmV0dXJuIHshc3RyaW5nfSBSZXR1cm5zIHRoZSBwYXRoIHdpdGggdGhlIGhhc2ggcmVzdG9yZWQuXG5cdCAqL1xuXHRtYXliZVJlc3RvcmVSZWRpcmVjdFBhdGhIYXNoXyhwYXRoLCByZWRpcmVjdFBhdGgsIGhhc2gpIHtcblx0XHRpZiAocmVkaXJlY3RQYXRoID09PSB1dGlscy5nZXRVcmxQYXRoV2l0aG91dEhhc2gocGF0aCkpIHtcblx0XHRcdHJldHVybiByZWRpcmVjdFBhdGggKyBoYXNoO1xuXHRcdH1cblx0XHRyZXR1cm4gcmVkaXJlY3RQYXRoO1xuXHR9XG5cblx0LyoqXG5cdCAqIE1heWJlIHVwZGF0ZSBzY3JvbGwgcG9zaXRpb24gaW4gaGlzdG9yeSBzdGF0ZSB0byBhbmNob3Igb24gcGF0aC5cblx0ICogQHBhcmFtIHshc3RyaW5nfSBwYXRoIFBhdGggY29udGFpbmluZyBhbmNob3Jcblx0ICovXG5cdG1heWJlVXBkYXRlU2Nyb2xsUG9zaXRpb25TdGF0ZV8oKSB7XG5cdFx0dmFyIGhhc2ggPSBnbG9iYWxzLndpbmRvdy5sb2NhdGlvbi5oYXNoO1xuXHRcdHZhciBhbmNob3JFbGVtZW50ID0gZ2xvYmFscy5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChoYXNoLnN1YnN0cmluZygxKSk7XG5cdFx0aWYgKGFuY2hvckVsZW1lbnQpIHtcblx0XHRcdGNvbnN0IHtvZmZzZXRMZWZ0LCBvZmZzZXRUb3B9ID0gdXRpbHMuZ2V0Tm9kZU9mZnNldChhbmNob3JFbGVtZW50KTtcblx0XHRcdHRoaXMuc2F2ZUhpc3RvcnlDdXJyZW50UGFnZVNjcm9sbFBvc2l0aW9uXyhvZmZzZXRUb3AsIG9mZnNldExlZnQpO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBOYXZpZ2F0ZXMgdG8gdGhlIHNwZWNpZmllZCBwYXRoIGlmIHRoZXJlIGlzIGEgcm91dGUgaGFuZGxlciB0aGF0IG1hdGNoZXMuXG5cdCAqIEBwYXJhbSB7IXN0cmluZ30gcGF0aCBQYXRoIHRvIG5hdmlnYXRlIGNvbnRhaW5pbmcgdGhlIGJhc2UgcGF0aC5cblx0ICogQHBhcmFtIHtib29sZWFuPX0gb3B0X3JlcGxhY2VIaXN0b3J5IFJlcGxhY2VzIGJyb3dzZXIgaGlzdG9yeS5cblx0ICogQHBhcmFtIHtFdmVudD19IGV2ZW50IE9wdGlvbmFsIGV2ZW50IG9iamVjdCB0aGF0IHRyaWdnZXJlZCB0aGUgbmF2aWdhdGlvbi5cblx0ICogQHJldHVybiB7Q2FuY2VsbGFibGVQcm9taXNlfSBSZXR1cm5zIGEgcGVuZGluZyByZXF1ZXN0IGNhbmNlbGxhYmxlIHByb21pc2UuXG5cdCAqL1xuXHRuYXZpZ2F0ZShwYXRoLCBvcHRfcmVwbGFjZUhpc3RvcnksIG9wdF9ldmVudCkge1xuXHRcdGlmICghdXRpbHMuaXNIdG1sNUhpc3RvcnlTdXBwb3J0ZWQoKSkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdIVE1MNSBIaXN0b3J5IGlzIG5vdCBzdXBwb3J0ZWQuIFNlbm5hIHdpbGwgbm90IGludGVyY2VwdCBuYXZpZ2F0aW9uLicpO1xuXHRcdH1cblxuXHRcdC8vIFdoZW4gcmVsb2FkaW5nIHRoZSBzYW1lIHBhdGggZG8gcmVwbGFjZVN0YXRlIGluc3RlYWQgb2YgcHVzaFN0YXRlIHRvXG5cdFx0Ly8gYXZvaWQgcG9sbHV0aW5nIGhpc3Rvcnkgd2l0aCBzdGF0ZXMgd2l0aCB0aGUgc2FtZSBwYXRoLlxuXHRcdGlmIChwYXRoID09PSB0aGlzLmFjdGl2ZVBhdGgpIHtcblx0XHRcdG9wdF9yZXBsYWNlSGlzdG9yeSA9IHRydWU7XG5cdFx0fVxuXG5cdFx0dGhpcy5lbWl0KCdiZWZvcmVOYXZpZ2F0ZScsIHtcblx0XHRcdGV2ZW50OiBvcHRfZXZlbnQsXG5cdFx0XHRwYXRoOiBwYXRoLFxuXHRcdFx0cmVwbGFjZUhpc3Rvcnk6ICEhb3B0X3JlcGxhY2VIaXN0b3J5XG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gdGhpcy5wZW5kaW5nTmF2aWdhdGU7XG5cdH1cblxuXHQvKipcblx0ICogQmVmb3JlcyBuYXZpZ2F0aW9uIHRvIGEgcGF0aC5cblx0ICogQHBhcmFtIHshRXZlbnR9IGV2ZW50IEV2ZW50IGZhY2FkZSBjb250YWluaW5nIDxjb2RlPnBhdGg8L2NvZGU+IGFuZFxuXHQgKiAgICAgPGNvZGU+cmVwbGFjZUhpc3Rvcnk8L2NvZGU+LlxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqL1xuXHRvbkJlZm9yZU5hdmlnYXRlXyhldmVudCkge1xuXHRcdGlmIChnbG9iYWxzLmNhcHR1cmVkRm9ybUVsZW1lbnQpIHtcblx0XHRcdGV2ZW50LmZvcm0gPSBnbG9iYWxzLmNhcHR1cmVkRm9ybUVsZW1lbnQ7XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIEJlZm9yZXMgbmF2aWdhdGlvbiB0byBhIHBhdGguIFJ1bnMgYWZ0ZXIgZXh0ZXJuYWwgbGlzdGVuZXJzLlxuXHQgKiBAcGFyYW0geyFFdmVudH0gZXZlbnQgRXZlbnQgZmFjYWRlIGNvbnRhaW5pbmcgPGNvZGU+cGF0aDwvY29kZT4gYW5kXG5cdCAqICAgICA8Y29kZT5yZXBsYWNlSGlzdG9yeTwvY29kZT4uXG5cdCAqIEBwcm90ZWN0ZWRcblx0ICovXG5cdG9uQmVmb3JlTmF2aWdhdGVEZWZhdWx0XyhldmVudCkge1xuXHRcdGlmICh0aGlzLnBlbmRpbmdOYXZpZ2F0ZSkge1xuXHRcdFx0aWYgKHRoaXMucGVuZGluZ05hdmlnYXRlLnBhdGggPT09IGV2ZW50LnBhdGgpIHtcblx0XHRcdFx0Y29uc29sZS5sb2coJ1dhaXRpbmcuLi4nKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHRoaXMuZW1pdCgnc3RhcnROYXZpZ2F0ZScsIHtcblx0XHRcdGZvcm06IGV2ZW50LmZvcm0sXG5cdFx0XHRwYXRoOiBldmVudC5wYXRoLFxuXHRcdFx0cmVwbGFjZUhpc3Rvcnk6IGV2ZW50LnJlcGxhY2VIaXN0b3J5XG5cdFx0fSk7XG5cdH1cblxuXHQvKipcblx0ICogSW50ZXJjZXB0cyBkb2N1bWVudCBjbGlja3MgYW5kIHRlc3QgbGluayBlbGVtZW50cyBpbiBvcmRlciB0byBkZWNpZGVcblx0ICogd2hldGhlciBTdXJmYWNlIGFwcCBjYW4gbmF2aWdhdGUuXG5cdCAqIEBwYXJhbSB7IUV2ZW50fSBldmVudCBFdmVudCBmYWNhZGVcblx0ICogQHByb3RlY3RlZFxuXHQgKi9cblx0b25Eb2NDbGlja0RlbGVnYXRlXyhldmVudCkge1xuXHRcdGlmIChldmVudC5hbHRLZXkgfHwgZXZlbnQuY3RybEtleSB8fCBldmVudC5tZXRhS2V5IHx8IGV2ZW50LnNoaWZ0S2V5IHx8IGV2ZW50LmJ1dHRvbikge1xuXHRcdFx0Y29uc29sZS5sb2coJ05hdmlnYXRlIGFib3J0ZWQsIGludmFsaWQgbW91c2UgYnV0dG9uIG9yIG1vZGlmaWVyIGtleSBwcmVzc2VkLicpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHR0aGlzLm1heWJlTmF2aWdhdGVfKGV2ZW50LmRlbGVnYXRlVGFyZ2V0LmhyZWYsIGV2ZW50KTtcblx0fVxuXG5cdC8qKlxuXHQgKiBJbnRlcmNlcHRzIGRvY3VtZW50IGZvcm0gc3VibWl0cyBhbmQgdGVzdCBhY3Rpb24gcGF0aCBpbiBvcmRlciB0byBkZWNpZGVcblx0ICogd2hldGhlciBTdXJmYWNlIGFwcCBjYW4gbmF2aWdhdGUuXG5cdCAqIEBwYXJhbSB7IUV2ZW50fSBldmVudCBFdmVudCBmYWNhZGVcblx0ICogQHByb3RlY3RlZFxuXHQgKi9cblx0b25Eb2NTdWJtaXREZWxlZ2F0ZV8oZXZlbnQpIHtcblx0XHR2YXIgZm9ybSA9IGV2ZW50LmRlbGVnYXRlVGFyZ2V0O1xuXHRcdGlmIChmb3JtLm1ldGhvZCA9PT0gJ2dldCcpIHtcblx0XHRcdGNvbnNvbGUubG9nKCdHRVQgbWV0aG9kIG5vdCBzdXBwb3J0ZWQnKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0ZXZlbnQuY2FwdHVyZWRGb3JtRWxlbWVudCA9IGZvcm07XG5cdFx0Y29uc3QgYnV0dG9uU2VsZWN0b3IgPSAnYnV0dG9uOm5vdChbdHlwZV0pLGJ1dHRvblt0eXBlPXN1Ym1pdF0saW5wdXRbdHlwZT1zdWJtaXRdJztcblx0XHRpZiAobWF0Y2goZ2xvYmFscy5kb2N1bWVudC5hY3RpdmVFbGVtZW50LCBidXR0b25TZWxlY3RvcikpIHtcblx0XHRcdGV2ZW50LmNhcHR1cmVkRm9ybUJ1dHRvbkVsZW1lbnQgPSBnbG9iYWxzLmRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGV2ZW50LmNhcHR1cmVkRm9ybUJ1dHRvbkVsZW1lbnQgPSBmb3JtLnF1ZXJ5U2VsZWN0b3IoYnV0dG9uU2VsZWN0b3IpO1xuXHRcdH1cblx0XHR0aGlzLm1heWJlTmF2aWdhdGVfKGZvcm0uYWN0aW9uLCBldmVudCk7XG5cdH1cblxuXHQvKipcblx0ICogTGlzdGVucyB0byB0aGUgd2luZG93J3MgbG9hZCBldmVudCBpbiBvcmRlciB0byBhdm9pZCBpc3N1ZXMgd2l0aCBzb21lIGJyb3dzZXJzXG5cdCAqIHRoYXQgdHJpZ2dlciBwb3BzdGF0ZSBjYWxscyBvbiB0aGUgZmlyc3QgbG9hZC4gRm9yIG1vcmUgaW5mb3JtYXRpb24gc2VlXG5cdCAqIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNjQyMTc2OS9wb3BzdGF0ZS1vbi1wYWdlcy1sb2FkLWluLWNocm9tZS5cblx0ICogQHByb3RlY3RlZFxuXHQgKi9cblx0b25Mb2FkXygpIHtcblx0XHR0aGlzLnNraXBMb2FkUG9wc3RhdGUgPSB0cnVlO1xuXHRcdHNldFRpbWVvdXQoKCkgPT4ge1xuXHRcdFx0Ly8gVGhlIHRpbWVvdXQgZW5zdXJlcyB0aGF0IHBvcHN0YXRlIGV2ZW50cyB3aWxsIGJlIHVuYmxvY2tlZCByaWdodFxuXHRcdFx0Ly8gYWZ0ZXIgdGhlIGxvYWQgZXZlbnQgb2NjdXJlZCwgYnV0IG5vdCBpbiB0aGUgc2FtZSBldmVudC1sb29wIGN5Y2xlLlxuXHRcdFx0dGhpcy5za2lwTG9hZFBvcHN0YXRlID0gZmFsc2U7XG5cdFx0fSwgMCk7XG5cdFx0Ly8gVHJ5IHRvIHJlcG9zaXRpb24gc2Nyb2xsIHRvIHRoZSBoYXNoZWQgYW5jaG9yIHdoZW4gcGFnZSBsb2Fkcy5cblx0XHR0aGlzLm1heWJlUmVwb3NpdGlvblNjcm9sbFRvSGFzaGVkQW5jaG9yKCk7XG5cdH1cblxuXHQvKipcblx0ICogSGFuZGxlcyBicm93c2VyIGhpc3RvcnkgY2hhbmdlcyBhbmQgZmlyZXMgYXBwJ3MgbmF2aWdhdGlvbiBpZiB0aGUgc3RhdGVcblx0ICogYmVsb3dzIHRvIHVzLiBJZiB3ZSBkZXRlY3QgYSBwb3BzdGF0ZSBhbmQgdGhlIHN0YXRlIGlzIDxjb2RlPm51bGw8L2NvZGU+LFxuXHQgKiBhc3N1bWUgaXQgaXMgbmF2aWdhdGluZyB0byBhbiBleHRlcm5hbCBwYWdlIG9yIHRvIGEgcGFnZSB3ZSBkb24ndCBoYXZlXG5cdCAqIHJvdXRlLCB0aGVuIDxjb2RlPmdsb2JhbHMud2luZG93LmxvY2F0aW9uLnJlbG9hZCgpPC9jb2RlPiBpcyBpbnZva2VkIGluIG9yZGVyIHRvXG5cdCAqIHJlbG9hZCB0aGUgY29udGVudCB0byB0aGUgY3VycmVudCB1cmwuXG5cdCAqIEBwYXJhbSB7IUV2ZW50fSBldmVudCBFdmVudCBmYWNhZGVcblx0ICogQHByb3RlY3RlZFxuXHQgKi9cblx0b25Qb3BzdGF0ZV8oZXZlbnQpIHtcblx0XHRpZiAodGhpcy5za2lwTG9hZFBvcHN0YXRlKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRG8gbm90IG5hdmlnYXRlIGlmIHRoZSBwb3BzdGF0ZSB3YXMgdHJpZ2dlcmVkIGJ5IGEgaGFzaCBjaGFuZ2UuXG5cdFx0aWYgKHV0aWxzLmlzQ3VycmVudEJyb3dzZXJQYXRoKHRoaXMuYnJvd3NlclBhdGhCZWZvcmVOYXZpZ2F0ZSkpIHtcblx0XHRcdHRoaXMubWF5YmVSZXBvc2l0aW9uU2Nyb2xsVG9IYXNoZWRBbmNob3IoKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YXIgc3RhdGUgPSBldmVudC5zdGF0ZTtcblxuXHRcdGlmICghc3RhdGUpIHtcblx0XHRcdGlmIChnbG9iYWxzLndpbmRvdy5sb2NhdGlvbi5oYXNoKSB7XG5cdFx0XHRcdC8vIElmIHNlbm5hIGlzIG9uIGFuIHJlZGlyZWN0IHBhdGggYW5kIGEgaGFzaCBwb3BzdGF0ZSBoYXBwZW5zXG5cdFx0XHRcdC8vIHRvIGEgZGlmZmVyZW50IHVybCwgcmVsb2FkIHRoZSBicm93c2VyLiBUaGlzIGJlaGF2aW9yIGRvZXNuJ3Rcblx0XHRcdFx0Ly8gcmVxdWlyZSBzZW5uYSB0byByb3V0ZSBoYXNoZWQgbGlua3MgYW5kIGlzIGNsb3NlciB0byBuYXRpdmVcblx0XHRcdFx0Ly8gYnJvd3NlciBiZWhhdmlvci5cblx0XHRcdFx0aWYgKHRoaXMucmVkaXJlY3RQYXRoICYmICF1dGlscy5pc0N1cnJlbnRCcm93c2VyUGF0aCh0aGlzLnJlZGlyZWN0UGF0aCkpIHtcblx0XHRcdFx0XHR0aGlzLnJlbG9hZFBhZ2UoKTtcblx0XHRcdFx0fVxuXHRcdFx0XHQvLyBBbHdheXMgdHJ5IHRvIHJlcG9zaXRpb24gc2Nyb2xsIHRvIHRoZSBoYXNoZWQgYW5jaG9yIHdoZW5cblx0XHRcdFx0Ly8gaGFzaCBwb3BzdGF0ZSBoYXBwZW5zLlxuXHRcdFx0XHR0aGlzLm1heWJlUmVwb3NpdGlvblNjcm9sbFRvSGFzaGVkQW5jaG9yKCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aGlzLnJlbG9hZFBhZ2UoKTtcblx0XHRcdH1cblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoc3RhdGUuc2VubmEpIHtcblx0XHRcdGNvbnNvbGUubG9nKCdIaXN0b3J5IG5hdmlnYXRpb24gdG8gWycgKyBzdGF0ZS5wYXRoICsgJ10nKTtcblx0XHRcdHRoaXMucG9wc3RhdGVTY3JvbGxUb3AgPSBzdGF0ZS5zY3JvbGxUb3A7XG5cdFx0XHR0aGlzLnBvcHN0YXRlU2Nyb2xsTGVmdCA9IHN0YXRlLnNjcm9sbExlZnQ7XG5cdFx0XHRpZiAoIXRoaXMubmF0aXZlU2Nyb2xsUmVzdG9yYXRpb25TdXBwb3J0ZWQpIHtcblx0XHRcdFx0dGhpcy5sb2NrSGlzdG9yeVNjcm9sbFBvc2l0aW9uXygpO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5uYXZpZ2F0ZShzdGF0ZS5wYXRoLCB0cnVlKTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogTGlzdGVucyBkb2N1bWVudCBzY3JvbGwgY2hhbmdlcyBpbiBvcmRlciB0byBjYXB0dXJlIHRoZSBwb3NzaWJsZSBsb2NrXG5cdCAqIHNjcm9sbCBwb3NpdGlvbiBmb3IgaGlzdG9yeSBzY3JvbGxpbmcuXG5cdCAqIEBwcm90ZWN0ZWRcblx0ICovXG5cdG9uU2Nyb2xsXygpIHtcblx0XHRpZiAodGhpcy5jYXB0dXJlU2Nyb2xsUG9zaXRpb25Gcm9tU2Nyb2xsRXZlbnQpIHtcblx0XHRcdHRoaXMuc2F2ZUhpc3RvcnlDdXJyZW50UGFnZVNjcm9sbFBvc2l0aW9uXyhnbG9iYWxzLndpbmRvdy5wYWdlWU9mZnNldCwgZ2xvYmFscy53aW5kb3cucGFnZVhPZmZzZXQpO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBTdGFydHMgbmF2aWdhdGlvbiB0byBhIHBhdGguXG5cdCAqIEBwYXJhbSB7IUV2ZW50fSBldmVudCBFdmVudCBmYWNhZGUgY29udGFpbmluZyA8Y29kZT5wYXRoPC9jb2RlPiBhbmRcblx0ICogICAgIDxjb2RlPnJlcGxhY2VIaXN0b3J5PC9jb2RlPi5cblx0ICogQHByb3RlY3RlZFxuXHQgKi9cblx0b25TdGFydE5hdmlnYXRlXyhldmVudCkge1xuXHRcdHRoaXMubWF5YmVEaXNhYmxlTmF0aXZlU2Nyb2xsUmVzdG9yYXRpb24oKTtcblx0XHR0aGlzLmNhcHR1cmVTY3JvbGxQb3NpdGlvbkZyb21TY3JvbGxFdmVudCA9IGZhbHNlO1xuXHRcdGFkZENsYXNzZXMoZ2xvYmFscy5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsIHRoaXMubG9hZGluZ0Nzc0NsYXNzKTtcblxuXHRcdHZhciBlbmROYXZpZ2F0ZVBheWxvYWQgPSB7XG5cdFx0XHRmb3JtOiBldmVudC5mb3JtLFxuXHRcdFx0cGF0aDogZXZlbnQucGF0aFxuXHRcdH07XG5cblx0XHR0aGlzLnBlbmRpbmdOYXZpZ2F0ZSA9IHRoaXMuZG9OYXZpZ2F0ZV8oZXZlbnQucGF0aCwgZXZlbnQucmVwbGFjZUhpc3RvcnkpXG5cdFx0XHQuY2F0Y2goKHJlYXNvbikgPT4ge1xuXHRcdFx0XHRlbmROYXZpZ2F0ZVBheWxvYWQuZXJyb3IgPSByZWFzb247XG5cdFx0XHRcdHRocm93IHJlYXNvbjtcblx0XHRcdH0pXG5cdFx0XHQudGhlbkFsd2F5cygoKSA9PiB7XG5cdFx0XHRcdGlmICghdGhpcy5wZW5kaW5nTmF2aWdhdGUpIHtcblx0XHRcdFx0XHRyZW1vdmVDbGFzc2VzKGdsb2JhbHMuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCB0aGlzLmxvYWRpbmdDc3NDbGFzcyk7XG5cdFx0XHRcdFx0dGhpcy5tYXliZVJlc3RvcmVOYXRpdmVTY3JvbGxSZXN0b3JhdGlvbigpO1xuXHRcdFx0XHRcdHRoaXMuY2FwdHVyZVNjcm9sbFBvc2l0aW9uRnJvbVNjcm9sbEV2ZW50ID0gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0XHR0aGlzLmVtaXQoJ2VuZE5hdmlnYXRlJywgZW5kTmF2aWdhdGVQYXlsb2FkKTtcblx0XHRcdH0pO1xuXG5cdFx0dGhpcy5wZW5kaW5nTmF2aWdhdGUucGF0aCA9IGV2ZW50LnBhdGg7XG5cdH1cblxuXHQvKipcblx0ICogUHJlZmV0Y2hlcyB0aGUgc3BlY2lmaWVkIHBhdGggaWYgdGhlcmUgaXMgYSByb3V0ZSBoYW5kbGVyIHRoYXQgbWF0Y2hlcy5cblx0ICogQHBhcmFtIHshc3RyaW5nfSBwYXRoIFBhdGggdG8gbmF2aWdhdGUgY29udGFpbmluZyB0aGUgYmFzZSBwYXRoLlxuXHQgKiBAcmV0dXJuIHtDYW5jZWxsYWJsZVByb21pc2V9IFJldHVybnMgYSBwZW5kaW5nIHJlcXVlc3QgY2FuY2VsbGFibGUgcHJvbWlzZS5cblx0ICovXG5cdHByZWZldGNoKHBhdGgpIHtcblx0XHR2YXIgcm91dGUgPSB0aGlzLmZpbmRSb3V0ZShwYXRoKTtcblx0XHRpZiAoIXJvdXRlKSB7XG5cdFx0XHRyZXR1cm4gQ2FuY2VsbGFibGVQcm9taXNlLnJlamVjdChuZXcgQ2FuY2VsbGFibGVQcm9taXNlLkNhbmNlbGxhdGlvbkVycm9yKCdObyByb3V0ZSBmb3IgJyArIHBhdGgpKTtcblx0XHR9XG5cblx0XHRjb25zb2xlLmxvZygnUHJlZmV0Y2hpbmcgWycgKyBwYXRoICsgJ10nKTtcblxuXHRcdHZhciBuZXh0U2NyZWVuID0gdGhpcy5jcmVhdGVTY3JlZW5JbnN0YW5jZShwYXRoLCByb3V0ZSk7XG5cblx0XHRyZXR1cm4gbmV4dFNjcmVlbi5sb2FkKHBhdGgpXG5cdFx0XHQudGhlbigoKSA9PiB0aGlzLnNjcmVlbnNbcGF0aF0gPSBuZXh0U2NyZWVuKVxuXHRcdFx0LmNhdGNoKChyZWFzb24pID0+IHtcblx0XHRcdFx0dGhpcy5oYW5kbGVOYXZpZ2F0ZUVycm9yXyhwYXRoLCBuZXh0U2NyZWVuLCByZWFzb24pO1xuXHRcdFx0XHR0aHJvdyByZWFzb247XG5cdFx0XHR9KTtcblx0fVxuXG5cdC8qKlxuXHQgKiBQcmVwYXJlcyBzY3JlZW4gZmxpcC4gVXBkYXRlcyBoaXN0b3J5IHN0YXRlIGFuZCBzdXJmYWNlcyBjb250ZW50LlxuXHQgKiBAcGFyYW0geyFzdHJpbmd9IHBhdGggUGF0aCBjb250YWluaW5nIHRoZSBxdWVyeXN0cmluZyBwYXJ0LlxuXHQgKiBAcGFyYW0geyFTY3JlZW59IG5leHRTY3JlZW5cblx0ICogQHBhcmFtIHtib29sZWFuPX0gb3B0X3JlcGxhY2VIaXN0b3J5IFJlcGxhY2VzIGJyb3dzZXIgaGlzdG9yeS5cblx0ICovXG5cdHByZXBhcmVOYXZpZ2F0ZUhpc3RvcnlfKHBhdGgsIG5leHRTY3JlZW4sIG9wdF9yZXBsYWNlSGlzdG9yeSkge1xuXHRcdGxldCB0aXRsZSA9IG5leHRTY3JlZW4uZ2V0VGl0bGUoKTtcblx0XHRpZiAoIWlzU3RyaW5nKHRpdGxlKSkge1xuXHRcdFx0dGl0bGUgPSB0aGlzLmdldERlZmF1bHRUaXRsZSgpO1xuXHRcdH1cblx0XHRsZXQgcmVkaXJlY3RQYXRoID0gbmV4dFNjcmVlbi5iZWZvcmVVcGRhdGVIaXN0b3J5UGF0aChwYXRoKTtcblx0XHRjb25zdCBoaXN0b3J5U3RhdGUgPSB7XG5cdFx0XHRmb3JtOiBpc0RlZkFuZE5vdE51bGwoZ2xvYmFscy5jYXB0dXJlZEZvcm1FbGVtZW50KSxcblx0XHRcdHBhdGgsXG5cdFx0XHRyZWRpcmVjdFBhdGgsXG5cdFx0XHRzY3JvbGxMZWZ0OiAwLFxuXHRcdFx0c2Nyb2xsVG9wOiAwLFxuXHRcdFx0c2VubmE6IHRydWVcblx0XHR9O1xuXHRcdGlmIChvcHRfcmVwbGFjZUhpc3RvcnkpIHtcblx0XHRcdGhpc3RvcnlTdGF0ZS5zY3JvbGxUb3AgPSB0aGlzLnBvcHN0YXRlU2Nyb2xsVG9wO1xuXHRcdFx0aGlzdG9yeVN0YXRlLnNjcm9sbExlZnQgPSB0aGlzLnBvcHN0YXRlU2Nyb2xsTGVmdDtcblx0XHR9XG5cdFx0Y29uc3QgaGFzaCA9IG5ldyBVcmkocGF0aCkuZ2V0SGFzaCgpO1xuXHRcdHJlZGlyZWN0UGF0aCA9IHRoaXMubWF5YmVSZXN0b3JlUmVkaXJlY3RQYXRoSGFzaF8ocGF0aCwgcmVkaXJlY3RQYXRoLCBoYXNoKTtcblx0XHR0aGlzLnVwZGF0ZUhpc3RvcnlfKHRpdGxlLCByZWRpcmVjdFBhdGgsIG5leHRTY3JlZW4uYmVmb3JlVXBkYXRlSGlzdG9yeVN0YXRlKGhpc3RvcnlTdGF0ZSksIG9wdF9yZXBsYWNlSGlzdG9yeSk7XG5cdFx0dGhpcy5yZWRpcmVjdFBhdGggPSByZWRpcmVjdFBhdGg7XG5cdH1cblxuXHQvKipcblx0ICogUHJlcGFyZXMgc2NyZWVuIGZsaXAuIFVwZGF0ZXMgaGlzdG9yeSBzdGF0ZSBhbmQgc3VyZmFjZXMgY29udGVudC5cblx0ICogQHBhcmFtIHshU2NyZWVufSBuZXh0U2NyZWVuXG5cdCAqIEBwYXJhbSB7IU9iamVjdH0gc3VyZmFjZXMgTWFwIG9mIHN1cmZhY2VzIHRvIGZsaXAga2V5ZWQgYnkgc3VyZmFjZSBpZC5cblx0ICogQHBhcmFtIHshT2JqZWN0fSBwYXJhbXMgUGFyYW1zIGV4dHJhY3RlZCBmcm9tIHRoZSBjdXJyZW50IHBhdGguXG5cdCAqL1xuXHRwcmVwYXJlTmF2aWdhdGVTdXJmYWNlc18obmV4dFNjcmVlbiwgc3VyZmFjZXMsIHBhcmFtcykge1xuXHRcdE9iamVjdC5rZXlzKHN1cmZhY2VzKS5mb3JFYWNoKChpZCkgPT4ge1xuXHRcdFx0dmFyIHN1cmZhY2VDb250ZW50ID0gbmV4dFNjcmVlbi5nZXRTdXJmYWNlQ29udGVudChpZCwgcGFyYW1zKTtcblx0XHRcdHN1cmZhY2VzW2lkXS5hZGRDb250ZW50KG5leHRTY3JlZW4uZ2V0SWQoKSwgc3VyZmFjZUNvbnRlbnQpO1xuXHRcdFx0Y29uc29sZS5sb2coJ1NjcmVlbiBbJyArIG5leHRTY3JlZW4uZ2V0SWQoKSArICddIGFkZCBjb250ZW50IHRvIHN1cmZhY2UgJyArXG5cdFx0XHRcdCdbJyArIHN1cmZhY2VzW2lkXSArICddIFsnICsgKGlzRGVmQW5kTm90TnVsbChzdXJmYWNlQ29udGVudCkgPyAnLi4uJyA6ICdlbXB0eScpICsgJ10nKTtcblx0XHR9KTtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZWxvYWRzIHRoZSBwYWdlIGJ5IHBlcmZvcm1pbmcgYHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKWAuXG5cdCAqL1xuXHRyZWxvYWRQYWdlKCkge1xuXHRcdGdsb2JhbHMud2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJlbW92ZXMgcm91dGUgaW5zdGFuY2UgZnJvbSBhcHAgcm91dGVzLlxuXHQgKiBAcGFyYW0ge1JvdXRlfSByb3V0ZVxuXHQgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIGFuIGVsZW1lbnQgd2FzIHJlbW92ZWQuXG5cdCAqL1xuXHRyZW1vdmVSb3V0ZShyb3V0ZSkge1xuXHRcdHJldHVybiBhcnJheS5yZW1vdmUodGhpcy5yb3V0ZXMsIHJvdXRlKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZW1vdmVzIGEgc2NyZWVuLlxuXHQgKiBAcGFyYW0geyFzdHJpbmd9IHBhdGggUGF0aCBjb250YWluaW5nIHRoZSBxdWVyeXN0cmluZyBwYXJ0LlxuXHQgKi9cblx0cmVtb3ZlU2NyZWVuKHBhdGgpIHtcblx0XHR2YXIgc2NyZWVuID0gdGhpcy5zY3JlZW5zW3BhdGhdO1xuXHRcdGlmIChzY3JlZW4pIHtcblx0XHRcdE9iamVjdC5rZXlzKHRoaXMuc3VyZmFjZXMpLmZvckVhY2goKHN1cmZhY2VJZCkgPT4gdGhpcy5zdXJmYWNlc1tzdXJmYWNlSWRdLnJlbW92ZShzY3JlZW4uZ2V0SWQoKSkpO1xuXHRcdFx0c2NyZWVuLmRpc3Bvc2UoKTtcblx0XHRcdGRlbGV0ZSB0aGlzLnNjcmVlbnNbcGF0aF07XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIFNhdmVzIGdpdmVuIHNjcm9sbCBwb3NpdGlvbiBpbnRvIGhpc3Rvcnkgc3RhdGUuXG5cdCAqIEBwYXJhbSB7IW51bWJlcn0gc2Nyb2xsVG9wIE51bWJlciBjb250YWluaW5nIHRoZSB0b3Agc2Nyb2xsIHBvc2l0aW9uIHRvIGJlIHNhdmVkLlxuXHQgKiBAcGFyYW0geyFudW1iZXJ9IHNjcm9sbExlZnQgTnVtYmVyIGNvbnRhaW5pbmcgdGhlIGxlZnQgc2Nyb2xsIHBvc2l0aW9uIHRvIGJlIHNhdmVkLlxuXHQgKi9cblx0c2F2ZUhpc3RvcnlDdXJyZW50UGFnZVNjcm9sbFBvc2l0aW9uXyhzY3JvbGxUb3AsIHNjcm9sbExlZnQpIHtcblx0XHR2YXIgc3RhdGUgPSBnbG9iYWxzLndpbmRvdy5oaXN0b3J5LnN0YXRlO1xuXHRcdGlmIChzdGF0ZSAmJiBzdGF0ZS5zZW5uYSkge1xuXHRcdFx0W3N0YXRlLnNjcm9sbFRvcCwgc3RhdGUuc2Nyb2xsTGVmdF0gPSBbc2Nyb2xsVG9wLCBzY3JvbGxMZWZ0XTtcblx0XHRcdGdsb2JhbHMud2luZG93Lmhpc3RvcnkucmVwbGFjZVN0YXRlKHN0YXRlLCBudWxsLCBudWxsKTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogU2V0cyBhbGxvdyBwcmV2ZW50IG5hdmlnYXRlLlxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IGFsbG93UHJldmVudE5hdmlnYXRlXG5cdCAqL1xuXHRzZXRBbGxvd1ByZXZlbnROYXZpZ2F0ZShhbGxvd1ByZXZlbnROYXZpZ2F0ZSkge1xuXHRcdHRoaXMuYWxsb3dQcmV2ZW50TmF2aWdhdGUgPSBhbGxvd1ByZXZlbnROYXZpZ2F0ZTtcblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIGxpbmsgYmFzZSBwYXRoLlxuXHQgKiBAcGFyYW0geyFzdHJpbmd9IHBhdGhcblx0ICovXG5cdHNldEJhc2VQYXRoKGJhc2VQYXRoKSB7XG5cdFx0dGhpcy5iYXNlUGF0aCA9IHV0aWxzLnJlbW92ZVBhdGhUcmFpbGluZ1NsYXNoKGJhc2VQYXRoKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSBkZWZhdWx0IHBhZ2UgdGl0bGUuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBkZWZhdWx0VGl0bGVcblx0ICovXG5cdHNldERlZmF1bHRUaXRsZShkZWZhdWx0VGl0bGUpIHtcblx0XHR0aGlzLmRlZmF1bHRUaXRsZSA9IGRlZmF1bHRUaXRsZTtcblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSBmb3JtIHNlbGVjdG9yLlxuXHQgKiBAcGFyYW0geyFzdHJpbmd9IGZvcm1TZWxlY3RvclxuXHQgKi9cblx0c2V0Rm9ybVNlbGVjdG9yKGZvcm1TZWxlY3Rvcikge1xuXHRcdHRoaXMuZm9ybVNlbGVjdG9yID0gZm9ybVNlbGVjdG9yO1xuXHRcdGlmICh0aGlzLmZvcm1FdmVudEhhbmRsZXJfKSB7XG5cdFx0XHR0aGlzLmZvcm1FdmVudEhhbmRsZXJfLnJlbW92ZUxpc3RlbmVyKCk7XG5cdFx0fVxuXHRcdHRoaXMuZm9ybUV2ZW50SGFuZGxlcl8gPSBkZWxlZ2F0ZShkb2N1bWVudCwgJ3N1Ym1pdCcsIHRoaXMuZm9ybVNlbGVjdG9yLCB0aGlzLm9uRG9jU3VibWl0RGVsZWdhdGVfLmJpbmQodGhpcyksIHRoaXMuYWxsb3dQcmV2ZW50TmF2aWdhdGUpO1xuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgaWYgcm91dGUgbWF0Y2hpbmcgc2hvdWxkIGlnbm9yZSBxdWVyeSBzdHJpbmcgZnJvbSB0aGUgcm91dGUgcGF0aC5cblx0ICogQHBhcmFtIHtib29sZWFufSBpZ25vcmVRdWVyeVN0cmluZ0Zyb21Sb3V0ZVBhdGhcblx0ICovXG5cdHNldElnbm9yZVF1ZXJ5U3RyaW5nRnJvbVJvdXRlUGF0aChpZ25vcmVRdWVyeVN0cmluZ0Zyb21Sb3V0ZVBhdGgpIHtcblx0XHR0aGlzLmlnbm9yZVF1ZXJ5U3RyaW5nRnJvbVJvdXRlUGF0aCA9IGlnbm9yZVF1ZXJ5U3RyaW5nRnJvbVJvdXRlUGF0aDtcblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSBsaW5rIHNlbGVjdG9yLlxuXHQgKiBAcGFyYW0geyFzdHJpbmd9IGxpbmtTZWxlY3RvclxuXHQgKi9cblx0c2V0TGlua1NlbGVjdG9yKGxpbmtTZWxlY3Rvcikge1xuXHRcdHRoaXMubGlua1NlbGVjdG9yID0gbGlua1NlbGVjdG9yO1xuXHRcdGlmICh0aGlzLmxpbmtFdmVudEhhbmRsZXJfKSB7XG5cdFx0XHR0aGlzLmxpbmtFdmVudEhhbmRsZXJfLnJlbW92ZUxpc3RlbmVyKCk7XG5cdFx0fVxuXHRcdHRoaXMubGlua0V2ZW50SGFuZGxlcl8gPSBkZWxlZ2F0ZShkb2N1bWVudCwgJ2NsaWNrJywgdGhpcy5saW5rU2VsZWN0b3IsIHRoaXMub25Eb2NDbGlja0RlbGVnYXRlXy5iaW5kKHRoaXMpLCB0aGlzLmFsbG93UHJldmVudE5hdmlnYXRlKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSBsb2FkaW5nIGNzcyBjbGFzcy5cblx0ICogQHBhcmFtIHshc3RyaW5nfSBsb2FkaW5nQ3NzQ2xhc3Ncblx0ICovXG5cdHNldExvYWRpbmdDc3NDbGFzcyhsb2FkaW5nQ3NzQ2xhc3MpIHtcblx0XHR0aGlzLmxvYWRpbmdDc3NDbGFzcyA9IGxvYWRpbmdDc3NDbGFzcztcblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSB1cGRhdGUgc2Nyb2xsIHBvc2l0aW9uIHZhbHVlLlxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IHVwZGF0ZVNjcm9sbFBvc2l0aW9uXG5cdCAqL1xuXHRzZXRVcGRhdGVTY3JvbGxQb3NpdGlvbih1cGRhdGVTY3JvbGxQb3NpdGlvbikge1xuXHRcdHRoaXMudXBkYXRlU2Nyb2xsUG9zaXRpb24gPSB1cGRhdGVTY3JvbGxQb3NpdGlvbjtcblx0fVxuXG5cdC8qKlxuXHQgKiBDYW5jZWxzIHBlbmRpbmcgbmF2aWdhdGUgd2l0aCA8Y29kZT5DYW5jZWwgcGVuZGluZyBuYXZpZ2F0aW9uPC9jb2RlPiBlcnJvci5cblx0ICogQHByb3RlY3RlZFxuXHQgKi9cblx0c3RvcFBlbmRpbmdOYXZpZ2F0ZV8oKSB7XG5cdFx0aWYgKHRoaXMucGVuZGluZ05hdmlnYXRlKSB7XG5cdFx0XHR0aGlzLnBlbmRpbmdOYXZpZ2F0ZS5jYW5jZWwoJ0NhbmNlbCBwZW5kaW5nIG5hdmlnYXRpb24nKTtcblx0XHRcdHRoaXMucGVuZGluZ05hdmlnYXRlID0gbnVsbDtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogU3luYyBkb2N1bWVudCBzY3JvbGwgcG9zaXRpb24gdHdpY2UsIHRoZSBmaXJzdCBvbmUgc3luY2hyb25vdXMgYW5kIHRoZW5cblx0ICogb25lIGluc2lkZSA8Y29kZT5hc3luYy5uZXh0VGljazwvY29kZT4uIFJlbGV2YW50IHRvIGJyb3dzZXJzIHRoYXQgZmlyZXNcblx0ICogc2Nyb2xsIHJlc3RvcmF0aW9uIGFzeW5jaHJvbm91c2x5IGFmdGVyIHBvcHN0YXRlLlxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqIEByZXR1cm4gez9DYW5jZWxsYWJsZVByb21pc2U9fVxuXHQgKi9cblx0c3luY1Njcm9sbFBvc2l0aW9uU3luY1RoZW5Bc3luY18oKSB7XG5cdFx0dmFyIHN0YXRlID0gZ2xvYmFscy53aW5kb3cuaGlzdG9yeS5zdGF0ZTtcblx0XHRpZiAoIXN0YXRlKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFyIHNjcm9sbFRvcCA9IHN0YXRlLnNjcm9sbFRvcDtcblx0XHR2YXIgc2Nyb2xsTGVmdCA9IHN0YXRlLnNjcm9sbExlZnQ7XG5cblx0XHR2YXIgc3luYyA9ICgpID0+IHtcblx0XHRcdGlmICh0aGlzLnVwZGF0ZVNjcm9sbFBvc2l0aW9uKSB7XG5cdFx0XHRcdGdsb2JhbHMud2luZG93LnNjcm9sbFRvKHNjcm9sbExlZnQsIHNjcm9sbFRvcCk7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHJldHVybiBuZXcgQ2FuY2VsbGFibGVQcm9taXNlKChyZXNvbHZlKSA9PiBzeW5jKCkgJiBhc3luYy5uZXh0VGljaygoKSA9PiBzeW5jKCkgJiByZXNvbHZlKCkpKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBVcGRhdGVzIG9yIHJlcGxhY2UgYnJvd3NlciBoaXN0b3J5LlxuXHQgKiBAcGFyYW0gez9zdHJpbmd9IHRpdGxlIERvY3VtZW50IHRpdGxlLlxuXHQgKiBAcGFyYW0geyFzdHJpbmd9IHBhdGggUGF0aCBjb250YWluaW5nIHRoZSBxdWVyeXN0cmluZyBwYXJ0LlxuXHQgKiBAcGFyYW0geyFvYmplY3R9IHN0YXRlXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9yZXBsYWNlSGlzdG9yeSBSZXBsYWNlcyBicm93c2VyIGhpc3RvcnkuXG5cdCAqIEBwcm90ZWN0ZWRcblx0ICovXG5cdHVwZGF0ZUhpc3RvcnlfKHRpdGxlLCBwYXRoLCBzdGF0ZSwgb3B0X3JlcGxhY2VIaXN0b3J5KSB7XG5cdFx0aWYgKG9wdF9yZXBsYWNlSGlzdG9yeSkge1xuXHRcdFx0Z2xvYmFscy53aW5kb3cuaGlzdG9yeS5yZXBsYWNlU3RhdGUoc3RhdGUsIHRpdGxlLCBwYXRoKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Z2xvYmFscy53aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUoc3RhdGUsIHRpdGxlLCBwYXRoKTtcblx0XHR9XG5cblx0XHRsZXQgdGl0bGVOb2RlID0gZ2xvYmFscy5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKCd0aXRsZScpO1xuXHRcdGlmICh0aXRsZU5vZGUpIHtcblx0XHRcdHRpdGxlTm9kZS5pbm5lckhUTUwgPSB0aXRsZTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Z2xvYmFscy5kb2N1bWVudC50aXRsZSA9IHRpdGxlO1xuXHRcdH1cblx0fVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IEFwcDtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHsgaXNEZWYsIGlzRGVmQW5kTm90TnVsbCB9IGZyb20gJ21ldGFsJztcbmltcG9ydCBVcmkgZnJvbSAnbWV0YWwtdXJpJztcbmltcG9ydCB7IENhbmNlbGxhYmxlUHJvbWlzZSBhcyBQcm9taXNlIH0gZnJvbSAnbWV0YWwtcHJvbWlzZSc7XG5cbmNsYXNzIEFqYXgge1xuXG5cdC8qKlxuXHQgKiBYbWxIdHRwUmVxdWVzdCdzIGdldEFsbFJlc3BvbnNlSGVhZGVycygpIG1ldGhvZCByZXR1cm5zIGEgc3RyaW5nIG9mXG5cdCAqIHJlc3BvbnNlIGhlYWRlcnMgYWNjb3JkaW5nIHRvIHRoZSBmb3JtYXQgZGVzY3JpYmVkIG9uIHRoZSBzcGVjOlxuXHQgKiB7QGxpbmsgaHR0cDovL3d3dy53My5vcmcvVFIvWE1MSHR0cFJlcXVlc3QvI3RoZS1nZXRhbGxyZXNwb25zZWhlYWRlcnMtbWV0aG9kfS5cblx0ICogVGhpcyBtZXRob2QgcGFyc2VzIHRoYXQgc3RyaW5nIGludG8gYSB1c2VyLWZyaWVuZGx5IG5hbWUvdmFsdWUgcGFpclxuXHQgKiBvYmplY3QuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBhbGxIZWFkZXJzIEFsbCBoZWFkZXJzIGFzIHN0cmluZy5cblx0ICogQHJldHVybiB7IUFycmF5LjxPYmplY3Q8c3RyaW5nLCBzdHJpbmc+Pn1cblx0ICovXG5cdHN0YXRpYyBwYXJzZVJlc3BvbnNlSGVhZGVycyhhbGxIZWFkZXJzKSB7XG5cdFx0dmFyIGhlYWRlcnMgPSBbXTtcblx0XHRpZiAoIWFsbEhlYWRlcnMpIHtcblx0XHRcdHJldHVybiBoZWFkZXJzO1xuXHRcdH1cblx0XHR2YXIgcGFpcnMgPSBhbGxIZWFkZXJzLnNwbGl0KCdcXHUwMDBkXFx1MDAwYScpO1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgcGFpcnMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBpbmRleCA9IHBhaXJzW2ldLmluZGV4T2YoJ1xcdTAwM2FcXHUwMDIwJyk7XG5cdFx0XHRpZiAoaW5kZXggPiAwKSB7XG5cdFx0XHRcdHZhciBuYW1lID0gcGFpcnNbaV0uc3Vic3RyaW5nKDAsIGluZGV4KTtcblx0XHRcdFx0dmFyIHZhbHVlID0gcGFpcnNbaV0uc3Vic3RyaW5nKGluZGV4ICsgMik7XG5cdFx0XHRcdGhlYWRlcnMucHVzaCh7XG5cdFx0XHRcdFx0bmFtZTogbmFtZSxcblx0XHRcdFx0XHR2YWx1ZTogdmFsdWVcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBoZWFkZXJzO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJlcXVlc3RzIHRoZSB1cmwgdXNpbmcgWE1MSHR0cFJlcXVlc3QuXG5cdCAqIEBwYXJhbSB7IXN0cmluZ30gdXJsXG5cdCAqIEBwYXJhbSB7IXN0cmluZ30gbWV0aG9kXG5cdCAqIEBwYXJhbSB7P3N0cmluZ30gYm9keVxuXHQgKiBAcGFyYW0ge011bHRpTWFwPX0gb3B0X2hlYWRlcnNcblx0ICogQHBhcmFtIHtNdWx0aU1hcD19IG9wdF9wYXJhbXNcblx0ICogQHBhcmFtIHtudW1iZXI9fSBvcHRfdGltZW91dFxuXHQgKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfc3luY1xuXHQgKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfd2l0aENyZWRlbnRpYWxzXG5cdCAqIEByZXR1cm4ge1Byb21pc2V9IERlZmVycmVkIGFqYXggcmVxdWVzdC5cblx0ICogQHByb3RlY3RlZFxuXHQgKi9cblx0c3RhdGljIHJlcXVlc3QodXJsLCBtZXRob2QsIGJvZHksIG9wdF9oZWFkZXJzLCBvcHRfcGFyYW1zLCBvcHRfdGltZW91dCwgb3B0X3N5bmMsIG9wdF93aXRoQ3JlZGVudGlhbHMpIHtcblx0XHR1cmwgPSB1cmwgfHwgJyc7XG5cdFx0bWV0aG9kID0gbWV0aG9kIHx8ICdHRVQnO1xuXG5cdFx0dmFyIHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblxuXHRcdHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cdFx0XHRyZXF1ZXN0Lm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAocmVxdWVzdC5hYm9ydGVkKSB7XG5cdFx0XHRcdFx0cmVxdWVzdC5vbmVycm9yKCk7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJlc29sdmUocmVxdWVzdCk7XG5cdFx0XHR9O1xuXHRcdFx0cmVxdWVzdC5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBlcnJvciA9IG5ldyBFcnJvcignUmVxdWVzdCBlcnJvcicpO1xuXHRcdFx0XHRlcnJvci5yZXF1ZXN0ID0gcmVxdWVzdDtcblx0XHRcdFx0cmVqZWN0KGVycm9yKTtcblx0XHRcdH07XG5cdFx0fSkudGhlbkNhdGNoKGZ1bmN0aW9uKHJlYXNvbikge1xuXHRcdFx0cmVxdWVzdC5hYm9ydCgpO1xuXHRcdFx0dGhyb3cgcmVhc29uO1xuXHRcdH0pLnRoZW5BbHdheXMoZnVuY3Rpb24oKSB7XG5cdFx0XHRjbGVhclRpbWVvdXQodGltZW91dCk7XG5cdFx0fSk7XG5cblx0XHRpZiAob3B0X3BhcmFtcykge1xuXHRcdFx0dXJsID0gbmV3IFVyaSh1cmwpLmFkZFBhcmFtZXRlcnNGcm9tTXVsdGlNYXAob3B0X3BhcmFtcykudG9TdHJpbmcoKTtcblx0XHR9XG5cblx0XHRyZXF1ZXN0Lm9wZW4obWV0aG9kLCB1cmwsICFvcHRfc3luYyk7XG5cblx0XHRpZiAob3B0X3dpdGhDcmVkZW50aWFscykge1xuXHRcdFx0cmVxdWVzdC53aXRoQ3JlZGVudGlhbHMgPSB0cnVlO1xuXHRcdH1cblxuXHRcdGlmIChvcHRfaGVhZGVycykge1xuXHRcdFx0b3B0X2hlYWRlcnMubmFtZXMoKS5mb3JFYWNoKGZ1bmN0aW9uKG5hbWUpIHtcblx0XHRcdFx0cmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKG5hbWUsIG9wdF9oZWFkZXJzLmdldEFsbChuYW1lKS5qb2luKCcsICcpKTtcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdHJlcXVlc3Quc2VuZChpc0RlZihib2R5KSA/IGJvZHkgOiBudWxsKTtcblxuXHRcdGlmIChpc0RlZkFuZE5vdE51bGwob3B0X3RpbWVvdXQpKSB7XG5cdFx0XHR2YXIgdGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHByb21pc2UuY2FuY2VsKCdSZXF1ZXN0IHRpbWVvdXQnKTtcblx0XHRcdH0sIG9wdF90aW1lb3V0KTtcblx0XHR9XG5cblx0XHRyZXR1cm4gcHJvbWlzZTtcblx0fVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IEFqYXg7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogSG9sZHMgdmFsdWUgZXJyb3IgbWVzc2FnZXMuXG4gKiBAY29uc3RcbiAqL1xuY2xhc3MgZXJyb3JzIHtcbn1cblxuLyoqXG4gKiBJbnZhbGlkIHN0YXR1cyBlcnJvciBtZXNzYWdlLlxuICogQHR5cGUge3N0cmluZ31cbiAqIEBzdGF0aWNcbiAqL1xuZXJyb3JzLklOVkFMSURfU1RBVFVTID0gJ0ludmFsaWQgc3RhdHVzIGNvZGUnO1xuXG4vKipcbiAqIFJlcXVlc3QgZXJyb3IgbWVzc2FnZS5cbiAqIEB0eXBlIHtzdHJpbmd9XG4gKiBAc3RhdGljXG4gKi9cbmVycm9ycy5SRVFVRVNUX0VSUk9SID0gJ1JlcXVlc3QgZXJyb3InO1xuXG4vKipcbiAqIFJlcXVlc3QgdGltZW91dCBlcnJvciBtZXNzYWdlLlxuICogQHR5cGUge3N0cmluZ31cbiAqIEBzdGF0aWNcbiAqL1xuZXJyb3JzLlJFUVVFU1RfVElNRU9VVCA9ICdSZXF1ZXN0IHRpbWVvdXQnO1xuXG5leHBvcnQgZGVmYXVsdCBlcnJvcnM7IiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIE1ldGFsLmpzIGJyb3dzZXIgdXNlciBhZ2VudCBkZXRlY3Rpb24uIEl0J3MgZXh0cmVtZWx5IHJlY29tbWVuZGVkIHRoZSB1c2FnZVxuICogb2YgZmVhdHVyZSBjaGVja2luZyBvdmVyIGJyb3dzZXIgdXNlciBhZ2VudCBzbmlmZmluZy4gVW5mb3J0dW5hdGVseSwgaW4gc29tZVxuICogc2l0dWF0aW9ucyBmZWF0dXJlIGNoZWNraW5nIGNhbiBiZSBzbG93IG9yIGV2ZW4gaW1wb3NzaWJsZSwgdGhlcmVmb3JlIHVzZVxuICogdGhpcyB1dGlsaXR5IHdpdGggY2F1dGlvbi5cbiAqIEBzZWUgPGEgaHJlZj1cImh0dHA6Ly93d3cudXNlcmFnZW50c3RyaW5nLmNvbS9cIj5Vc2VyIGFnZW50IHN0cmluZ3M8L2E+LlxuICovXG5jbGFzcyBVQSB7XG5cdC8qKlxuXHQgKiBHZXRzIHRoZSBuYXRpdmUgdXNlckFnZW50IHN0cmluZyBmcm9tIG5hdmlnYXRvciBpZiBpdCBleGlzdHMuIElmXG5cdCAqIG5hdmlnYXRvciBvciBuYXZpZ2F0b3IudXNlckFnZW50IHN0cmluZyBpcyBtaXNzaW5nLCByZXR1cm5zIGFuIGVtcHR5XG5cdCAqIHN0cmluZy5cblx0ICogQHJldHVybiB7c3RyaW5nfVxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAc3RhdGljXG5cdCAqL1xuXHRzdGF0aWMgZ2V0TmF0aXZlVXNlckFnZW50KCkge1xuXHRcdHZhciBuYXZpZ2F0b3IgPSBVQS5nbG9iYWxzLndpbmRvdy5uYXZpZ2F0b3I7XG5cdFx0aWYgKG5hdmlnYXRvcikge1xuXHRcdFx0dmFyIHVzZXJBZ2VudCA9IG5hdmlnYXRvci51c2VyQWdlbnQ7XG5cdFx0XHRpZiAodXNlckFnZW50KSB7XG5cdFx0XHRcdHJldHVybiB1c2VyQWdlbnQ7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiAnJztcblx0fVxuXG5cdC8qKlxuXHQgKiBHZXRzIHRoZSBuYXRpdmUgcGxhdGZvcm0gc3RyaW5nIGZyb20gbmF2aWdhdG9yIGlmIGl0IGV4aXN0cy4gSWZcblx0ICogbmF2aWdhdG9yIG9yIG5hdmlnYXRvci5wbGF0Zm9ybSBzdHJpbmcgaXMgbWlzc2luZywgcmV0dXJucyBhbiBlbXB0eVxuXHQgKiBzdHJpbmcuXG5cdCAqIEByZXR1cm4ge3N0cmluZ31cblx0ICogQHByaXZhdGVcblx0ICogQHN0YXRpY1xuXHQgKi9cblx0c3RhdGljIGdldE5hdGl2ZVBsYXRmb3JtKCkge1xuXHRcdHZhciBuYXZpZ2F0b3IgPSBVQS5nbG9iYWxzLndpbmRvdy5uYXZpZ2F0b3I7XG5cdFx0aWYgKG5hdmlnYXRvcikge1xuXHRcdFx0dmFyIHBsYXRmb3JtID0gbmF2aWdhdG9yLnBsYXRmb3JtO1xuXHRcdFx0aWYgKHBsYXRmb3JtKSB7XG5cdFx0XHRcdHJldHVybiBwbGF0Zm9ybTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuICcnO1xuXHR9XG5cblx0LyoqXG5cdCAqIFdoZXRoZXIgdGhlIHBsYXRmb3JtIGNvbnRhaW5zIHRoZSBnaXZlbiBzdHJpbmcsIGlnbm9yaW5nIGNhc2UuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBzdHJcblx0ICogQHJldHVybiB7Ym9vbGVhbn1cblx0ICogQHByaXZhdGVcblx0ICogQHN0YXRpY1xuXHQqL1xuXHRzdGF0aWMgbWF0Y2hQbGF0Zm9ybShzdHIpIHtcblx0XHRyZXR1cm4gVUEucGxhdGZvcm0uaW5kZXhPZihzdHIpICE9PSAtMTtcblx0fVxuXG5cdC8qKlxuXHQgKiBXaGV0aGVyIHRoZSB1c2VyIGFnZW50IGNvbnRhaW5zIHRoZSBnaXZlbiBzdHJpbmcsIGlnbm9yaW5nIGNhc2UuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBzdHJcblx0ICogQHJldHVybiB7Ym9vbGVhbn1cblx0ICogQHByaXZhdGVcblx0ICogQHN0YXRpY1xuXHQqL1xuXHRzdGF0aWMgbWF0Y2hVc2VyQWdlbnQoc3RyKSB7XG5cdFx0cmV0dXJuIFVBLnVzZXJBZ2VudC5pbmRleE9mKHN0cikgIT09IC0xO1xuXHR9XG5cblx0LyoqXG5cdCAqIFRlc3RzIHRoZSB1c2VyIGFnZW50LlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gdXNlckFnZW50IFRoZSB1c2VyIGFnZW50IHN0cmluZy5cblx0ICogQHN0YXRpY1xuXHQgKi9cblx0c3RhdGljIHRlc3RVc2VyQWdlbnQodXNlckFnZW50ID0gJycsIHBsYXRmb3JtID0gJycpIHtcblx0XHQvKipcblx0XHQgKiBIb2xkcyB0aGUgdXNlciBhZ2VudCB2YWx1ZSBleHRyYWN0ZWQgZnJvbSBicm93c2VyIG5hdGl2ZSB1c2VyIGFnZW50LlxuXHRcdCAqIEB0eXBlIHtzdHJpbmd9XG5cdFx0ICogQHN0YXRpY1xuXHRcdCAqL1xuXHRcdFVBLnVzZXJBZ2VudCA9IHVzZXJBZ2VudDtcblxuXHRcdC8qKlxuXHRcdCAqIEhvbGRzIHRoZSBwbGF0Zm9ybSB2YWx1ZSBleHRyYWN0ZWQgZnJvbSBicm93c2VyIG5hdGl2ZSBwbGF0Zm9ybS5cblx0XHQgKiBAdHlwZSB7c3RyaW5nfVxuXHRcdCAqIEBzdGF0aWNcblx0XHQgKi9cblx0XHRVQS5wbGF0Zm9ybSA9IHBsYXRmb3JtO1xuXG5cdFx0LyoqXG5cdFx0ICogV2hldGhlciB0aGUgdXNlcidzIE9TIGlzIE1hYy5cblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAc3RhdGljXG5cdFx0ICovXG5cdFx0VUEuaXNNYWMgPSBVQS5tYXRjaFBsYXRmb3JtKCdNYWMnKTtcblxuXHRcdC8qKlxuXHRcdCAqIFdoZXRoZXIgdGhlIHVzZXIncyBPUyBpcyBXaW4uXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQHN0YXRpY1xuXHRcdCAqL1xuXHRcdFVBLmlzV2luID0gVUEubWF0Y2hQbGF0Zm9ybSgnV2luJyk7XG5cblx0XHQvKipcblx0XHQgKiBXaGV0aGVyIHRoZSB1c2VyJ3MgYnJvd3NlciBpcyBPcGVyYS5cblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAc3RhdGljXG5cdFx0ICovXG5cdFx0VUEuaXNPcGVyYSA9IFVBLm1hdGNoVXNlckFnZW50KCdPcGVyYScpIHx8IFVBLm1hdGNoVXNlckFnZW50KCdPUFInKTtcblxuXHRcdC8qKlxuXHRcdCAqIFdoZXRoZXIgdGhlIHVzZXIncyBicm93c2VyIGlzIElFLlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEBzdGF0aWNcblx0XHQgKi9cblx0XHRVQS5pc0llID0gVUEubWF0Y2hVc2VyQWdlbnQoJ1RyaWRlbnQnKSB8fCBVQS5tYXRjaFVzZXJBZ2VudCgnTVNJRScpO1xuXG5cdFx0LyoqXG5cdFx0ICogV2hldGhlciB0aGUgdXNlcidzIGJyb3dzZXIgaXMgRWRnZS5cblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAc3RhdGljXG5cdFx0ICovXG5cdFx0VUEuaXNFZGdlID0gVUEubWF0Y2hVc2VyQWdlbnQoJ0VkZ2UnKTtcblxuXHRcdC8qKlxuXHRcdCAqIFdoZXRoZXIgdGhlIHVzZXIncyBicm93c2VyIGlzIElFIG9yIEVkZ2UuXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQHN0YXRpY1xuXHRcdCAqL1xuXHRcdFVBLmlzSWVPckVkZ2UgPSBVQS5pc0llIHx8IFVBLmlzRWRnZTtcblxuXHRcdC8qKlxuXHRcdCAqIFdoZXRoZXIgdGhlIHVzZXIncyBicm93c2VyIGlzIENocm9tZS5cblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAc3RhdGljXG5cdFx0ICovXG5cdFx0VUEuaXNDaHJvbWUgPSAoVUEubWF0Y2hVc2VyQWdlbnQoJ0Nocm9tZScpIHx8IFVBLm1hdGNoVXNlckFnZW50KCdDcmlPUycpKSAmJiAhVUEuaXNPcGVyYSAmJiAhVUEuaXNFZGdlO1xuXG5cdFx0LyoqXG5cdFx0ICogV2hldGhlciB0aGUgdXNlcidzIGJyb3dzZXIgaXMgU2FmYXJpLlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEBzdGF0aWNcblx0XHQgKi9cblx0XHRVQS5pc1NhZmFyaSA9IFVBLm1hdGNoVXNlckFnZW50KCdTYWZhcmknKSAmJiAhKFVBLmlzQ2hyb21lIHx8IFVBLmlzT3BlcmEgfHwgVUEuaXNFZGdlKTtcblxuXHRcdC8qKlxuXHRcdCAqIFdoZXRoZXIgdGhlIHVzZXIncyBicm93c2VyIGlzIEZpcmVmb3guXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQHN0YXRpY1xuXHRcdCAqL1xuXHRcdFVBLmlzRmlyZWZveCA9IFVBLm1hdGNoVXNlckFnZW50KCdGaXJlZm94Jyk7XG5cdH1cbn1cblxuLyoqXG4gKiBFeHBvc2VzIGdsb2JhbCByZWZlcmVuY2VzLlxuICogQHR5cGUge29iamVjdH1cbiAqIEBzdGF0aWNcbiAqL1xuVUEuZ2xvYmFscyA9IHtcblx0d2luZG93OiB3aW5kb3dcbn07XG5cblVBLnRlc3RVc2VyQWdlbnQoVUEuZ2V0TmF0aXZlVXNlckFnZW50KCksIFVBLmdldE5hdGl2ZVBsYXRmb3JtKCkpO1xuXG5leHBvcnQgZGVmYXVsdCBVQTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHsgaXNEZWZBbmROb3ROdWxsIH0gZnJvbSAnbWV0YWwnO1xuaW1wb3J0IEFqYXggZnJvbSAnbWV0YWwtYWpheCc7XG5pbXBvcnQgeyBNdWx0aU1hcCB9IGZyb20gJ21ldGFsLXN0cnVjdHMnO1xuaW1wb3J0IENhbmNlbGxhYmxlUHJvbWlzZSBmcm9tICdtZXRhbC1wcm9taXNlJztcbmltcG9ydCBlcnJvcnMgZnJvbSAnLi4vZXJyb3JzL2Vycm9ycyc7XG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMvdXRpbHMnO1xuaW1wb3J0IGdsb2JhbHMgZnJvbSAnLi4vZ2xvYmFscy9nbG9iYWxzJztcbmltcG9ydCBTY3JlZW4gZnJvbSAnLi9TY3JlZW4nO1xuaW1wb3J0IFVyaSBmcm9tICdtZXRhbC11cmknO1xuaW1wb3J0IFVBIGZyb20gJ21ldGFsLXVzZXJhZ2VudCc7XG5cbmNsYXNzIFJlcXVlc3RTY3JlZW4gZXh0ZW5kcyBTY3JlZW4ge1xuXG5cdC8qKlxuXHQgKiBSZXF1ZXN0IHNjcmVlbiBhYnN0cmFjdCBjbGFzcyB0byBwZXJmb3JtIGlvIG9wZXJhdGlvbnMgb24gZGVzY2VuZGFudFxuXHQgKiBzY3JlZW5zLlxuXHQgKiBAY29uc3RydWN0b3Jcblx0ICogQGV4dGVuZHMge1NjcmVlbn1cblx0ICovXG5cdGNvbnN0cnVjdG9yKCkge1xuXHRcdHN1cGVyKCk7XG5cblx0XHQvKipcblx0XHQgKiBAaW5oZXJpdERvY1xuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLmNhY2hlYWJsZSA9IHRydWU7XG5cblx0XHQvKipcblx0XHQgKiBIb2xkcyBkZWZhdWx0IGh0dHAgaGVhZGVycyB0byBzZXQgb24gcmVxdWVzdC5cblx0XHQgKiBAdHlwZSB7P09iamVjdD19XG5cdFx0ICogQGRlZmF1bHQge1xuXHRcdCAqICAgJ1gtUEpBWCc6ICd0cnVlJyxcblx0XHQgKiAgICdYLVJlcXVlc3RlZC1XaXRoJzogJ1hNTEh0dHBSZXF1ZXN0J1xuXHRcdCAqIH1cblx0XHQgKiBAcHJvdGVjdGVkXG5cdFx0ICovXG5cdFx0dGhpcy5odHRwSGVhZGVycyA9IHtcblx0XHRcdCdYLVBKQVgnOiAndHJ1ZScsXG5cdFx0XHQnWC1SZXF1ZXN0ZWQtV2l0aCc6ICdYTUxIdHRwUmVxdWVzdCdcblx0XHR9O1xuXG5cdFx0LyoqXG5cdFx0ICogSG9sZHMgZGVmYXVsdCBodHRwIG1ldGhvZCB0byBwZXJmb3JtIHRoZSByZXF1ZXN0LlxuXHRcdCAqIEB0eXBlIHshc3RyaW5nfVxuXHRcdCAqIEBkZWZhdWx0IFJlcXVlc3RTY3JlZW4uR0VUXG5cdFx0ICogQHByb3RlY3RlZFxuXHRcdCAqL1xuXHRcdHRoaXMuaHR0cE1ldGhvZCA9IFJlcXVlc3RTY3JlZW4uR0VUO1xuXG5cdFx0LyoqXG5cdFx0ICogSG9sZHMgdGhlIFhIUiBvYmplY3QgcmVzcG9uc2libGUgZm9yIHRoZSByZXF1ZXN0LlxuXHRcdCAqIEB0eXBlIHtYTUxIdHRwUmVxdWVzdH1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICogQHByb3RlY3RlZFxuXHRcdCAqL1xuXHRcdHRoaXMucmVxdWVzdCA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBIb2xkcyB0aGUgcmVxdWVzdCB0aW1lb3V0IGluIG1pbGxpc2Vjb25kcy5cblx0XHQgKiBAdHlwZSB7IW51bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAzMDAwMFxuXHRcdCAqIEBwcm90ZWN0ZWRcblx0XHQgKi9cblx0XHR0aGlzLnRpbWVvdXQgPSAzMDAwMDtcblx0fVxuXG5cdC8qKlxuXHQgKiBBc3NlcnRzIHRoYXQgcmVzcG9uc2Ugc3RhdHVzIGNvZGUgaXMgdmFsaWQuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBzdGF0dXNcblx0ICogQHByb3RlY3RlZFxuXHQgKi9cblx0YXNzZXJ0VmFsaWRSZXNwb25zZVN0YXR1c0NvZGUoc3RhdHVzKSB7XG5cdFx0aWYgKCF0aGlzLmlzVmFsaWRSZXNwb25zZVN0YXR1c0NvZGUoc3RhdHVzKSkge1xuXHRcdFx0dmFyIGVycm9yID0gbmV3IEVycm9yKGVycm9ycy5JTlZBTElEX1NUQVRVUyk7XG5cdFx0XHRlcnJvci5pbnZhbGlkU3RhdHVzID0gdHJ1ZTtcblx0XHRcdGVycm9yLnN0YXR1c0NvZGUgPSBzdGF0dXM7XG5cdFx0XHR0aHJvdyBlcnJvcjtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogQGluaGVyaXREb2Ncblx0ICovXG5cdGJlZm9yZVVwZGF0ZUhpc3RvcnlQYXRoKHBhdGgpIHtcblx0XHR2YXIgcmVkaXJlY3RQYXRoID0gdGhpcy5nZXRSZXF1ZXN0UGF0aCgpO1xuXHRcdGlmIChyZWRpcmVjdFBhdGggJiYgcmVkaXJlY3RQYXRoICE9PSBwYXRoKSB7XG5cdFx0XHRyZXR1cm4gcmVkaXJlY3RQYXRoO1xuXHRcdH1cblx0XHRyZXR1cm4gcGF0aDtcblx0fVxuXG5cdC8qKlxuXHQgKiBAaW5oZXJpdERvY1xuXHQgKi9cblx0YmVmb3JlVXBkYXRlSGlzdG9yeVN0YXRlKHN0YXRlKSB7XG5cdFx0Ly8gSWYgc3RhdGUgaXMgb3VycyBhbmQgbmF2aWdhdGUgdG8gcG9zdC13aXRob3V0LXJlZGlyZWN0LWdldCBzZXRcblx0XHQvLyBoaXN0b3J5IHN0YXRlIHRvIG51bGwsIHRoYXQgd2F5IFNlbm5hIHdpbGwgcmVsb2FkIHRoZSBwYWdlIG9uXG5cdFx0Ly8gcG9wc3RhdGUgc2luY2UgaXQgY2Fubm90IHByZWRpY3QgcG9zdCBkYXRhLlxuXHRcdGlmIChzdGF0ZS5zZW5uYSAmJiBzdGF0ZS5mb3JtICYmIHN0YXRlLnJlZGlyZWN0UGF0aCA9PT0gc3RhdGUucGF0aCkge1xuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fVxuXHRcdHJldHVybiBzdGF0ZTtcblx0fVxuXG5cdC8qKlxuXHQgKiBGb3JtYXRzIGxvYWQgcGF0aCBiZWZvcmUgaW52b2tpbmcgYWpheCBjYWxsLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gcGF0aFxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IEZvcm1hdHRlZCBwYXRoO1xuXHQgKiBAcHJvdGVjdGVkXG5cdCAqL1xuXHRmb3JtYXRMb2FkUGF0aChwYXRoKSB7XG5cdFx0dmFyIHVyaSA9IG5ldyBVcmkocGF0aCk7XG5cblx0XHR1cmkuc2V0SG9zdG5hbWUoZ2xvYmFscy53aW5kb3cubG9jYXRpb24uaG9zdG5hbWUpO1xuXHRcdHVyaS5zZXRQcm90b2NvbChnbG9iYWxzLndpbmRvdy5sb2NhdGlvbi5wcm90b2NvbCk7XG5cblx0XHRpZiAoZ2xvYmFscy53aW5kb3cubG9jYXRpb24ucG9ydCkge1xuXHRcdFx0dXJpLnNldFBvcnQoZ2xvYmFscy53aW5kb3cubG9jYXRpb24ucG9ydCk7XG5cdFx0fVxuXG5cdFx0aWYgKFVBLmlzSWVPckVkZ2UgJiYgdGhpcy5odHRwTWV0aG9kID09PSBSZXF1ZXN0U2NyZWVuLkdFVCkge1xuXHRcdFx0cmV0dXJuIHVyaS5tYWtlVW5pcXVlKCkudG9TdHJpbmcoKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdXJpLnRvU3RyaW5nKCk7XG5cdH1cblxuXHQvKipcblx0ICogR2V0cyB0aGUgaHR0cCBoZWFkZXJzLlxuXHQgKiBAcmV0dXJuIHs/T2JqZWN0PX1cblx0ICovXG5cdGdldEh0dHBIZWFkZXJzKCkge1xuXHRcdHJldHVybiB0aGlzLmh0dHBIZWFkZXJzO1xuXHR9XG5cblx0LyoqXG5cdCAqIEdldHMgdGhlIGh0dHAgbWV0aG9kLlxuXHQgKiBAcmV0dXJuIHshc3RyaW5nfVxuXHQgKi9cblx0Z2V0SHR0cE1ldGhvZCgpIHtcblx0XHRyZXR1cm4gdGhpcy5odHRwTWV0aG9kO1xuXHR9XG5cblx0LyoqXG5cdCAqIEdldHMgcmVxdWVzdCBwYXRoLlxuXHQgKiBAcmV0dXJuIHtzdHJpbmc9fVxuXHQgKi9cblx0Z2V0UmVxdWVzdFBhdGgoKSB7XG5cdFx0dmFyIHJlcXVlc3QgPSB0aGlzLmdldFJlcXVlc3QoKTtcblx0XHRpZiAocmVxdWVzdCkge1xuXHRcdFx0dmFyIHJlcXVlc3RQYXRoID0gcmVxdWVzdC5yZXF1ZXN0UGF0aDtcblx0XHRcdHZhciByZXNwb25zZVVybCA9IHRoaXMubWF5YmVFeHRyYWN0UmVzcG9uc2VVcmxGcm9tUmVxdWVzdChyZXF1ZXN0KTtcblx0XHRcdGlmIChyZXNwb25zZVVybCkge1xuXHRcdFx0XHRyZXF1ZXN0UGF0aCA9IHJlc3BvbnNlVXJsO1xuXHRcdFx0fVxuXHRcdFx0aWYgKFVBLmlzSWVPckVkZ2UgJiYgdGhpcy5odHRwTWV0aG9kID09PSBSZXF1ZXN0U2NyZWVuLkdFVCkge1xuXHRcdFx0XHRyZXF1ZXN0UGF0aCA9IG5ldyBVcmkocmVxdWVzdFBhdGgpLnJlbW92ZVVuaXF1ZSgpLnRvU3RyaW5nKCk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdXRpbHMuZ2V0VXJsUGF0aChyZXF1ZXN0UGF0aCk7XG5cdFx0fVxuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0LyoqXG5cdCAqIEdldHMgdGhlIHJlcXVlc3Qgb2JqZWN0LlxuXHQgKiBAcmV0dXJuIHs/T2JqZWN0fVxuXHQgKi9cblx0Z2V0UmVxdWVzdCgpIHtcblx0XHRyZXR1cm4gdGhpcy5yZXF1ZXN0O1xuXHR9XG5cblx0LyoqXG5cdCAqIEdldHMgdGhlIHJlcXVlc3QgdGltZW91dC5cblx0ICogQHJldHVybiB7IW51bWJlcn1cblx0ICovXG5cdGdldFRpbWVvdXQoKSB7XG5cdFx0cmV0dXJuIHRoaXMudGltZW91dDtcblx0fVxuXG5cdC8qKlxuXHQgKiBDaGVja3MgaWYgcmVzcG9uc2Ugc3VjY2VlZGVkLiBBbnkgc3RhdHVzIGNvZGUgMnh4IG9yIDN4eCBpcyBjb25zaWRlcmVkXG5cdCAqIHZhbGlkLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gc3RhdHVzQ29kZVxuXHQgKi9cblx0aXNWYWxpZFJlc3BvbnNlU3RhdHVzQ29kZShzdGF0dXNDb2RlKSB7XG5cdFx0cmV0dXJuIHN0YXR1c0NvZGUgPj0gMjAwICYmIHN0YXR1c0NvZGUgPD0gMzk5O1xuXHR9XG5cblx0LyoqXG5cdCAqIEBpbmhlcml0RG9jXG5cdCAqL1xuXHRsb2FkKHBhdGgpIHtcblx0XHRjb25zdCBjYWNoZSA9IHRoaXMuZ2V0Q2FjaGUoKTtcblx0XHRpZiAoaXNEZWZBbmROb3ROdWxsKGNhY2hlKSkge1xuXHRcdFx0cmV0dXJuIENhbmNlbGxhYmxlUHJvbWlzZS5yZXNvbHZlKGNhY2hlKTtcblx0XHR9XG5cdFx0bGV0IGJvZHkgPSBudWxsO1xuXHRcdGxldCBodHRwTWV0aG9kID0gdGhpcy5odHRwTWV0aG9kO1xuXHRcdGNvbnN0IGhlYWRlcnMgPSBuZXcgTXVsdGlNYXAoKTtcblx0XHRPYmplY3Qua2V5cyh0aGlzLmh0dHBIZWFkZXJzKS5mb3JFYWNoKGhlYWRlciA9PiBoZWFkZXJzLmFkZChoZWFkZXIsIHRoaXMuaHR0cEhlYWRlcnNbaGVhZGVyXSkpO1xuXHRcdGlmIChnbG9iYWxzLmNhcHR1cmVkRm9ybUVsZW1lbnQpIHtcblx0XHRcdGJvZHkgPSBuZXcgRm9ybURhdGEoZ2xvYmFscy5jYXB0dXJlZEZvcm1FbGVtZW50KTtcblx0XHRcdHRoaXMubWF5YmVBcHBlbmRTdWJtaXRCdXR0b25WYWx1ZV8oYm9keSk7XG5cdFx0XHRodHRwTWV0aG9kID0gUmVxdWVzdFNjcmVlbi5QT1NUO1xuXHRcdFx0aWYgKFVBLmlzSWVPckVkZ2UpIHtcblx0XHRcdFx0aGVhZGVycy5hZGQoJ0lmLU5vbmUtTWF0Y2gnLCAnXCIwXCInKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0Y29uc3QgcmVxdWVzdFBhdGggPSB0aGlzLmZvcm1hdExvYWRQYXRoKHBhdGgpO1xuXHRcdHJldHVybiBBamF4XG5cdFx0XHQucmVxdWVzdChyZXF1ZXN0UGF0aCwgaHR0cE1ldGhvZCwgYm9keSwgaGVhZGVycywgbnVsbCwgdGhpcy50aW1lb3V0KVxuXHRcdFx0LnRoZW4oeGhyID0+IHtcblx0XHRcdFx0dGhpcy5zZXRSZXF1ZXN0KHhocik7XG5cdFx0XHRcdHRoaXMuYXNzZXJ0VmFsaWRSZXNwb25zZVN0YXR1c0NvZGUoeGhyLnN0YXR1cyk7XG5cdFx0XHRcdGlmIChodHRwTWV0aG9kID09PSBSZXF1ZXN0U2NyZWVuLkdFVCAmJiB0aGlzLmlzQ2FjaGVhYmxlKCkpIHtcblx0XHRcdFx0XHR0aGlzLmFkZENhY2hlKHhoci5yZXNwb25zZVRleHQpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHhoci5yZXF1ZXN0UGF0aCA9IHJlcXVlc3RQYXRoO1xuXHRcdFx0XHRyZXR1cm4geGhyLnJlc3BvbnNlVGV4dDtcblx0XHRcdH0pXG5cdFx0XHQuY2F0Y2goKHJlYXNvbikgPT4ge1xuXHRcdFx0XHRzd2l0Y2ggKHJlYXNvbi5tZXNzYWdlKSB7XG5cdFx0XHRcdFx0Y2FzZSBlcnJvcnMuUkVRVUVTVF9USU1FT1VUOlxuXHRcdFx0XHRcdFx0cmVhc29uLnRpbWVvdXQgPSB0cnVlO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSBlcnJvcnMuUkVRVUVTVF9FUlJPUjpcblx0XHRcdFx0XHRcdHJlYXNvbi5yZXF1ZXN0RXJyb3IgPSB0cnVlO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdFx0dGhyb3cgcmVhc29uO1xuXHRcdFx0fSk7XG5cdH1cblxuXHQvKipcblx0ICogQWRkcyBhZGl0aW9uYWwgZGF0YSB0byB0aGUgYm9keSBvZiB0aGUgcmVxdWVzdCBpbiBjYXNlIGEgc3VibWl0IGJ1dHRvblxuXHQgKiBpcyBjYXB0dXJlZCBkdXJpbmcgZm9ybSBzdWJtaXNzaW9uLlxuXHQgKiBAcGFyYW0geyFGb3JtRGF0YX0gYm9keSBUaGUgRm9ybURhdGEgY29udGFpbmluZyB0aGUgcmVxdWVzdCBib2R5LlxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqL1xuXHRtYXliZUFwcGVuZFN1Ym1pdEJ1dHRvblZhbHVlXyhib2R5KSB7XG5cdFx0Y29uc3QgYnV0dG9uID0gZ2xvYmFscy5jYXB0dXJlZEZvcm1CdXR0b25FbGVtZW50O1xuXHRcdGlmIChidXR0b24gJiYgYnV0dG9uLm5hbWUpIHtcblx0XHRcdGJvZHkuYXBwZW5kKGJ1dHRvbi5uYW1lLCBidXR0b24udmFsdWUpO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBUaGUgZm9sbG93aW5nIG1ldGhvZCB0cmllcyB0byBleHRyYWN0IHRoZSByZXNwb25zZSB1cmwgdmFsdWUgYnkgY2hlY2tpbmdcblx0ICogdGhlIGN1c3RvbSByZXNwb25zZSBoZWFkZXIgJ1gtUmVxdWVzdC1VUkwnIGlmIHByb3BlciB2YWx1ZSBpcyBub3QgcHJlc2VudFxuXHQgKiBpbiBYTUxIdHRwUmVxdWVzdC4gVGhlIHZhbHVlIG9mIHJlc3BvbnNlVVJMIHdpbGwgYmUgdGhlIGZpbmFsIFVSTFxuXHQgKiBvYnRhaW5lZCBhZnRlciBhbnkgcmVkaXJlY3RzLiBJbnRlcm5ldCBFeHBsb3JlciwgRWRnZSBhbmQgU2FmYXJpIDw9IDdcblx0ICogZG9lcyBub3QgeWV0IHN1cHBvcnQgdGhlIGZlYXR1cmUuIEZvciBtb3JlIGluZm9ybWF0aW9uIHNlZTpcblx0ICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1hNTEh0dHBSZXF1ZXN0L3Jlc3BvbnNlVVJMXG5cdCAqIGh0dHBzOi8veGhyLnNwZWMud2hhdHdnLm9yZy8jdGhlLXJlc3BvbnNldXJsLWF0dHJpYnV0ZVxuXHQgKiBAcGFyYW0ge1hNTEh0dHBSZXF1ZXN0fSByZXF1ZXN0XG5cdCAqIEByZXR1cm4gez9zdHJpbmd9IFJlc3BvbnNlIHVybCBiZXN0IG1hdGNoLlxuXHQgKi9cblx0bWF5YmVFeHRyYWN0UmVzcG9uc2VVcmxGcm9tUmVxdWVzdChyZXF1ZXN0KSB7XG5cdFx0dmFyIHJlc3BvbnNlVXJsID0gcmVxdWVzdC5yZXNwb25zZVVSTDtcblx0XHRpZiAocmVzcG9uc2VVcmwpIHtcblx0XHRcdHJldHVybiByZXNwb25zZVVybDtcblx0XHR9XG5cdFx0cmV0dXJuIHJlcXVlc3QuZ2V0UmVzcG9uc2VIZWFkZXIoUmVxdWVzdFNjcmVlbi5YX1JFUVVFU1RfVVJMX0hFQURFUik7XG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgaHR0cCBoZWFkZXJzLlxuXHQgKiBAcGFyYW0gez9PYmplY3Q9fSBodHRwSGVhZGVyc1xuXHQgKi9cblx0c2V0SHR0cEhlYWRlcnMoaHR0cEhlYWRlcnMpIHtcblx0XHR0aGlzLmh0dHBIZWFkZXJzID0gaHR0cEhlYWRlcnM7XG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgaHR0cCBtZXRob2QuXG5cdCAqIEBwYXJhbSB7IXN0cmluZ30gaHR0cE1ldGhvZFxuXHQgKi9cblx0c2V0SHR0cE1ldGhvZChodHRwTWV0aG9kKSB7XG5cdFx0dGhpcy5odHRwTWV0aG9kID0gaHR0cE1ldGhvZC50b0xvd2VyQ2FzZSgpO1xuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIHJlcXVlc3Qgb2JqZWN0LlxuXHQgKiBAcGFyYW0gez9PYmplY3R9IHJlcXVlc3Rcblx0ICovXG5cdHNldFJlcXVlc3QocmVxdWVzdCkge1xuXHRcdHRoaXMucmVxdWVzdCA9IHJlcXVlc3Q7XG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgcmVxdWVzdCB0aW1lb3V0IGluIG1pbGxpc2Vjb25kcy5cblx0ICogQHBhcmFtIHshbnVtYmVyfSB0aW1lb3V0XG5cdCAqL1xuXHRzZXRUaW1lb3V0KHRpbWVvdXQpIHtcblx0XHR0aGlzLnRpbWVvdXQgPSB0aW1lb3V0O1xuXHR9XG5cbn1cblxuLyoqXG4gKiBIb2xkcyB2YWx1ZSBmb3IgbWV0aG9kIGdldC5cbiAqIEB0eXBlIHtzdHJpbmd9XG4gKiBAZGVmYXVsdCAnZ2V0J1xuICogQHN0YXRpY1xuICovXG5SZXF1ZXN0U2NyZWVuLkdFVCA9ICdnZXQnO1xuXG4vKipcbiAqIEhvbGRzIHZhbHVlIGZvciBtZXRob2QgcG9zdC5cbiAqIEB0eXBlIHtzdHJpbmd9XG4gKiBAZGVmYXVsdCAncG9zdCdcbiAqIEBzdGF0aWNcbiAqL1xuUmVxdWVzdFNjcmVlbi5QT1NUID0gJ3Bvc3QnO1xuXG4vKipcbiAqIEZhbGxiYWNrIGh0dHAgaGVhZGVyIHRvIHJldHJpZXZlIHJlc3BvbnNlIHJlcXVlc3QgdXJsLlxuICogQHR5cGUge3N0cmluZ31cbiAqIEBkZWZhdWx0ICdYLVJlcXVlc3QtVVJMJ1xuICogQHN0YXRpY1xuICovXG5SZXF1ZXN0U2NyZWVuLlhfUkVRVUVTVF9VUkxfSEVBREVSID0gJ1gtUmVxdWVzdC1VUkwnO1xuXG5leHBvcnQgZGVmYXVsdCBSZXF1ZXN0U2NyZWVuO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgeyBnZXRVaWQgfSBmcm9tICdtZXRhbCc7XG5pbXBvcnQgeyBidWlsZEZyYWdtZW50LCBleGl0RG9jdW1lbnQsIGdsb2JhbEV2YWwsIGdsb2JhbEV2YWxTdHlsZXMsIG1hdGNoIH0gZnJvbSAnbWV0YWwtZG9tJztcbmltcG9ydCBDYW5jZWxsYWJsZVByb21pc2UgZnJvbSAnbWV0YWwtcHJvbWlzZSc7XG5pbXBvcnQgZ2xvYmFscyBmcm9tICcuLi9nbG9iYWxzL2dsb2JhbHMnO1xuaW1wb3J0IFJlcXVlc3RTY3JlZW4gZnJvbSAnLi9SZXF1ZXN0U2NyZWVuJztcbmltcG9ydCBTdXJmYWNlIGZyb20gJy4uL3N1cmZhY2UvU3VyZmFjZSc7XG5pbXBvcnQgVUEgZnJvbSAnbWV0YWwtdXNlcmFnZW50JztcbmltcG9ydCBVcmkgZnJvbSAnbWV0YWwtdXJpJztcbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy91dGlscyc7XG5cbmNsYXNzIEh0bWxTY3JlZW4gZXh0ZW5kcyBSZXF1ZXN0U2NyZWVuIHtcblxuXHQvKipcblx0ICogU2NyZWVuIGNsYXNzIHRoYXQgcGVyZm9ybSBhIHJlcXVlc3QgYW5kIGV4dHJhY3RzIHN1cmZhY2UgY29udGVudHMgZnJvbVxuXHQgKiB0aGUgcmVzcG9uc2UgY29udGVudC5cblx0ICogQGNvbnN0cnVjdG9yXG5cdCAqIEBleHRlbmRzIHtSZXF1ZXN0U2NyZWVufVxuXHQgKi9cblx0Y29uc3RydWN0b3IoKSB7XG5cdFx0c3VwZXIoKTtcblxuXHRcdC8qKlxuXHRcdCAqIEhvbGRzIHRoZSB0aXRsZSBzZWxlY3Rvci4gUmVsZXZhbnQgdG8gZXh0cmFjdCB0aGUgPGNvZGU+PHRpdGxlPjwvY29kZT5cblx0XHQgKiBlbGVtZW50IGZyb20gcmVxdWVzdCBmcmFnbWVudHMgdG8gdXNlIGFzIHRoZSBzY3JlZW4gdGl0bGUuXG5cdFx0ICogQHR5cGUgeyFzdHJpbmd9XG5cdFx0ICogQGRlZmF1bHQgdGl0bGVcblx0XHQgKiBAcHJvdGVjdGVkXG5cdFx0ICovXG5cdFx0dGhpcy50aXRsZVNlbGVjdG9yID0gJ3RpdGxlJztcblx0fVxuXG5cdC8qKlxuXHQgKiBAaW5oZXJpdERvY1xuXHQgKi9cblx0YWN0aXZhdGUoKSB7XG5cdFx0c3VwZXIuYWN0aXZhdGUoKTtcblx0XHR0aGlzLnJlbGVhc2VWaXJ0dWFsRG9jdW1lbnQoKTtcblx0XHR0aGlzLnBlbmRpbmdTdHlsZXMgPSBudWxsO1xuXHR9XG5cblx0LyoqXG5cdCAqIEFsbG9jYXRlcyB2aXJ0dWFsIGRvY3VtZW50IGZvciBjb250ZW50LiBBZnRlciBhbGxvY2F0ZWQgdmlydHVhbCBkb2N1bWVudFxuXHQgKiBjYW4gYmUgYWNjZXNzZWQgYnkgPGNvZGU+dGhpcy52aXJ0dWFsRG9jdW1lbnQ8L2NvZGU+LlxuXHQgKiBAcGFyYW0geyFzdHJpbmd9IGh0bWxTdHJpbmdcblx0ICovXG5cdGFsbG9jYXRlVmlydHVhbERvY3VtZW50Rm9yQ29udGVudChodG1sU3RyaW5nKSB7XG5cdFx0aWYgKCF0aGlzLnZpcnR1YWxEb2N1bWVudCkge1xuXHRcdFx0dGhpcy52aXJ0dWFsRG9jdW1lbnQgPSBnbG9iYWxzLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2h0bWwnKTtcblx0XHR9XG5cblx0XHR0aGlzLmNvcHlOb2RlQXR0cmlidXRlc0Zyb21Db250ZW50XyhodG1sU3RyaW5nLCB0aGlzLnZpcnR1YWxEb2N1bWVudCk7XG5cblx0XHR0aGlzLnZpcnR1YWxEb2N1bWVudC5pbm5lckhUTUwgPSBodG1sU3RyaW5nO1xuXHR9XG5cblx0LyoqXG5cdCAqIEN1c3RvbWl6ZXMgbG9naWMgdG8gYXBwZW5kIHN0eWxlcyBpbnRvIGRvY3VtZW50LiBSZWxldmFudCB0byB3aGVuXG5cdCAqIHRyYWNraW5nIGEgc3R5bGUgYnkgaWQgbWFrZSBzdXJlIHRvIHJlLXBvc2l0aW9ucyB0aGUgbmV3IHN0eWxlIGluIHRoZVxuXHQgKiBzYW1lIGRvbSBvcmRlci5cblx0ICogQHBhcmFtIHtFbGVtZW50fSBuZXdTdHlsZVxuXHQgKi9cblx0YXBwZW5kU3R5bGVJbnRvRG9jdW1lbnRfKG5ld1N0eWxlKSB7XG5cdFx0dmFyIGlzVGVtcG9yYXJ5U3R5bGUgPSBtYXRjaChuZXdTdHlsZSwgSHRtbFNjcmVlbi5zZWxlY3RvcnMuc3R5bGVzVGVtcG9yYXJ5KTtcblx0XHRpZiAoaXNUZW1wb3JhcnlTdHlsZSkge1xuXHRcdFx0dGhpcy5wZW5kaW5nU3R5bGVzLnB1c2gobmV3U3R5bGUpO1xuXHRcdH1cblx0XHRpZiAobmV3U3R5bGUuaWQpIHtcblx0XHRcdHZhciBzdHlsZUluRG9jID0gZ2xvYmFscy5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChuZXdTdHlsZS5pZCk7XG5cdFx0XHRpZiAoc3R5bGVJbkRvYykge1xuXHRcdFx0XHRzdHlsZUluRG9jLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG5ld1N0eWxlLCBzdHlsZUluRG9jLm5leHRTaWJsaW5nKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRnbG9iYWxzLmRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQobmV3U3R5bGUpO1xuXHR9XG5cblx0LyoqXG5cdCAqIElmIGJvZHkgaXMgdXNlZCBhcyBzdXJmYWNlIGZvcmNlcyB0aGUgcmVxdWVzdGVkIGRvY3VtZW50cyB0byBoYXZlIHNhbWUgaWRcblx0ICogb2YgdGhlIGluaXRpYWwgcGFnZS5cblx0ICovXG5cdGFzc2VydFNhbWVCb2R5SWRJblZpcnR1YWxEb2N1bWVudCgpIHtcblx0XHR2YXIgYm9keVN1cmZhY2UgPSB0aGlzLnZpcnR1YWxEb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdib2R5Jyk7XG5cdFx0aWYgKCFnbG9iYWxzLmRvY3VtZW50LmJvZHkuaWQpIHtcblx0XHRcdGdsb2JhbHMuZG9jdW1lbnQuYm9keS5pZCA9ICdzZW5uYV9zdXJmYWNlXycgKyBnZXRVaWQoKTtcblx0XHR9XG5cdFx0aWYgKGJvZHlTdXJmYWNlKSB7XG5cdFx0XHRib2R5U3VyZmFjZS5pZCA9IGdsb2JhbHMuZG9jdW1lbnQuYm9keS5pZDtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogQ29waWVzIGF0dHJpYnV0ZXMgZnJvbSB0aGUgPGh0bWw+IHRhZyBvZiBjb250ZW50IHRvIHRoZSBnaXZlbiBub2RlLlxuXHQgKi9cblx0Y29weU5vZGVBdHRyaWJ1dGVzRnJvbUNvbnRlbnRfKGNvbnRlbnQsIG5vZGUpIHtcblx0XHRjb250ZW50ID0gY29udGVudC5yZXBsYWNlKC9bPF1cXHMqaHRtbC9pZywgJzxzZW5uYScpO1xuXHRcdGNvbnRlbnQgPSBjb250ZW50LnJlcGxhY2UoL1xcL2h0bWxcXHMqXFw+L2lnLCAnL3Nlbm5hPicpO1xuXHRcdG5vZGUuaW5uZXJIVE1MID0gY29udGVudDtcblx0XHR2YXIgcGxhY2Vob2xkZXIgPSBub2RlLnF1ZXJ5U2VsZWN0b3IoJ3Nlbm5hJyk7XG5cdFx0aWYgKHBsYWNlaG9sZGVyKSB7XG5cdFx0XHR1dGlscy5jbGVhck5vZGVBdHRyaWJ1dGVzKG5vZGUpO1xuXHRcdFx0dXRpbHMuY29weU5vZGVBdHRyaWJ1dGVzKHBsYWNlaG9sZGVyLCBub2RlKTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogQE92ZXJyaWRlXG5cdCAqL1xuXHRkaXNwb3NlSW50ZXJuYWwoKSB7XG5cdFx0dGhpcy5kaXNwb3NlUGVuZGluZ1N0eWxlcygpO1xuXHRcdHN1cGVyLmRpc3Bvc2VJbnRlcm5hbCgpO1xuXHR9XG5cblx0LyoqXG5cdCAqIERpc3Bvc2VzIHBlbmRpbmcgc3R5bGVzIGlmIHNjcmVlbiBnZXQgZGlzcG9zZWQgcHJpb3IgdG8gaXRzIGxvYWRpbmcuXG5cdCAqL1xuXHRkaXNwb3NlUGVuZGluZ1N0eWxlcygpIHtcblx0XHRpZiAodGhpcy5wZW5kaW5nU3R5bGVzKSB7XG5cdFx0XHR0aGlzLnBlbmRpbmdTdHlsZXMuZm9yRWFjaCgoc3R5bGUpID0+IGV4aXREb2N1bWVudChzdHlsZSkpO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBAT3ZlcnJpZGVcblx0ICovXG5cdGV2YWx1YXRlU2NyaXB0cyhzdXJmYWNlcykge1xuXHRcdHZhciBldmFsdWF0ZVRyYWNrZWRTY3JpcHRzID0gdGhpcy5ldmFsdWF0ZVRyYWNrZWRSZXNvdXJjZXNfKFxuXHRcdFx0Z2xvYmFsRXZhbC5ydW5TY3JpcHRzSW5FbGVtZW50LCBIdG1sU2NyZWVuLnNlbGVjdG9ycy5zY3JpcHRzLFxuXHRcdFx0SHRtbFNjcmVlbi5zZWxlY3RvcnMuc2NyaXB0c1RlbXBvcmFyeSwgSHRtbFNjcmVlbi5zZWxlY3RvcnMuc2NyaXB0c1Blcm1hbmVudCk7XG5cblx0XHRyZXR1cm4gZXZhbHVhdGVUcmFja2VkU2NyaXB0cy50aGVuKCgpID0+IHN1cGVyLmV2YWx1YXRlU2NyaXB0cyhzdXJmYWNlcykpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBPdmVycmlkZVxuXHQgKi9cblx0ZXZhbHVhdGVTdHlsZXMoc3VyZmFjZXMpIHtcblx0XHR0aGlzLnBlbmRpbmdTdHlsZXMgPSBbXTtcblx0XHR2YXIgZXZhbHVhdGVUcmFja2VkU3R5bGVzID0gdGhpcy5ldmFsdWF0ZVRyYWNrZWRSZXNvdXJjZXNfKFxuXHRcdFx0Z2xvYmFsRXZhbFN0eWxlcy5ydW5TdHlsZXNJbkVsZW1lbnQsIEh0bWxTY3JlZW4uc2VsZWN0b3JzLnN0eWxlcyxcblx0XHRcdEh0bWxTY3JlZW4uc2VsZWN0b3JzLnN0eWxlc1RlbXBvcmFyeSwgSHRtbFNjcmVlbi5zZWxlY3RvcnMuc3R5bGVzUGVybWFuZW50LFxuXHRcdFx0dGhpcy5hcHBlbmRTdHlsZUludG9Eb2N1bWVudF8uYmluZCh0aGlzKSk7XG5cblx0XHRyZXR1cm4gZXZhbHVhdGVUcmFja2VkU3R5bGVzLnRoZW4oKCkgPT4gc3VwZXIuZXZhbHVhdGVTdHlsZXMoc3VyZmFjZXMpKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBFdmFsdWF0ZXMgdHJhY2tlZCByZXNvdXJjZXMgaW5zaWRlIGluY29taW5nIGZyYWdtZW50IGFuZCByZW1vdmUgZXhpc3Rpbmdcblx0ICogdGVtcG9yYXJ5IHJlc291cmNlcy5cblx0ICogQHBhcmFtIHs/ZnVuY3Rpb24oKX0gYXBwZW5kRm4gRnVuY3Rpb24gdG8gYXBwZW5kIHRoZSBub2RlIGludG8gZG9jdW1lbnQuXG5cdCAqIEBwYXJhbSB7IXN0cmluZ30gc2VsZWN0b3IgU2VsZWN0b3IgdXNlZCB0byBmaW5kIHJlc291cmNlcyB0byB0cmFjay5cblx0ICogQHBhcmFtIHshc3RyaW5nfSBzZWxlY3RvclRlbXBvcmFyeSBTZWxlY3RvciB1c2VkIHRvIGZpbmQgdGVtcG9yYXJ5XG5cdCAqICAgICByZXNvdXJjZXMgdG8gdHJhY2suXG5cdCAqIEBwYXJhbSB7IXN0cmluZ30gc2VsZWN0b3JQZXJtYW5lbnQgU2VsZWN0b3IgdXNlZCB0byBmaW5kIHBlcm1hbmVudFxuXHQgKiAgICAgcmVzb3VyY2VzIHRvIHRyYWNrLlxuXHQgKiBAcGFyYW0geyFmdW5jdGlvbn0gb3B0X2FwcGVuZFJlc291cmNlRm4gT3B0aW9uYWwgZnVuY3Rpb24gdXNlZCB0b1xuXHQgKiAgICAgZXZhbHVhdGUgZnJhZ21lbnQgY29udGFpbmluZyByZXNvdXJjZXMuXG5cdCAqIEByZXR1cm4ge0NhbmNlbGxhYmxlUHJvbWlzZX0gRGVmZXJyZWQgdGhhdCB3YWl0cyByZXNvdXJjZXMgZXZhbHVhdGlvbiB0b1xuXHQgKiAgICAgY29tcGxldGUuXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRldmFsdWF0ZVRyYWNrZWRSZXNvdXJjZXNfKGV2YWx1YXRvckZuLCBzZWxlY3Rvciwgc2VsZWN0b3JUZW1wb3JhcnksIHNlbGVjdG9yUGVybWFuZW50LCBvcHRfYXBwZW5kUmVzb3VyY2VGbikge1xuXHRcdHZhciB0cmFja2VkID0gdGhpcy52aXJ0dWFsUXVlcnlTZWxlY3RvckFsbF8oc2VsZWN0b3IpO1xuXHRcdHZhciB0ZW1wb3Jhcmllc0luRG9jID0gdGhpcy5xdWVyeVNlbGVjdG9yQWxsXyhzZWxlY3RvclRlbXBvcmFyeSk7XG5cdFx0dmFyIHBlcm1hbmVudHNJbkRvYyA9IHRoaXMucXVlcnlTZWxlY3RvckFsbF8oc2VsZWN0b3JQZXJtYW5lbnQpO1xuXG5cdFx0Ly8gQWRkcyBwZXJtYW5lbnQgcmVzb3VyY2VzIGluIGRvY3VtZW50IHRvIGNhY2hlLlxuXHRcdHBlcm1hbmVudHNJbkRvYy5mb3JFYWNoKChyZXNvdXJjZSkgPT4ge1xuXHRcdFx0dmFyIHJlc291cmNlS2V5ID0gdGhpcy5nZXRSZXNvdXJjZUtleV8ocmVzb3VyY2UpO1xuXHRcdFx0aWYgKHJlc291cmNlS2V5KSB7XG5cdFx0XHRcdEh0bWxTY3JlZW4ucGVybWFuZW50UmVzb3VyY2VzSW5Eb2NbcmVzb3VyY2VLZXldID0gdHJ1ZTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdHZhciBmcmFnID0gYnVpbGRGcmFnbWVudCgpO1xuXHRcdHRyYWNrZWQuZm9yRWFjaCgocmVzb3VyY2UpID0+IHtcblx0XHRcdHZhciByZXNvdXJjZUtleSA9IHRoaXMuZ2V0UmVzb3VyY2VLZXlfKHJlc291cmNlKTtcblx0XHRcdC8vIERvIG5vdCBsb2FkIHBlcm1hbmVudCByZXNvdXJjZXMgaWYgYWxyZWFkeSBpbiBkb2N1bWVudC5cblx0XHRcdGlmICghSHRtbFNjcmVlbi5wZXJtYW5lbnRSZXNvdXJjZXNJbkRvY1tyZXNvdXJjZUtleV0pIHtcblx0XHRcdFx0ZnJhZy5hcHBlbmRDaGlsZChyZXNvdXJjZSk7XG5cdFx0XHR9XG5cdFx0XHQvLyBJZiByZXNvdXJjZSBoYXMga2V5IGFuZCBpcyBwZXJtYW5lbnQgYWRkIHRvIGNhY2hlLlxuXHRcdFx0aWYgKHJlc291cmNlS2V5ICYmIG1hdGNoKHJlc291cmNlLCBzZWxlY3RvclBlcm1hbmVudCkpIHtcblx0XHRcdFx0SHRtbFNjcmVlbi5wZXJtYW5lbnRSZXNvdXJjZXNJbkRvY1tyZXNvdXJjZUtleV0gPSB0cnVlO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIG5ldyBDYW5jZWxsYWJsZVByb21pc2UoKHJlc29sdmUpID0+IHtcblx0XHRcdGV2YWx1YXRvckZuKGZyYWcsICgpID0+IHtcblx0XHRcdFx0dGVtcG9yYXJpZXNJbkRvYy5mb3JFYWNoKChyZXNvdXJjZSkgPT4gZXhpdERvY3VtZW50KHJlc291cmNlKSk7XG5cdFx0XHRcdHJlc29sdmUoKTtcblx0XHRcdH0sIG9wdF9hcHBlbmRSZXNvdXJjZUZuKTtcblx0XHR9KTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAT3ZlcnJpZGVcblx0ICovXG5cdGZsaXAoc3VyZmFjZXMpIHtcblx0XHRyZXR1cm4gc3VwZXIuZmxpcChzdXJmYWNlcykudGhlbigoKSA9PiB7XG5cdFx0XHR1dGlscy5jbGVhck5vZGVBdHRyaWJ1dGVzKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCk7XG5cdFx0XHR1dGlscy5jb3B5Tm9kZUF0dHJpYnV0ZXModGhpcy52aXJ0dWFsRG9jdW1lbnQsIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCk7XG5cdFx0fSk7XG5cdH1cblxuXHQvKipcblx0ICogRXh0cmFjdHMgYSBrZXkgdG8gaWRlbnRpZnkgdGhlIHJlc291cmNlIGJhc2VkIG9uIGl0cyBhdHRyaWJ1dGVzLlxuXHQgKiBAcGFyYW0ge0VsZW1lbnR9IHJlc291cmNlXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gRXh0cmFjdGVkIGtleSBiYXNlZCBvbiByZXNvdXJjZSBhdHRyaWJ1dGVzIGluIG9yZGVyIG9mXG5cdCAqICAgICBwcmVmZXJlbmNlOiBpZCwgaHJlZiwgc3JjLlxuXHQgKi9cblx0Z2V0UmVzb3VyY2VLZXlfKHJlc291cmNlKSB7XG5cdFx0cmV0dXJuIHJlc291cmNlLmlkIHx8IHJlc291cmNlLmhyZWYgfHwgcmVzb3VyY2Uuc3JjIHx8ICcnO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBpbmhlcml0RG9jXG5cdCAqL1xuXHRnZXRTdXJmYWNlQ29udGVudChzdXJmYWNlSWQpIHtcblx0XHR2YXIgc3VyZmFjZSA9IHRoaXMudmlydHVhbERvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyMnICsgc3VyZmFjZUlkKTtcblx0XHRpZiAoc3VyZmFjZSkge1xuXHRcdFx0dmFyIGRlZmF1bHRDaGlsZCA9IHN1cmZhY2UucXVlcnlTZWxlY3RvcignIycgKyBzdXJmYWNlSWQgKyAnLScgKyBTdXJmYWNlLkRFRkFVTFQpO1xuXHRcdFx0aWYgKGRlZmF1bHRDaGlsZCkge1xuXHRcdFx0XHRyZXR1cm4gZGVmYXVsdENoaWxkLmlubmVySFRNTDtcblx0XHRcdH1cblx0XHRcdHJldHVybiBzdXJmYWNlLmlubmVySFRNTDsgLy8gSWYgZGVmYXVsdCBjb250ZW50IG5vdCBmb3VuZCwgdXNlIHN1cmZhY2UgY29udGVudFxuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBHZXRzIHRoZSB0aXRsZSBzZWxlY3Rvci5cblx0ICogQHJldHVybiB7IXN0cmluZ31cblx0ICovXG5cdGdldFRpdGxlU2VsZWN0b3IoKSB7XG5cdFx0cmV0dXJuIHRoaXMudGl0bGVTZWxlY3Rvcjtcblx0fVxuXG5cdC8qKlxuXHQgKiBAaW5oZXJpdERvY1xuXHQgKi9cblx0bG9hZChwYXRoKSB7XG5cdFx0cmV0dXJuIHN1cGVyLmxvYWQocGF0aClcblx0XHRcdC50aGVuKGNvbnRlbnQgPT4ge1xuXHRcdFx0XHR0aGlzLmFsbG9jYXRlVmlydHVhbERvY3VtZW50Rm9yQ29udGVudChjb250ZW50KTtcblx0XHRcdFx0dGhpcy5yZXNvbHZlVGl0bGVGcm9tVmlydHVhbERvY3VtZW50KCk7XG5cdFx0XHRcdHRoaXMuYXNzZXJ0U2FtZUJvZHlJZEluVmlydHVhbERvY3VtZW50KCk7XG5cdFx0XHRcdGlmIChVQS5pc0llKSB7XG5cdFx0XHRcdFx0dGhpcy5tYWtlVGVtcG9yYXJ5U3R5bGVzSHJlZnNVbmlxdWVfKCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIGNvbnRlbnQ7XG5cdFx0XHR9KTtcblx0fVxuXG5cdC8qKlxuXHQgKiBRdWVyaWVzIHRlbXBvcmFyeSBzdHlsZXMgZnJvbSB2aXJ0dWFsIGRvY3VtZW50LCBhbmQgbWFrZXMgdGhlbSB1bmlxdWUuXG5cdCAqIFRoaXMgaXMgbmVjZXNzYXJ5IGZvciBjYWNoaW5nIGFuZCBsb2FkIGV2ZW50IGZpcmluZyBpc3N1ZXMgc3BlY2lmaWMgdG9cblx0ICogSUUxMS4gaHR0cHM6Ly9kZXZlbG9wZXIubWljcm9zb2Z0LmNvbS9lbi11cy9taWNyb3NvZnQtZWRnZS9wbGF0Zm9ybS9pc3N1ZXMvNzk0MDE3MS9cblx0ICovXG5cdG1ha2VUZW1wb3JhcnlTdHlsZXNIcmVmc1VuaXF1ZV8oKSB7XG5cdFx0dmFyIHRlbXBvcmFyaWVzSW5Eb2MgPSB0aGlzLnZpcnR1YWxRdWVyeVNlbGVjdG9yQWxsXyhIdG1sU2NyZWVuLnNlbGVjdG9ycy5zdHlsZXNUZW1wb3JhcnkpO1xuXHRcdHRlbXBvcmFyaWVzSW5Eb2MuZm9yRWFjaCgoc3R5bGUpID0+IHRoaXMucmVwbGFjZVN0eWxlQW5kTWFrZVVuaXF1ZV8oc3R5bGUpKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIGEgbmV3IGVsZW1lbnQgZnJvbSBnaXZlbiwgY29waWVzIGF0dHJpYnV0ZXMsIG11dGF0ZXMgaHJlZiB0byBiZVxuXHQgKiB1bmlxdWUgdG8gcHJldmVudCBjYWNoaW5nIGFuZCBtb3JlIHRoYW4gb25lIGxvYWQvZXJyb3IgZXZlbnQgZnJvbSBmaXJpbmcuXG5cdCAqL1xuXHRyZXBsYWNlU3R5bGVBbmRNYWtlVW5pcXVlXyhzdHlsZSkge1xuXHRcdGlmIChzdHlsZS5ocmVmKSB7XG5cdFx0XHR2YXIgbmV3U3R5bGUgPSBnbG9iYWxzLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoc3R5bGUudGFnTmFtZSk7XG5cdFx0XHRzdHlsZS5ocmVmID0gbmV3IFVyaShzdHlsZS5ocmVmKS5tYWtlVW5pcXVlKCkudG9TdHJpbmcoKTtcblx0XHRcdHV0aWxzLmNvcHlOb2RlQXR0cmlidXRlcyhzdHlsZSwgbmV3U3R5bGUpO1xuXHRcdFx0c3R5bGUucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQobmV3U3R5bGUsIHN0eWxlKTtcblx0XHRcdHN0eWxlLmRpc2FibGVkID0gdHJ1ZTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogUXVlcmllcyBlbGVtZW50cyBmcm9tIHZpcnR1YWwgZG9jdW1lbnQgYW5kIHJldHVybnMgYW4gYXJyYXkgb2YgZWxlbWVudHMuXG5cdCAqIEBwYXJhbSB7IXN0cmluZ30gc2VsZWN0b3Jcblx0ICogQHJldHVybiB7YXJyYXkuPEVsZW1lbnQ+fVxuXHQgKi9cblx0dmlydHVhbFF1ZXJ5U2VsZWN0b3JBbGxfKHNlbGVjdG9yKSB7XG5cdFx0cmV0dXJuIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRoaXMudmlydHVhbERvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBRdWVyaWVzIGVsZW1lbnRzIGZyb20gZG9jdW1lbnQgYW5kIHJldHVybnMgYW4gYXJyYXkgb2YgZWxlbWVudHMuXG5cdCAqIEBwYXJhbSB7IXN0cmluZ30gc2VsZWN0b3Jcblx0ICogQHJldHVybiB7YXJyYXkuPEVsZW1lbnQ+fVxuXHQgKi9cblx0cXVlcnlTZWxlY3RvckFsbF8oc2VsZWN0b3IpIHtcblx0XHRyZXR1cm4gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZ2xvYmFscy5kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKSk7XG5cdH1cblxuXHQvKipcblx0ICogUmVsZWFzZXMgdmlydHVhbCBkb2N1bWVudCBhbGxvY2F0ZWQgZm9yIGNvbnRlbnQuXG5cdCAqL1xuXHRyZWxlYXNlVmlydHVhbERvY3VtZW50KCkge1xuXHRcdHRoaXMudmlydHVhbERvY3VtZW50ID0gbnVsbDtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZXNvbHZlcyB0aXRsZSBmcm9tIGFsbG9jYXRlZCB2aXJ0dWFsIGRvY3VtZW50LlxuXHQgKi9cblx0cmVzb2x2ZVRpdGxlRnJvbVZpcnR1YWxEb2N1bWVudCgpIHtcblx0XHR2YXIgdGl0bGUgPSB0aGlzLnZpcnR1YWxEb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRoaXMudGl0bGVTZWxlY3Rvcik7XG5cdFx0aWYgKHRpdGxlKSB7XG5cdFx0XHR0aGlzLnNldFRpdGxlKHRpdGxlLnRleHRDb250ZW50LnRyaW0oKSk7XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIHRpdGxlIHNlbGVjdG9yLlxuXHQgKiBAcGFyYW0geyFzdHJpbmd9IHRpdGxlU2VsZWN0b3Jcblx0ICovXG5cdHNldFRpdGxlU2VsZWN0b3IodGl0bGVTZWxlY3Rvcikge1xuXHRcdHRoaXMudGl0bGVTZWxlY3RvciA9IHRpdGxlU2VsZWN0b3I7XG5cdH1cblxufVxuXG4vKipcbiAqIEhlbHBlciBzZWxlY3RvcnMgZm9yIHRyYWNraW5nIHJlc291cmNlcy5cbiAqIEB0eXBlIHtvYmplY3R9XG4gKiBAcHJvdGVjdGVkXG4gKiBAc3RhdGljXG4gKi9cbkh0bWxTY3JlZW4uc2VsZWN0b3JzID0ge1xuXHRzY3JpcHRzOiAnc2NyaXB0W2RhdGEtc2VubmEtdHJhY2tdJyxcblx0c2NyaXB0c1Blcm1hbmVudDogJ3NjcmlwdFtkYXRhLXNlbm5hLXRyYWNrPVwicGVybWFuZW50XCJdJyxcblx0c2NyaXB0c1RlbXBvcmFyeTogJ3NjcmlwdFtkYXRhLXNlbm5hLXRyYWNrPVwidGVtcG9yYXJ5XCJdJyxcblx0c3R5bGVzOiAnc3R5bGVbZGF0YS1zZW5uYS10cmFja10sbGlua1tkYXRhLXNlbm5hLXRyYWNrXScsXG5cdHN0eWxlc1Blcm1hbmVudDogJ3N0eWxlW2RhdGEtc2VubmEtdHJhY2s9XCJwZXJtYW5lbnRcIl0sbGlua1tkYXRhLXNlbm5hLXRyYWNrPVwicGVybWFuZW50XCJdJyxcblx0c3R5bGVzVGVtcG9yYXJ5OiAnc3R5bGVbZGF0YS1zZW5uYS10cmFjaz1cInRlbXBvcmFyeVwiXSxsaW5rW2RhdGEtc2VubmEtdHJhY2s9XCJ0ZW1wb3JhcnlcIl0nXG59O1xuXG4vKipcbiAqIENhY2hlcyBwZXJtYW5lbnQgcmVzb3VyY2Uga2V5cy5cbiAqIEB0eXBlIHtvYmplY3R9XG4gKiBAcHJvdGVjdGVkXG4gKiBAc3RhdGljXG4gKi9cbkh0bWxTY3JlZW4ucGVybWFuZW50UmVzb3VyY2VzSW5Eb2MgPSB7fTtcblxuZXhwb3J0IGRlZmF1bHQgSHRtbFNjcmVlbjtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHsgRGlzcG9zYWJsZSwgZ2V0VWlkLCBpc0RlZkFuZE5vdE51bGwsIGlzRWxlbWVudCwgb2JqZWN0IH0gZnJvbSAnbWV0YWwnO1xuaW1wb3J0IGRhdGFBdHRyaWJ1dGVzIGZyb20gJy4vZGF0YUF0dHJpYnV0ZXMnO1xuaW1wb3J0IGdsb2JhbHMgZnJvbSAnLi4vZ2xvYmFscy9nbG9iYWxzJztcbmltcG9ydCBBcHAgZnJvbSAnLi9BcHAnO1xuaW1wb3J0IEh0bWxTY3JlZW4gZnJvbSAnLi4vc2NyZWVuL0h0bWxTY3JlZW4nO1xuaW1wb3J0IFJvdXRlIGZyb20gJy4uL3JvdXRlL1JvdXRlJztcblxuY2xhc3MgQXBwRGF0YUF0dHJpYnV0ZUhhbmRsZXIgZXh0ZW5kcyBEaXNwb3NhYmxlIHtcblxuXHQvKipcblx0ICogSW5pdGlsaXplcyBBcHAsIHJlZ2lzdGVyIHN1cmZhY2VzIGFuZCByb3V0ZXMgZnJvbSBkYXRhIGF0dHJpYnV0ZXMuXG5cdCAqIEBjb25zdHJ1Y3RvclxuXHQgKi9cblx0Y29uc3RydWN0b3IoKSB7XG5cdFx0c3VwZXIoKTtcblxuXHRcdC8qKlxuXHRcdCAqIEhvbGRzIHRoZSBhcHAgcmVmZXJlbmNlIGluaXRpYWxpemVkIGJ5IGRhdGEgYXR0cmlidXRlcy5cblx0XHQgKiBAdHlwZSB7QXBwfVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLmFwcCA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBIb2xkcyB0aGUgYmFzZSBlbGVtZW50IHRvIHNlYXJjaCBpbml0aWFsaXphdGlvbiBkYXRhIGF0dHJpYnV0ZXMuIFRoaXNcblx0XHQgKiBlbGVtZW50IGlzIHRoZSBjb250YWluZXIgdXNlZCB0byBlbmFibGUgaW5pdGlhbGl6YXRpb24gYmFzZWQgb24gdGhlXG5cdFx0ICogcHJlc2VuY2Ugb2YgYGRhdGEtc2VubmFgIGF0dHJpYnV0ZS5cblx0XHQgKiBAdHlwZSB7RWxlbWVudH1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5iYXNlRWxlbWVudCA9IG51bGw7XG5cdH1cblxuXHQvKipcblx0ICogSW5pdHMgYXBwbGljYXRpb24gYmFzZWQgb24gaW5mb3JtYXRpb24gc2Nhbm5lZCBmcm9tIGRvY3VtZW50LlxuXHQgKi9cblx0aGFuZGxlKCkge1xuXHRcdGlmICghaXNFbGVtZW50KHRoaXMuYmFzZUVsZW1lbnQpKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ1Nlbm5hIGRhdGEgYXR0cmlidXRlIGhhbmRsZXIgYmFzZSBlbGVtZW50ICcgK1xuXHRcdFx0XHQnbm90IHNldCBvciBpbnZhbGlkLCB0cnkgc2V0dGluZyBhIHZhbGlkIGVsZW1lbnQgdGhhdCAnICtcblx0XHRcdFx0J2NvbnRhaW5zIGEgYGRhdGEtc2VubmFgIGF0dHJpYnV0ZS4nKTtcblx0XHR9XG5cblx0XHRpZiAoIXRoaXMuYmFzZUVsZW1lbnQuaGFzQXR0cmlidXRlKGRhdGFBdHRyaWJ1dGVzLnNlbm5hKSkge1xuXHRcdFx0Y29uc29sZS5sb2coJ1Nlbm5hIHdhcyBub3QgaW5pdGlhbGl6ZWQgZnJvbSBkYXRhIGF0dHJpYnV0ZXMuICcgK1xuXHRcdFx0XHQnSW4gb3JkZXIgdG8gZW5hYmxlIGl0cyB1c2FnZSBmcm9tIGRhdGEgYXR0cmlidXRlcyB0cnkgc2V0dGluZyAnICtcblx0XHRcdFx0J2luIHRoZSBiYXNlIGVsZW1lbnQsIGUuZy4gYDxib2R5IGRhdGEtc2VubmE+YC4nKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAodGhpcy5hcHApIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcignU2VubmEgYXBwIHdhcyBhbHJlYWR5IGluaXRpYWxpemVkLicpO1xuXHRcdH1cblxuXHRcdGNvbnNvbGUubG9nKCdTZW5uYSBpbml0aWFsaXplZCBmcm9tIGRhdGEgYXR0cmlidXRlLicpO1xuXG5cdFx0dGhpcy5hcHAgPSBuZXcgQXBwKCk7XG5cdFx0dGhpcy5tYXliZUFkZFJvdXRlc18oKTtcblx0XHR0aGlzLm1heWJlQWRkU3VyZmFjZXNfKCk7XG5cdFx0dGhpcy5tYXliZVNldEJhc2VQYXRoXygpO1xuXHRcdHRoaXMubWF5YmVTZXRMaW5rU2VsZWN0b3JfKCk7XG5cdFx0dGhpcy5tYXliZVNldExvYWRpbmdDc3NDbGFzc18oKTtcblx0XHR0aGlzLm1heWJlU2V0VXBkYXRlU2Nyb2xsUG9zaXRpb25fKCk7XG5cdFx0dGhpcy5tYXliZURpc3BhdGNoXygpO1xuXHR9XG5cblx0LyoqXG5cdCAqIERpc3Bvc2VzIG9mIHRoaXMgaW5zdGFuY2UncyBvYmplY3QgcmVmZXJlbmNlcy5cblx0ICogQG92ZXJyaWRlXG5cdCAqL1xuXHRkaXNwb3NlSW50ZXJuYWwoKSB7XG5cdFx0aWYgKHRoaXMuYXBwKSB7XG5cdFx0XHR0aGlzLmFwcC5kaXNwb3NlKCk7XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIEdldHMgdGhlIGFwcCByZWZlcmVuY2UuXG5cdCAqIEByZXR1cm4ge0FwcH1cblx0ICovXG5cdGdldEFwcCgpIHtcblx0XHRyZXR1cm4gdGhpcy5hcHA7XG5cdH1cblxuXHQvKipcblx0ICogR2V0cyB0aGUgYmFzZSBlbGVtZW50LlxuXHQgKiBAcmV0dXJuIHtFbGVtZW50fSBiYXNlRWxlbWVudFxuXHQgKi9cblx0Z2V0QmFzZUVsZW1lbnQoKSB7XG5cdFx0cmV0dXJuIHRoaXMuYmFzZUVsZW1lbnQ7XG5cdH1cblxuXHQvKipcblx0ICogTWF5YmUgYWRkcyBhcHAgcm91dGVzIGZyb20gbGluayBlbGVtZW50cyB0aGF0IGFyZSBgc2VubmEtcm91dGVgLlxuXHQgKi9cblx0bWF5YmVBZGRSb3V0ZXNfKCkge1xuXHRcdHZhciByb3V0ZXNTZWxlY3RvciA9ICdsaW5rW3JlbD1cInNlbm5hLXJvdXRlXCJdJztcblx0XHR0aGlzLnF1ZXJ5U2VsZWN0b3JBbGxBc0FycmF5Xyhyb3V0ZXNTZWxlY3RvcikuZm9yRWFjaCgobGluaykgPT4gdGhpcy5tYXliZVBhcnNlTGlua1JvdXRlXyhsaW5rKSk7XG5cdFx0aWYgKCF0aGlzLmFwcC5oYXNSb3V0ZXMoKSkge1xuXHRcdFx0dGhpcy5hcHAuYWRkUm91dGVzKG5ldyBSb3V0ZSgvLiovLCBIdG1sU2NyZWVuKSk7XG5cdFx0XHRjb25zb2xlLmxvZygnU2VubmEgY2FuXFwndCBmaW5kIHJvdXRlIGVsZW1lbnRzLCBhZGRpbmcgZGVmYXVsdC4nKTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogTWF5YmUgYWRkcyBhcHAgc3VyZmFjZXMgYnkgc2Nhbm5pbmcgYGRhdGEtc2VubmEtc3VyZmFjZWAgZGF0YSBhdHRyaWJ1dGUuXG5cdCAqL1xuXHRtYXliZUFkZFN1cmZhY2VzXygpIHtcblx0XHR2YXIgc3VyZmFjZXNTZWxlY3RvciA9ICdbJyArIGRhdGFBdHRyaWJ1dGVzLnN1cmZhY2UgKyAnXSc7XG5cdFx0dGhpcy5xdWVyeVNlbGVjdG9yQWxsQXNBcnJheV8oc3VyZmFjZXNTZWxlY3RvcikuZm9yRWFjaCgoc3VyZmFjZUVsZW1lbnQpID0+IHtcblx0XHRcdHRoaXMudXBkYXRlRWxlbWVudElkSWZTcGVjaWFsU3VyZmFjZV8oc3VyZmFjZUVsZW1lbnQpO1xuXHRcdFx0dGhpcy5hcHAuYWRkU3VyZmFjZXMoc3VyZmFjZUVsZW1lbnQuaWQpO1xuXHRcdH0pO1xuXHR9XG5cblx0LyoqXG5cdCAqIERpc3BhdGNoZXMgYXBwIG5hdmlnYXRpb24gdG8gdGhlIGN1cnJlbnQgcGF0aCB3aGVuIGluaXRpYWxpemVzLlxuXHQgKi9cblx0bWF5YmVEaXNwYXRjaF8oKSB7XG5cdFx0aWYgKHRoaXMuYmFzZUVsZW1lbnQuaGFzQXR0cmlidXRlKGRhdGFBdHRyaWJ1dGVzLmRpc3BhdGNoKSkge1xuXHRcdFx0dGhpcy5hcHAuZGlzcGF0Y2goKTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogQWRkcyBhcHAgcm91dGUgYnkgcGFyc2luZyB2YWxpZCBsaW5rIGVsZW1lbnRzLiBBIHZhbGlkIGxpbmsgZWxlbWVudCBpcyBvZlxuXHQgKiB0aGUga2luZCBgcmVsPVwic2VubmEtcm91dGVcImAuXG5cdCAqIEBwYXJhbSB7RWxlbWVudH0gbGlua1xuXHQgKi9cblx0bWF5YmVQYXJzZUxpbmtSb3V0ZV8obGluaykge1xuXHRcdHZhciByb3V0ZSA9IG5ldyBSb3V0ZSh0aGlzLm1heWJlUGFyc2VMaW5rUm91dGVQYXRoXyhsaW5rKSwgdGhpcy5tYXliZVBhcnNlTGlua1JvdXRlSGFuZGxlcl8obGluaykpO1xuXHRcdHRoaXMuYXBwLmFkZFJvdXRlcyhyb3V0ZSk7XG5cdFx0Y29uc29sZS5sb2coJ1Nlbm5hIHNjYW5uZWQgcm91dGUgJyArIHJvdXRlLmdldFBhdGgoKSk7XG5cdH1cblxuXHQvKipcblx0ICogTWF5YmUgcGFyc2UgbGluayByb3V0ZSBoYW5kbGVyLlxuXHQgKiBAcGFyYW0ge0VsZW1lbnR9IGxpbmtcblx0ICogQHJldHVybiB7P3N0cmluZ31cblx0ICovXG5cdG1heWJlUGFyc2VMaW5rUm91dGVIYW5kbGVyXyhsaW5rKSB7XG5cdFx0dmFyIGhhbmRsZXIgPSBsaW5rLmdldEF0dHJpYnV0ZSgndHlwZScpO1xuXHRcdGlmIChpc0RlZkFuZE5vdE51bGwoaGFuZGxlcikpIHtcblx0XHRcdGhhbmRsZXIgPSBvYmplY3QuZ2V0T2JqZWN0QnlOYW1lKGhhbmRsZXIpO1xuXHRcdH1cblx0XHRyZXR1cm4gaGFuZGxlcjtcblx0fVxuXG5cdC8qKlxuXHQgKiBNYXliZSBwYXJzZSBsaW5rIHJvdXRlIHBhdGguXG5cdCAqIEBwYXJhbSB7RWxlbWVudH0gbGlua1xuXHQgKiBAcmV0dXJuIHs/c3RyaW5nfVxuXHQgKi9cblx0bWF5YmVQYXJzZUxpbmtSb3V0ZVBhdGhfKGxpbmspIHtcblx0XHR2YXIgcGF0aCA9IGxpbmsuZ2V0QXR0cmlidXRlKCdocmVmJyk7XG5cdFx0aWYgKGlzRGVmQW5kTm90TnVsbChwYXRoKSkge1xuXHRcdFx0aWYgKHBhdGguaW5kZXhPZigncmVnZXg6JykgPT09IDApIHtcblx0XHRcdFx0cGF0aCA9IG5ldyBSZWdFeHAocGF0aC5zdWJzdHJpbmcoNikpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gcGF0aDtcblx0fVxuXG5cdC8qKlxuXHQgKiBNYXliZSBzZXRzIGFwcCBiYXNlIHBhdGggZnJvbSBgZGF0YS1zZW5uYS1iYXNlLXBhdGhgIGRhdGEgYXR0cmlidXRlLlxuXHQgKi9cblx0bWF5YmVTZXRCYXNlUGF0aF8oKSB7XG5cdFx0dmFyIGJhc2VQYXRoID0gdGhpcy5iYXNlRWxlbWVudC5nZXRBdHRyaWJ1dGUoZGF0YUF0dHJpYnV0ZXMuYmFzZVBhdGgpO1xuXHRcdGlmIChpc0RlZkFuZE5vdE51bGwoYmFzZVBhdGgpKSB7XG5cdFx0XHR0aGlzLmFwcC5zZXRCYXNlUGF0aChiYXNlUGF0aCk7XG5cdFx0XHRjb25zb2xlLmxvZygnU2VubmEgc2Nhbm5lZCBiYXNlIHBhdGggJyArIGJhc2VQYXRoKTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogTWF5YmUgc2V0cyBhcHAgbGluayBzZWxlY3RvciBmcm9tIGBkYXRhLXNlbm5hLWxpbmstc2VsZWN0b3JgIGRhdGFcblx0ICogYXR0cmlidXRlLlxuXHQgKi9cblx0bWF5YmVTZXRMaW5rU2VsZWN0b3JfKCkge1xuXHRcdHZhciBsaW5rU2VsZWN0b3IgPSB0aGlzLmJhc2VFbGVtZW50LmdldEF0dHJpYnV0ZShkYXRhQXR0cmlidXRlcy5saW5rU2VsZWN0b3IpO1xuXHRcdGlmIChpc0RlZkFuZE5vdE51bGwobGlua1NlbGVjdG9yKSkge1xuXHRcdFx0dGhpcy5hcHAuc2V0TGlua1NlbGVjdG9yKGxpbmtTZWxlY3Rvcik7XG5cdFx0XHRjb25zb2xlLmxvZygnU2VubmEgc2Nhbm5lZCBsaW5rIHNlbGVjdG9yICcgKyBsaW5rU2VsZWN0b3IpO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBNYXliZSBzZXRzIGFwcCBsaW5rIGxvYWRpbmcgY3NzIGNsYXNzIGZyb20gYGRhdGEtc2VubmEtbG9hZGluZy1jc3MtY2xhc3NgXG5cdCAqIGRhdGEgYXR0cmlidXRlLlxuXHQgKi9cblx0bWF5YmVTZXRMb2FkaW5nQ3NzQ2xhc3NfKCkge1xuXHRcdHZhciBsb2FkaW5nQ3NzQ2xhc3MgPSB0aGlzLmJhc2VFbGVtZW50LmdldEF0dHJpYnV0ZShkYXRhQXR0cmlidXRlcy5sb2FkaW5nQ3NzQ2xhc3MpO1xuXHRcdGlmIChpc0RlZkFuZE5vdE51bGwobG9hZGluZ0Nzc0NsYXNzKSkge1xuXHRcdFx0dGhpcy5hcHAuc2V0TG9hZGluZ0Nzc0NsYXNzKGxvYWRpbmdDc3NDbGFzcyk7XG5cdFx0XHRjb25zb2xlLmxvZygnU2VubmEgc2Nhbm5lZCBsb2FkaW5nIGNzcyBjbGFzcyAnICsgbG9hZGluZ0Nzc0NsYXNzKTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogTWF5YmUgc2V0cyBhcHAgdXBkYXRlIHNjcm9sbCBwb3NpdGlvbiBmcm9tXG5cdCAqIGBkYXRhLXNlbm5hLXVwZGF0ZS1zY3JvbGwtcG9zaXRpb25gIGRhdGEgYXR0cmlidXRlLlxuXHQgKi9cblx0bWF5YmVTZXRVcGRhdGVTY3JvbGxQb3NpdGlvbl8oKSB7XG5cdFx0dmFyIHVwZGF0ZVNjcm9sbFBvc2l0aW9uID0gdGhpcy5iYXNlRWxlbWVudC5nZXRBdHRyaWJ1dGUoZGF0YUF0dHJpYnV0ZXMudXBkYXRlU2Nyb2xsUG9zaXRpb24pO1xuXHRcdGlmIChpc0RlZkFuZE5vdE51bGwodXBkYXRlU2Nyb2xsUG9zaXRpb24pKSB7XG5cdFx0XHRpZiAodXBkYXRlU2Nyb2xsUG9zaXRpb24gPT09ICdmYWxzZScpIHtcblx0XHRcdFx0dGhpcy5hcHAuc2V0VXBkYXRlU2Nyb2xsUG9zaXRpb24oZmFsc2UpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhpcy5hcHAuc2V0VXBkYXRlU2Nyb2xsUG9zaXRpb24odHJ1ZSk7XG5cdFx0XHR9XG5cdFx0XHRjb25zb2xlLmxvZygnU2VubmEgc2Nhbm5lZCB1cGRhdGUgc2Nyb2xsIHBvc2l0aW9uICcgKyB1cGRhdGVTY3JvbGxQb3NpdGlvbik7XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIFF1ZXJpZXMgZWxlbWVudHMgZnJvbSBkb2N1bWVudCBhbmQgcmV0dXJucyBhbiBhcnJheSBvZiBlbGVtZW50cy5cblx0ICogQHBhcmFtIHshc3RyaW5nfSBzZWxlY3RvclxuXHQgKiBAcmV0dXJuIHthcnJheS48RWxlbWVudD59XG5cdCAqL1xuXHRxdWVyeVNlbGVjdG9yQWxsQXNBcnJheV8oc2VsZWN0b3IpIHtcblx0XHRyZXR1cm4gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZ2xvYmFscy5kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKSk7XG5cdH1cblxuXHQvKipcblx0ICogVXBkYXRlcyBlbGVtZW50IGlkIGlmIGhhbmRsZWQgYXMgc3BlY2lhbCBzdXJmYWNlIGVsZW1lbnQuIFNvbWUgc3VyZmFjZXNcblx0ICogYXJlIHNsaWdodGx5IGRpZmZlcmVudCBmcm9tIG90aGVycywgbGlrZSB3aGVuIHRocmVhdGluZyA8Y29kZT5ib2R5PC9jb2RlPlxuXHQgKiBhcyBzdXJmYWNlLlxuXHQgKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnRcblx0ICovXG5cdHVwZGF0ZUVsZW1lbnRJZElmU3BlY2lhbFN1cmZhY2VfKGVsZW1lbnQpIHtcblx0XHRpZiAoIWVsZW1lbnQuaWQgJiYgZWxlbWVudCA9PT0gZ2xvYmFscy5kb2N1bWVudC5ib2R5KSB7XG5cdFx0XHRlbGVtZW50LmlkID0gJ3Nlbm5hX3N1cmZhY2VfJyArIGdldFVpZCgpO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSBiYXNlIGVsZW1lbnQuXG5cdCAqIEBwYXJhbSB7RWxlbWVudH0gYmFzZUVsZW1lbnRcblx0ICovXG5cdHNldEJhc2VFbGVtZW50KGJhc2VFbGVtZW50KSB7XG5cdFx0dGhpcy5iYXNlRWxlbWVudCA9IGJhc2VFbGVtZW50O1xuXHR9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgQXBwRGF0YUF0dHJpYnV0ZUhhbmRsZXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBnbG9iYWxzIGZyb20gJy4uL2dsb2JhbHMvZ2xvYmFscyc7XG5pbXBvcnQgQXBwRGF0YUF0dHJpYnV0ZUhhbmRsZXIgZnJvbSAnLi9BcHBEYXRhQXR0cmlidXRlSGFuZGxlcic7XG5cbi8qKlxuICogRGF0YSBhdHRyaWJ1dGUgaGFuZGxlci5cbiAqIEB0eXBlIHtBcHBEYXRhQXR0cmlidXRlSGFuZGxlcn1cbiAqL1xudmFyIGRhdGFBdHRyaWJ1dGVIYW5kbGVyID0gbmV3IEFwcERhdGFBdHRyaWJ1dGVIYW5kbGVyKCk7XG5cbmdsb2JhbHMuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGZ1bmN0aW9uKCkge1xuXHRkYXRhQXR0cmlidXRlSGFuZGxlci5zZXRCYXNlRWxlbWVudChnbG9iYWxzLmRvY3VtZW50LmJvZHkpO1xuXHRkYXRhQXR0cmlidXRlSGFuZGxlci5oYW5kbGUoKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBkYXRhQXR0cmlidXRlSGFuZGxlcjsiXSwibmFtZXMiOlsiZ2xvYmFscyIsIndpbmRvdyIsImRvY3VtZW50IiwiY29tcGF0aWJpbGl0eU1vZGVEYXRhXyIsInVuaXF1ZUlkQ291bnRlcl8iLCJVSURfUFJPUEVSVFkiLCJNYXRoIiwicmFuZG9tIiwiYWJzdHJhY3RNZXRob2QiLCJFcnJvciIsImRpc2FibGVDb21wYXRpYmlsaXR5TW9kZSIsInVuZGVmaW5lZCIsImVuYWJsZUNvbXBhdGliaWxpdHlNb2RlIiwib3B0X2RhdGEiLCJnZXRDb21wYXRpYmlsaXR5TW9kZURhdGEiLCJfX01FVEFMX0NPTVBBVElCSUxJVFlfXyIsImdldEZpcnN0VHJ1dGh5XyIsImEiLCJiIiwiZ2V0RnVuY3Rpb25OYW1lIiwiZm4iLCJuYW1lIiwic3RyIiwidG9TdHJpbmciLCJzdWJzdHJpbmciLCJpbmRleE9mIiwiZ2V0U3RhdGljUHJvcGVydHkiLCJjdG9yIiwicHJvcGVydHlOYW1lIiwib3B0X21lcmdlRm4iLCJtZXJnZWROYW1lIiwiaGFzT3duUHJvcGVydHkiLCJtZXJnZWQiLCJfX3Byb3RvX18iLCJpc1Byb3RvdHlwZU9mIiwiRnVuY3Rpb24iLCJtZXJnZUZuIiwiZ2V0VWlkIiwib3B0X29iamVjdCIsIm9wdF9ub0luaGVyaXRhbmNlIiwiaWQiLCJpZGVudGl0eUZ1bmN0aW9uIiwib3B0X3JldHVyblZhbHVlIiwiaXNCb29sZWFuIiwidmFsIiwiaXNEZWYiLCJpc0RlZkFuZE5vdE51bGwiLCJpc051bGwiLCJpc0RvY3VtZW50Iiwibm9kZVR5cGUiLCJpc0RvY3VtZW50RnJhZ21lbnQiLCJpc0VsZW1lbnQiLCJpc0Z1bmN0aW9uIiwiaXNOdW1iZXIiLCJpc1dpbmRvdyIsImlzT2JqZWN0IiwidHlwZSIsImlzUHJvbWlzZSIsInRoZW4iLCJpc1N0cmluZyIsIlN0cmluZyIsIm51bGxGdW5jdGlvbiIsImFycmF5IiwiYXJyMSIsImFycjIiLCJsZW5ndGgiLCJpIiwiYXJyIiwib3B0X291dHB1dCIsIm91dHB1dCIsIkFycmF5IiwiaXNBcnJheSIsImZsYXR0ZW4iLCJwdXNoIiwib2JqIiwicnYiLCJyZW1vdmVBdCIsInByb3RvdHlwZSIsInNwbGljZSIsImNhbGwiLCJzdGFydCIsIm9wdF9lbmQiLCJzbGljZWQiLCJlbmQiLCJhc3luYyIsInRocm93RXhjZXB0aW9uIiwiZXhjZXB0aW9uIiwibmV4dFRpY2siLCJydW4iLCJjYWxsYmFjayIsIm9wdF9jb250ZXh0Iiwid29ya1F1ZXVlU2NoZWR1bGVkXyIsInByb2Nlc3NXb3JrUXVldWUiLCJ3b3JrUXVldWVfIiwiV29ya0l0ZW1fIiwid29ya0l0ZW1zIiwid29ya0l0ZW0iLCJzY29wZSIsImUiLCJjYiIsImJpbmQiLCJ3cmFwQ2FsbGJhY2tfIiwic2V0SW1tZWRpYXRlIiwic2V0SW1tZWRpYXRlXyIsImdldFNldEltbWVkaWF0ZUVtdWxhdG9yXyIsIkNoYW5uZWwiLCJNZXNzYWdlQ2hhbm5lbCIsInBvc3RNZXNzYWdlIiwiYWRkRXZlbnRMaXN0ZW5lciIsImlmcmFtZSIsImNyZWF0ZUVsZW1lbnQiLCJzdHlsZSIsImRpc3BsYXkiLCJzcmMiLCJkb2N1bWVudEVsZW1lbnQiLCJhcHBlbmRDaGlsZCIsIndpbiIsImNvbnRlbnRXaW5kb3ciLCJkb2MiLCJvcGVuIiwid3JpdGUiLCJjbG9zZSIsIm1lc3NhZ2UiLCJvcmlnaW4iLCJsb2NhdGlvbiIsInByb3RvY29sIiwiaG9zdCIsIm9ubWVzc2FnZSIsImRhdGEiLCJwb3J0MSIsInBvcnQyIiwiY2hhbm5lbCIsImhlYWQiLCJ0YWlsIiwibmV4dCIsInNjcmlwdCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsIkRpc3Bvc2FibGUiLCJkaXNwb3NlZF8iLCJkaXNwb3NlSW50ZXJuYWwiLCJvYmplY3QiLCJ0YXJnZXQiLCJrZXkiLCJzb3VyY2UiLCJhcmd1bWVudHMiLCJvcHRfb2JqIiwicGFydHMiLCJzcGxpdCIsInJlZHVjZSIsInBhcnQiLCJtYXBwZWRPYmoiLCJrZXlzIiwiT2JqZWN0Iiwib2JqMSIsIm9iajIiLCJrZXlzMSIsImtleXMyIiwic3RyaW5nIiwic3RyMSIsInN0cjIiLCJ0ZXN0MSIsInRvTG93ZXJDYXNlIiwidGVzdDIiLCJyZXBsYWNlIiwieCIsImZsb29yIiwiYWJzIiwiRGF0ZSIsIm5vdyIsImhhc2giLCJsZW4iLCJjaGFyQ29kZUF0IiwidmFsdWUiLCJwYXJzZUZyb21BbmNob3IiLCJvcHRfdXJpIiwibGluayIsImhyZWYiLCJob3N0bmFtZSIsInBhc3N3b3JkIiwicGF0aG5hbWUiLCJwb3J0Iiwic2VhcmNoIiwidXNlcm5hbWUiLCJwYXJzZSIsIlVSTCIsImNyZWF0ZSIsIk11bHRpTWFwIiwidmFsdWVzIiwic2l6ZSIsIm1hcCIsIm5hbWVzIiwiSlNPTiIsInN0cmluZ2lmeSIsInNldCIsIlRyZWVOb2RlIiwidmFsdWVfIiwicGFyZW50XyIsImNoaWxkcmVuXyIsImNoaWxkIiwic2V0UGFyZW50Iiwibm9kZSIsImN1cnJlbnQiLCJnZXRQYXJlbnQiLCJhbmNlc3RvcnMiLCJpbmRleCIsImdldENoaWxkcmVuIiwiRU1QVFlfQVJSQVkiLCJkZXB0aCIsInJvb3QiLCJnZXRDaGlsZENvdW50IiwicmVtb3ZlIiwicGFyZW50Iiwib3B0X3ByZW9yZGVyRm4iLCJvcHRfcG9zdG9yZGVyRm4iLCJmb3JFYWNoIiwidHJhdmVyc2UiLCJhc3NlcnRDaGlsZEhhc05vUGFyZW50IiwicGFyc2VGbl8iLCJVcmkiLCJ1cmwiLCJtYXliZUFkZFByb3RvY29sQW5kSG9zdG5hbWVfIiwibXVsdGltYXAiLCJnZXRBbGwiLCJhZGRQYXJhbWV0ZXJWYWx1ZSIsImVuc3VyZVF1ZXJ5SW5pdGlhbGl6ZWRfIiwicXVlcnkiLCJhZGQiLCJwYXJhbSIsInVybERlY29kZSIsImdldEhvc3RuYW1lIiwiZ2V0UG9ydCIsIkhPU1ROQU1FX1BMQUNFSE9MREVSIiwiZ2V0SG9zdCIsImdldFByb3RvY29sIiwiZ2V0IiwicXVlcnlzdHJpbmciLCJnZXRQYXJhbWV0ZXJOYW1lcyIsImdldFBhcmFtZXRlclZhbHVlcyIsImVuY29kZVVSSUNvbXBvbmVudCIsInNsaWNlIiwiY29udGFpbnMiLCJzZXRQYXJhbWV0ZXJWYWx1ZSIsIlJBTkRPTV9QQVJBTSIsImdldFJhbmRvbVN0cmluZyIsIkRFRkFVTFRfUFJPVE9DT0wiLCJjaGFyQXQiLCJyZW1vdmVQYXJhbWV0ZXIiLCJnZXRQYXRobmFtZSIsImdldFNlYXJjaCIsImdldEhhc2giLCJwYXJzZWQiLCJzdWJzdHIiLCJub3JtYWxpemVPYmplY3QiLCJwYXJzZUZuIiwiYmFzZVBhdGgiLCJwYXRocyIsInBhdGgiLCJjb25jYXQiLCJqb2luIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwidXRpbHMiLCJhdHRyaWJ1dGVzIiwiYXR0cmlidXRlIiwic2V0QXR0cmlidXRlIiwiZ2V0Q3VycmVudEJyb3dzZXJQYXRoV2l0aG91dEhhc2giLCJvZmZzZXRMZWZ0Iiwib2Zmc2V0VG9wIiwib2Zmc2V0UGFyZW50IiwidXJpIiwiY3VycmVudEJyb3dzZXJQYXRoIiwiZ2V0VXJsUGF0aFdpdGhvdXRIYXNoIiwiZ2V0VXJsUGF0aCIsImhpc3RvcnkiLCJwdXNoU3RhdGUiLCJlcnIiLCJlcnJvciIsInJlbW92ZUF0dHJpYnV0ZSIsIk1FVEFMX0RBVEEiLCJkb21EYXRhIiwiZWxlbWVudCIsIm9wdF9uYW1lIiwib3B0X2luaXRpYWxWYWwiLCJFdmVudEhhbmRsZSIsImVtaXR0ZXIiLCJldmVudCIsImxpc3RlbmVyIiwiZW1pdHRlcl8iLCJldmVudF8iLCJsaXN0ZW5lcl8iLCJyZW1vdmVMaXN0ZW5lciIsImlzRGlzcG9zZWQiLCJzaW5nbGVBcnJheV8iLCJFdmVudEVtaXR0ZXIiLCJldmVudHNfIiwibGlzdGVuZXJIYW5kbGVyc18iLCJzaG91bGRVc2VGYWNhZGVfIiwiaG9sZGVyIiwiaGFuZGxlciIsIm9wdF9kZWZhdWx0IiwidmFsaWRhdGVMaXN0ZW5lcl8iLCJldmVudHMiLCJ0b0V2ZW50c0FycmF5XyIsImFkZFNpbmdsZUxpc3RlbmVyXyIsIm9wdF9vcmlnaW4iLCJydW5MaXN0ZW5lckhhbmRsZXJzXyIsImFkZEhhbmRsZXJfIiwiZ2V0U2hvdWxkVXNlRmFjYWRlIiwiZmFjYWRlIiwicHJldmVudGVkRGVmYXVsdCIsImxpc3RlbmVycyIsImdldFJhd0xpc3RlbmVyc18iLCJhcmdzIiwicnVuTGlzdGVuZXJzXyIsImJ1aWxkRmFjYWRlXyIsImRpcmVjdExpc3RlbmVycyIsInRvQXJyYXkiLCJhbW91bnQiLCJtYW55XyIsInNlbGYiLCJoYW5kbGVySW50ZXJuYWwiLCJhcHBseSIsImxpc3RlbmVyT2JqIiwicmVtb3ZlTWF0Y2hpbmdMaXN0ZW5lck9ianNfIiwiYWRkTGlzdGVuZXIiLCJtYW55Iiwib3B0X2V2ZW50cyIsImxpc3RlbmVyT2JqcyIsImZpbmFsTGlzdGVuZXJzIiwibWF0Y2hlc0xpc3RlbmVyXyIsIm9mZiIsImhhbmRsZXJzIiwiZGVmYXVsdExpc3RlbmVycyIsImRlZmF1bHQiLCJqIiwic2hvdWxkVXNlRmFjYWRlIiwiVHlwZUVycm9yIiwiRXZlbnRFbWl0dGVyUHJveHkiLCJvcmlnaW5FbWl0dGVyIiwidGFyZ2V0RW1pdHRlciIsIm9wdF9ibGFja2xpc3QiLCJvcHRfd2hpdGVsaXN0IiwiYmxhY2tsaXN0XyIsIm9yaWdpbkVtaXR0ZXJfIiwicGVuZGluZ0V2ZW50c18iLCJwcm94aWVkRXZlbnRzXyIsInRhcmdldEVtaXR0ZXJfIiwid2hpdGVsaXN0XyIsInN0YXJ0UHJveHlfIiwib24iLCJyZW1vdmVMaXN0ZW5lcnNfIiwiZW1pdCIsInNob3VsZFByb3h5RXZlbnRfIiwidHJ5VG9BZGRMaXN0ZW5lcl8iLCJwcm94eUV2ZW50Iiwib25MaXN0ZW5lciIsImFkZExpc3RlbmVyXyIsImVtaXRPblRhcmdldF8iLCJFdmVudEhhbmRsZXIiLCJldmVudEhhbmRsZXNfIiwiRG9tRGVsZWdhdGVkRXZlbnRIYW5kbGUiLCJvcHRfc2VsZWN0b3IiLCJzZWxlY3Rvcl8iLCJkZWxlZ2F0aW5nIiwic2VsZWN0b3IiLCJzZWxlY3RvcnMiLCJEb21FdmVudEhhbmRsZSIsIm9wdF9jYXB0dXJlIiwiY2FwdHVyZV8iLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZWxlbWVudHNCeVRhZ18iLCJzdXBwb3J0Q2FjaGVfIiwiY3VzdG9tRXZlbnRzIiwiTEFTVF9DT05UQUlORVIiLCJVU0VfQ0FQVFVSRSIsImFkZENsYXNzZXMiLCJlbGVtZW50cyIsImNsYXNzZXMiLCJhZGRDbGFzc2VzV2l0aE5hdGl2ZV8iLCJjbGFzc05hbWUiLCJjbGFzc0xpc3QiLCJhZGRDbGFzc2VzV2l0aG91dE5hdGl2ZV8iLCJlbGVtZW50Q2xhc3NOYW1lIiwiY2xhc3Nlc1RvQXBwZW5kIiwiYWRkRWxlbWVudExpc3RlbmVyXyIsImV2ZW50TmFtZSIsImFkZFNlbGVjdG9yTGlzdGVuZXJfIiwiZGVsZWdhdGluZ0RhdGEiLCJhZGRUb0Fycl8iLCJhdHRhY2hEZWxlZ2F0ZUV2ZW50XyIsImhhbmRsZURlbGVnYXRlRXZlbnRfIiwiY2xvc2VzdCIsIm1hdGNoIiwiYXBwZW5kIiwiYnVpbGRGcmFnbWVudCIsIk5vZGVMaXN0IiwiY2hpbGRBcnIiLCJodG1sU3RyaW5nIiwidGVtcERpdiIsImlubmVySFRNTCIsImZpcnN0Q2hpbGQiLCJmcmFnbWVudCIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJlbGVtZW50MSIsImVsZW1lbnQyIiwiZGVsZWdhdGUiLCJzZWxlY3Rvck9yVGFyZ2V0IiwiY3VzdG9tQ29uZmlnIiwib3JpZ2luYWxFdmVudCIsImRlZmF1bHRMaXN0ZW5lcl8iLCJpc0FibGVUb0ludGVyYWN0V2l0aF8iLCJvcHRfZXZlbnRPYmoiLCJidXR0b24iLCJtYXRjaGVzU2VsZWN0b3IiLCJ0YWdOYW1lIiwiZGlzYWJsZWQiLCJleGl0RG9jdW1lbnQiLCJyZXQiLCJjb250YWluZXIiLCJjdXJyZW50VGFyZ2V0IiwiZGVmRm5zIiwidHJpZ2dlckRlbGVnYXRlZExpc3RlbmVyc18iLCJ0cmlnZ2VyRGVmYXVsdERlbGVnYXRlZExpc3RlbmVyc18iLCJkZWxlZ2F0ZVRhcmdldCIsInAiLCJFbGVtZW50IiwibSIsIm1hdGNoZXMiLCJ3ZWJraXRNYXRjaGVzU2VsZWN0b3IiLCJtb3pNYXRjaGVzU2VsZWN0b3IiLCJtc01hdGNoZXNTZWxlY3RvciIsIm9NYXRjaGVzU2VsZWN0b3IiLCJtYXRjaEZhbGxiYWNrXyIsIm5vZGVzIiwicXVlcnlTZWxlY3RvckFsbCIsIm5vcm1hbGl6ZURlbGVnYXRlRXZlbnRfIiwic3RvcFByb3BhZ2F0aW9uIiwic3RvcFByb3BhZ2F0aW9uXyIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbl8iLCJvbmNlIiwiZG9tRXZlbnRIYW5kbGUiLCJyZWdpc3RlckN1c3RvbUV2ZW50IiwicmVtb3ZlQ2hpbGRyZW4iLCJyZW1vdmVDbGFzc2VzIiwicmVtb3ZlQ2xhc3Nlc1dpdGhOYXRpdmVfIiwicmVtb3ZlQ2xhc3Nlc1dpdGhvdXROYXRpdmVfIiwidHJpbSIsInN0b3BwZWQiLCJzdG9wcGVkSW1tZWRpYXRlIiwic3VwcG9ydHNFdmVudCIsInRhZyIsImRlZmF1bHRQcmV2ZW50ZWQiLCJkZWZhdWx0Rm5zIiwiY3VyckVsZW1lbnQiLCJsaW1pdCIsInRyaWdnZXJFbGVtZW50TGlzdGVuZXJzXyIsInRyaWdnZXJTZWxlY3Rvckxpc3RlbmVyc18iLCJsYXN0Q29udGFpbmVyIiwidHJpZ2dlckxpc3RlbmVyc18iLCJEb21FdmVudEVtaXR0ZXJQcm94eSIsImlzRGVsZWdhdGVFdmVudF8iLCJiYWJlbEhlbHBlcnMuZ2V0IiwiaXNTdXBwb3J0ZWREb21FdmVudF8iLCJmZWF0dXJlcyIsImFuaW1hdGlvbkV2ZW50TmFtZV8iLCJjaGVja0FuaW1hdGlvbkV2ZW50TmFtZV8iLCJwcmVmaXhlcyIsInR5cGVUaXRsZUNhc2UiLCJyZXBsYWNlSW50ZXJ2YWwiLCJ0b1VwcGVyQ2FzZSIsInN1ZmZpeGVzIiwiYW5pbWF0aW9uRWxlbWVudF8iLCJhdHRyT3JkZXJDaGFuZ2VfIiwib3JpZ2luYWxDb250ZW50IiwiZ2xvYmFsRXZhbCIsInRleHQiLCJvcHRfYXBwZW5kRm4iLCJvcHRfY2FsbGJhY2siLCJydW5GaWxlIiwic2NyaXB0cyIsInJ1blNjcmlwdHNJbk9yZGVyIiwicnVuU2NyaXB0IiwiaXRlbSIsImdsb2JhbEV2YWxTdHlsZXMiLCJyZWwiLCJydW5TdHlsZSIsInN0eWxlcyIsImxvYWRDb3VudCIsIm1vdXNlRXZlbnRNYXAiLCJyZWxhdGVkIiwicmVsYXRlZFRhcmdldCIsImN1c3RvbVR5cGUiLCJhbmltYXRpb25FdmVudE1hcCIsImV2ZW50VHlwZSIsImNoZWNrQW5pbWF0aW9uRXZlbnROYW1lIiwiVGhlbmFibGUiLCJJTVBMRU1FTlRFRF9CWV9QUk9QIiwiYWRkSW1wbGVtZW50YXRpb24iLCIkZ29vZ19UaGVuYWJsZSIsImlzSW1wbGVtZW50ZWRCeSIsInBhcnRpYWwiLCJuZXdBcmdzIiwiQ2FuY2VsbGFibGVQcm9taXNlIiwicmVzb2x2ZXIiLCJzdGF0ZV8iLCJTdGF0ZV8iLCJQRU5ESU5HIiwicmVzdWx0XyIsImNhbGxiYWNrRW50cmllc18iLCJleGVjdXRpbmdfIiwiVU5IQU5ETEVEX1JFSkVDVElPTl9ERUxBWSIsInVuaGFuZGxlZFJlamVjdGlvbklkXyIsImhhZFVuaGFuZGxlZFJlamVjdGlvbl8iLCJyZXNvbHZlXyIsIkZVTEZJTExFRCIsInJlYXNvbiIsIlJFSkVDVEVEIiwiQ2FsbGJhY2tFbnRyeV8iLCJyZXNvbHZlIiwib3B0X3ZhbHVlIiwicmVqZWN0Iiwib3B0X3JlYXNvbiIsInJhY2UiLCJwcm9taXNlcyIsInByb21pc2UiLCJhbGwiLCJ0b0Z1bGZpbGwiLCJvbkZ1bGZpbGwiLCJvblJlamVjdCIsImZpcnN0RnVsZmlsbGVkIiwidG9SZWplY3QiLCJyZWFzb25zIiwib3B0X29uRnVsZmlsbGVkIiwib3B0X29uUmVqZWN0ZWQiLCJhZGRDaGlsZFByb21pc2VfIiwidGhlbkFsd2F5cyIsIm9uUmVzb2x2ZWQiLCJoYW5kbGVSZWplY3Rpb25fIiwiYWRkQ2FsbGJhY2tFbnRyeV8iLCJ0aGVuQ2F0Y2giLCJvblJlamVjdGVkIiwiY2F0Y2giLCJjYW5jZWwiLCJvcHRfbWVzc2FnZSIsIkNhbmNlbGxhdGlvbkVycm9yIiwiSVNfQ0FOQ0VMTEFUSU9OX0VSUk9SIiwiY2FuY2VsSW50ZXJuYWxfIiwiY2FuY2VsQ2hpbGRfIiwiY2hpbGRQcm9taXNlIiwiY2hpbGRDb3VudCIsImNoaWxkSW5kZXgiLCJlbnRyeSIsImNhbGxiYWNrRW50cnkiLCJleGVjdXRlQ2FsbGJhY2tfIiwic2NoZWR1bGVDYWxsYmFja3NfIiwib25GdWxmaWxsZWQiLCJyZXN1bHQiLCJ1bmJsb2NrQW5kRnVsZmlsbF8iLCJCTE9DS0VEIiwidW5ibG9ja0FuZFJlamVjdF8iLCJzdGF0ZSIsInRyeVRoZW5fIiwiYWRkVW5oYW5kbGVkUmVqZWN0aW9uXyIsInRoZW5hYmxlIiwiY2FsbGVkIiwiZXhlY3V0ZUNhbGxiYWNrc18iLCJlbnRyaWVzIiwicmVtb3ZlVW5oYW5kbGVkUmVqZWN0aW9uXyIsInNldFRpbWVvdXQiLCJzZXRVbmhhbmRsZWRSZWplY3Rpb25IYW5kbGVyIiwiZGVib3VuY2UiLCJkZWxheSIsImRlYm91bmNlZCIsImNhbmNlbERlYm91bmNlIiwiUkVHRVgiLCJjb252ZXJ0TWF0Y2hlc1RvT2JqIiwiY29udmVydFRva2Vuc1RvUmVnZXgiLCJ0b2tlbnMiLCJyZWdleCIsImNvcmUiLCJlc2NhcGUiLCJjYXB0dXJlIiwiZW5jbG9zZU5vbkNhcHR1cmluZ0dyb3VwIiwicGF0dGVybiIsInJlcGVhdCIsInByZWZpeCIsIm9wdGlvbmFsIiwiUmVnRXhwIiwibWFrZVRyYWlsaW5nU2xhc2hPcHRpb25hbCIsInRlc3QiLCJyb3V0ZU9yVG9rZW5zIiwicm91dGUiLCJ1bm5hbWVkQ291bnQiLCJjdXJyUGF0aCIsImV4ZWMiLCJwYXJhbVBhdHRlcm4iLCJ1bm5hbWVkUGF0dGVybiIsIm1vZGlmaWVyIiwidG9SZWdleCIsImV4dHJhY3REYXRhIiwicGFyYW1JbmRleCIsIlJvdXRlIiwicGFyc2VkRGF0YV8iLCJidWlsZFBhcnNlZERhdGFfIiwiQ2FjaGVhYmxlIiwiY2FjaGUiLCJjYWNoZWFibGUiLCJjb250ZW50IiwiY2xlYXJDYWNoZSIsIlNjcmVlbiIsIm1ha2VJZF8iLCJ0aXRsZSIsImxvZyIsInN1cmZhY2VzIiwic0lkIiwiYWN0aXZlQ2hpbGQiLCJydW5TY3JpcHRzSW5FbGVtZW50IiwidHJhbnNpdGlvbnMiLCJzdXJmYWNlIiwiZGVmZXJyZWQiLCJzaG93IiwiU3VyZmFjZSIsImRlZmF1bHRDaGlsZCIsInRyYW5zaXRpb25GbiIsImdldENoaWxkIiwiREVGQVVMVCIsIm1heWJlV3JhcENvbnRlbnRBc0RlZmF1bHRfIiwic2NyZWVuSWQiLCJvcHRfY29udGVudCIsImNyZWF0ZUNoaWxkIiwidHJhbnNpdGlvbiIsImdldEVsZW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImFkZENvbnRlbnQiLCJmcm9tIiwidG8iLCJkZWZhdWx0VHJhbnNpdGlvbiIsIkFwcCIsImFjdGl2ZVNjcmVlbiIsImFjdGl2ZVBhdGgiLCJhbGxvd1ByZXZlbnROYXZpZ2F0ZSIsImJyb3dzZXJQYXRoQmVmb3JlTmF2aWdhdGUiLCJjYXB0dXJlU2Nyb2xsUG9zaXRpb25Gcm9tU2Nyb2xsRXZlbnQiLCJkZWZhdWx0VGl0bGUiLCJmb3JtU2VsZWN0b3IiLCJpZ25vcmVRdWVyeVN0cmluZ0Zyb21Sb3V0ZVBhdGgiLCJsaW5rU2VsZWN0b3IiLCJsb2FkaW5nQ3NzQ2xhc3MiLCJuYXRpdmVTY3JvbGxSZXN0b3JhdGlvblN1cHBvcnRlZCIsImlzTmF2aWdhdGlvblBlbmRpbmciLCJwZW5kaW5nTmF2aWdhdGUiLCJwb3BzdGF0ZVNjcm9sbExlZnQiLCJwb3BzdGF0ZVNjcm9sbFRvcCIsInJlZGlyZWN0UGF0aCIsInJvdXRlcyIsInNjcmVlbnMiLCJza2lwTG9hZFBvcHN0YXRlIiwidXBkYXRlU2Nyb2xsUG9zaXRpb24iLCJhcHBFdmVudEhhbmRsZXJzXyIsIm9uU2Nyb2xsXyIsIm9uTG9hZF8iLCJvblBvcHN0YXRlXyIsIm9uU3RhcnROYXZpZ2F0ZV8iLCJvbkJlZm9yZU5hdmlnYXRlXyIsIm9uQmVmb3JlTmF2aWdhdGVEZWZhdWx0XyIsInNldExpbmtTZWxlY3RvciIsInNldEZvcm1TZWxlY3RvciIsImdldElkIiwiaXNXZWJVcmkiLCJpc0xpbmtTYW1lT3JpZ2luXyIsImlzU2FtZUJhc2VQYXRoXyIsImlzQ3VycmVudEJyb3dzZXJQYXRoIiwiZmluZFJvdXRlIiwicmVtb3ZlU2NyZWVuIiwic2NyZWVuIiwiZ2V0SGFuZGxlciIsImNsZWFyU2NyZWVuc0NhY2hlIiwiZm9ybUV2ZW50SGFuZGxlcl8iLCJsaW5rRXZlbnRIYW5kbGVyXyIsInJlbW92ZUFsbExpc3RlbmVycyIsIm5hdmlnYXRlIiwiZ2V0Q3VycmVudEJyb3dzZXJQYXRoIiwib3B0X3JlcGxhY2VIaXN0b3J5IiwiYmVmb3JlRGVhY3RpdmF0ZSIsInN0b3BQZW5kaW5nTmF2aWdhdGVfIiwibmV4dFNjcmVlbiIsImNyZWF0ZVNjcmVlbkluc3RhbmNlIiwibG9hZCIsImRlYWN0aXZhdGUiLCJwcmVwYXJlTmF2aWdhdGVIaXN0b3J5XyIsInByZXBhcmVOYXZpZ2F0ZVN1cmZhY2VzXyIsImV4dHJhY3RQYXJhbXMiLCJldmFsdWF0ZVN0eWxlcyIsImZsaXAiLCJldmFsdWF0ZVNjcmlwdHMiLCJtYXliZVVwZGF0ZVNjcm9sbFBvc2l0aW9uU3RhdGVfIiwic3luY1Njcm9sbFBvc2l0aW9uU3luY1RoZW5Bc3luY18iLCJmaW5hbGl6ZU5hdmlnYXRlXyIsImhhbmRsZU5hdmlnYXRlRXJyb3JfIiwiZ2V0Um91dGVQYXRoIiwiYWN0aXZhdGUiLCJpc0NhY2hlYWJsZSIsImNhcHR1cmVkRm9ybUVsZW1lbnQiLCJjYXB0dXJlZEZvcm1CdXR0b25FbGVtZW50IiwibWF0Y2hlc1BhdGgiLCJnZXRJZ25vcmVRdWVyeVN0cmluZ0Zyb21Sb3V0ZVBhdGgiLCJnZXRVcmxQYXRoV2l0aG91dEhhc2hBbmRTZWFyY2giLCJ3aW5uZXIiLCJzd2l0Y2hTY3JvbGxQb3NpdGlvblJhY2UiLCJzY3JvbGxUbyIsInNjcm9sbExlZnQiLCJzY3JvbGxUb3AiLCJuYXRpdmVTY3JvbGxSZXN0b3JhdGlvbl8iLCJzY3JvbGxSZXN0b3JhdGlvbiIsImNhbk5hdmlnYXRlIiwibmF2aWdhdGVGYWlsZWQiLCJwcmV2ZW50RGVmYXVsdCIsImFuY2hvckVsZW1lbnQiLCJnZXROb2RlT2Zmc2V0Iiwic2F2ZUhpc3RvcnlDdXJyZW50UGFnZVNjcm9sbFBvc2l0aW9uXyIsIm9wdF9ldmVudCIsImlzSHRtbDVIaXN0b3J5U3VwcG9ydGVkIiwiZm9ybSIsInJlcGxhY2VIaXN0b3J5IiwiYWx0S2V5IiwiY3RybEtleSIsIm1ldGFLZXkiLCJzaGlmdEtleSIsIm1heWJlTmF2aWdhdGVfIiwibWV0aG9kIiwiYnV0dG9uU2VsZWN0b3IiLCJhY3RpdmVFbGVtZW50IiwicXVlcnlTZWxlY3RvciIsImFjdGlvbiIsIm1heWJlUmVwb3NpdGlvblNjcm9sbFRvSGFzaGVkQW5jaG9yIiwicmVsb2FkUGFnZSIsInNlbm5hIiwibG9ja0hpc3RvcnlTY3JvbGxQb3NpdGlvbl8iLCJwYWdlWU9mZnNldCIsInBhZ2VYT2Zmc2V0IiwibWF5YmVEaXNhYmxlTmF0aXZlU2Nyb2xsUmVzdG9yYXRpb24iLCJlbmROYXZpZ2F0ZVBheWxvYWQiLCJkb05hdmlnYXRlXyIsIm1heWJlUmVzdG9yZU5hdGl2ZVNjcm9sbFJlc3RvcmF0aW9uIiwiZ2V0VGl0bGUiLCJnZXREZWZhdWx0VGl0bGUiLCJiZWZvcmVVcGRhdGVIaXN0b3J5UGF0aCIsImhpc3RvcnlTdGF0ZSIsIm1heWJlUmVzdG9yZVJlZGlyZWN0UGF0aEhhc2hfIiwidXBkYXRlSGlzdG9yeV8iLCJiZWZvcmVVcGRhdGVIaXN0b3J5U3RhdGUiLCJwYXJhbXMiLCJzdXJmYWNlQ29udGVudCIsImdldFN1cmZhY2VDb250ZW50IiwicmVsb2FkIiwic3VyZmFjZUlkIiwiZGlzcG9zZSIsInJlcGxhY2VTdGF0ZSIsInJlbW92ZVBhdGhUcmFpbGluZ1NsYXNoIiwib25Eb2NTdWJtaXREZWxlZ2F0ZV8iLCJvbkRvY0NsaWNrRGVsZWdhdGVfIiwic3luYyIsInRpdGxlTm9kZSIsIkFqYXgiLCJhbGxIZWFkZXJzIiwiaGVhZGVycyIsInBhaXJzIiwiYm9keSIsIm9wdF9oZWFkZXJzIiwib3B0X3BhcmFtcyIsIm9wdF90aW1lb3V0Iiwib3B0X3N5bmMiLCJvcHRfd2l0aENyZWRlbnRpYWxzIiwicmVxdWVzdCIsIlhNTEh0dHBSZXF1ZXN0IiwiUHJvbWlzZSIsIm9ubG9hZCIsImFib3J0ZWQiLCJvbmVycm9yIiwiYWJvcnQiLCJ0aW1lb3V0IiwiYWRkUGFyYW1ldGVyc0Zyb21NdWx0aU1hcCIsIndpdGhDcmVkZW50aWFscyIsInNldFJlcXVlc3RIZWFkZXIiLCJzZW5kIiwiZXJyb3JzIiwiSU5WQUxJRF9TVEFUVVMiLCJSRVFVRVNUX0VSUk9SIiwiUkVRVUVTVF9USU1FT1VUIiwiVUEiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJwbGF0Zm9ybSIsImlzTWFjIiwibWF0Y2hQbGF0Zm9ybSIsImlzV2luIiwiaXNPcGVyYSIsIm1hdGNoVXNlckFnZW50IiwiaXNJZSIsImlzRWRnZSIsImlzSWVPckVkZ2UiLCJpc0Nocm9tZSIsImlzU2FmYXJpIiwiaXNGaXJlZm94IiwidGVzdFVzZXJBZ2VudCIsImdldE5hdGl2ZVVzZXJBZ2VudCIsImdldE5hdGl2ZVBsYXRmb3JtIiwiUmVxdWVzdFNjcmVlbiIsImh0dHBIZWFkZXJzIiwiaHR0cE1ldGhvZCIsIkdFVCIsInN0YXR1cyIsImlzVmFsaWRSZXNwb25zZVN0YXR1c0NvZGUiLCJpbnZhbGlkU3RhdHVzIiwic3RhdHVzQ29kZSIsImdldFJlcXVlc3RQYXRoIiwic2V0SG9zdG5hbWUiLCJzZXRQcm90b2NvbCIsInNldFBvcnQiLCJtYWtlVW5pcXVlIiwiZ2V0UmVxdWVzdCIsInJlcXVlc3RQYXRoIiwicmVzcG9uc2VVcmwiLCJtYXliZUV4dHJhY3RSZXNwb25zZVVybEZyb21SZXF1ZXN0IiwicmVtb3ZlVW5pcXVlIiwiZ2V0Q2FjaGUiLCJoZWFkZXIiLCJGb3JtRGF0YSIsIm1heWJlQXBwZW5kU3VibWl0QnV0dG9uVmFsdWVfIiwiUE9TVCIsImZvcm1hdExvYWRQYXRoIiwic2V0UmVxdWVzdCIsInhociIsImFzc2VydFZhbGlkUmVzcG9uc2VTdGF0dXNDb2RlIiwiYWRkQ2FjaGUiLCJyZXNwb25zZVRleHQiLCJyZXF1ZXN0RXJyb3IiLCJyZXNwb25zZVVSTCIsImdldFJlc3BvbnNlSGVhZGVyIiwiWF9SRVFVRVNUX1VSTF9IRUFERVIiLCJIdG1sU2NyZWVuIiwidGl0bGVTZWxlY3RvciIsInJlbGVhc2VWaXJ0dWFsRG9jdW1lbnQiLCJwZW5kaW5nU3R5bGVzIiwidmlydHVhbERvY3VtZW50IiwiY29weU5vZGVBdHRyaWJ1dGVzRnJvbUNvbnRlbnRfIiwibmV3U3R5bGUiLCJpc1RlbXBvcmFyeVN0eWxlIiwic3R5bGVzVGVtcG9yYXJ5Iiwic3R5bGVJbkRvYyIsImluc2VydEJlZm9yZSIsIm5leHRTaWJsaW5nIiwiYm9keVN1cmZhY2UiLCJwbGFjZWhvbGRlciIsImNsZWFyTm9kZUF0dHJpYnV0ZXMiLCJjb3B5Tm9kZUF0dHJpYnV0ZXMiLCJkaXNwb3NlUGVuZGluZ1N0eWxlcyIsImV2YWx1YXRlVHJhY2tlZFNjcmlwdHMiLCJldmFsdWF0ZVRyYWNrZWRSZXNvdXJjZXNfIiwic2NyaXB0c1RlbXBvcmFyeSIsInNjcmlwdHNQZXJtYW5lbnQiLCJldmFsdWF0ZVRyYWNrZWRTdHlsZXMiLCJydW5TdHlsZXNJbkVsZW1lbnQiLCJzdHlsZXNQZXJtYW5lbnQiLCJhcHBlbmRTdHlsZUludG9Eb2N1bWVudF8iLCJldmFsdWF0b3JGbiIsInNlbGVjdG9yVGVtcG9yYXJ5Iiwic2VsZWN0b3JQZXJtYW5lbnQiLCJvcHRfYXBwZW5kUmVzb3VyY2VGbiIsInRyYWNrZWQiLCJ2aXJ0dWFsUXVlcnlTZWxlY3RvckFsbF8iLCJ0ZW1wb3Jhcmllc0luRG9jIiwicXVlcnlTZWxlY3RvckFsbF8iLCJwZXJtYW5lbnRzSW5Eb2MiLCJyZXNvdXJjZSIsInJlc291cmNlS2V5IiwiZ2V0UmVzb3VyY2VLZXlfIiwicGVybWFuZW50UmVzb3VyY2VzSW5Eb2MiLCJmcmFnIiwiYWxsb2NhdGVWaXJ0dWFsRG9jdW1lbnRGb3JDb250ZW50IiwicmVzb2x2ZVRpdGxlRnJvbVZpcnR1YWxEb2N1bWVudCIsImFzc2VydFNhbWVCb2R5SWRJblZpcnR1YWxEb2N1bWVudCIsIm1ha2VUZW1wb3JhcnlTdHlsZXNIcmVmc1VuaXF1ZV8iLCJyZXBsYWNlU3R5bGVBbmRNYWtlVW5pcXVlXyIsInJlcGxhY2VDaGlsZCIsInNldFRpdGxlIiwidGV4dENvbnRlbnQiLCJBcHBEYXRhQXR0cmlidXRlSGFuZGxlciIsImFwcCIsImJhc2VFbGVtZW50IiwiaGFzQXR0cmlidXRlIiwiZGF0YUF0dHJpYnV0ZXMiLCJtYXliZUFkZFJvdXRlc18iLCJtYXliZUFkZFN1cmZhY2VzXyIsIm1heWJlU2V0QmFzZVBhdGhfIiwibWF5YmVTZXRMaW5rU2VsZWN0b3JfIiwibWF5YmVTZXRMb2FkaW5nQ3NzQ2xhc3NfIiwibWF5YmVTZXRVcGRhdGVTY3JvbGxQb3NpdGlvbl8iLCJtYXliZURpc3BhdGNoXyIsInJvdXRlc1NlbGVjdG9yIiwicXVlcnlTZWxlY3RvckFsbEFzQXJyYXlfIiwibWF5YmVQYXJzZUxpbmtSb3V0ZV8iLCJoYXNSb3V0ZXMiLCJhZGRSb3V0ZXMiLCJzdXJmYWNlc1NlbGVjdG9yIiwic3VyZmFjZUVsZW1lbnQiLCJ1cGRhdGVFbGVtZW50SWRJZlNwZWNpYWxTdXJmYWNlXyIsImFkZFN1cmZhY2VzIiwiZGlzcGF0Y2giLCJtYXliZVBhcnNlTGlua1JvdXRlUGF0aF8iLCJtYXliZVBhcnNlTGlua1JvdXRlSGFuZGxlcl8iLCJnZXRQYXRoIiwiZ2V0QXR0cmlidXRlIiwiZ2V0T2JqZWN0QnlOYW1lIiwic2V0QmFzZVBhdGgiLCJzZXRMb2FkaW5nQ3NzQ2xhc3MiLCJzZXRVcGRhdGVTY3JvbGxQb3NpdGlvbiIsImRhdGFBdHRyaWJ1dGVIYW5kbGVyIiwic2V0QmFzZUVsZW1lbnQiLCJoYW5kbGUiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQUlBLFVBQVVBLFdBQVcsRUFBekI7O0FBRUEsSUFBSSxPQUFPQyxNQUFQLEtBQWtCLFdBQXRCLEVBQW1DO1NBQzFCQSxNQUFSLEdBQWlCQSxNQUFqQjs7O0FBR0QsSUFBSSxPQUFPQyxRQUFQLEtBQW9CLFdBQXhCLEVBQXFDO1NBQzVCQSxRQUFSLEdBQW1CQSxRQUFuQjtDQUdEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ1JBOzs7OztBQUtBLElBQUlDLCtCQUFKOzs7Ozs7O0FBT0EsSUFBSUMsbUJBQW1CLENBQXZCOzs7Ozs7O0FBT0EsQUFBTyxJQUFNQywwQkFBeUJDLEtBQUtDLE1BQUwsS0FBZ0IsR0FBakIsS0FBMEIsQ0FBbEQsQ0FBTjs7Ozs7Ozs7Ozs7O0FBWVAsQUFBTyxTQUFTQyxjQUFULEdBQTBCO1FBQzFCQyxNQUFNLCtCQUFOLENBQU47Ozs7OztBQU1ELEFBQU8sU0FBU0Msd0JBQVQsR0FBb0M7MkJBQ2pCQyxTQUF6Qjs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQW1CRCxBQUFPLFNBQVNDLHVCQUFULEdBQWdEO01BQWZDLFFBQWUsdUVBQUosRUFBSTs7MkJBQzdCQSxRQUF6Qjs7Ozs7Ozs7QUFRRCxBQUFPLFNBQVNDLHdCQUFULEdBQW9DOztNQUV0Q1gsMkJBQTJCUSxTQUEvQixFQUEwQztRQUNyQyxPQUFPVixNQUFQLEtBQWtCLFdBQWxCLElBQWlDQSxPQUFPYyx1QkFBNUMsRUFBcUU7OEJBQzVDZCxPQUFPYyx1QkFBL0I7OztTQUdLWixzQkFBUDs7Ozs7Ozs7OztBQVVELFNBQVNhLGVBQVQsQ0FB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"}